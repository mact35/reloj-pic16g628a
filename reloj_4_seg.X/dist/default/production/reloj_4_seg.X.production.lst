

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jun 02 14:23:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.05
    23                           ; Generated 20/12/2018 GMT
    24                           ; 
    25                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F628A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  008C                     	;# 
    84  008E                     	;# 
    85  0092                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009F                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009F                     	;# 
   130                           
   131                           	psect	idataBANK0
   132  0599                     __pidataBANK0:	
   133                           
   134                           ;initializer for _m2
   135  0599  3405               	retlw	5
   136                           
   137                           ;initializer for _m1
   138  059A  3402               	retlw	2
   139                           
   140                           ;initializer for _h2
   141  059B  3404               	retlw	4
   142                           
   143                           ;initializer for _h1
   144  059C  3401               	retlw	1
   145                           
   146                           	psect	idataEEDATA
   147  0000                     __pidataEEDATA:	
   148  0000                     _tiempo:	
   149                           ;initializer for _tiempo
   150                           
   151  0000  00D7               	db	215
   152  0001  0005               	db	5
   153  0002                     _timer0:	
   154                           ;initializer for _timer0
   155                           
   156  0002  0062               	db	98
   157  0006                     _PORTB	set	6
   158  0001                     _TMR0	set	1
   159  0034                     _RB4	set	52
   160  0033                     _RB3	set	51
   161  0032                     _RB2	set	50
   162  0031                     _RB1	set	49
   163  0036                     _RB6	set	54
   164  0035                     _RB5	set	53
   165  0037                     _RB7	set	55
   166  009A                     _EEDATA	set	154
   167  009C                     _EECON1	set	156
   168  009B                     _EEADR	set	155
   169  009C                     _EECON1bits	set	156
   170  0081                     _OPTION_REG	set	129
   171  0086                     _TRISB	set	134
   172                           
   173                           ; #config settings
   174  0000                     
   175                           	psect	cinit
   176  07F2                     start_initialization:	
   177  07F2                     __initialization:	
   178                           
   179                           ; Initialize objects allocated to BANK0
   180  07F2  2599               	fcall	__pidataBANK0	;fetch initializer
   181  07F3  00A9               	movwf	__pdataBANK0& (0+127)
   182  07F4  259A               	fcall	__pidataBANK0+1	;fetch initializer
   183  07F5  00AA               	movwf	(__pdataBANK0+1)& (0+127)
   184  07F6  259B               	fcall	__pidataBANK0+2	;fetch initializer
   185  07F7  00AB               	movwf	(__pdataBANK0+2)& (0+127)
   186  07F8  259C               	fcall	__pidataBANK0+3	;fetch initializer
   187  07F9  00AC               	movwf	(__pdataBANK0+3)& (0+127)
   188                           
   189                           ; Clear objects allocated to BANK0
   190  07FA  01A5               	clrf	__pbssBANK0& (0+127)
   191  07FB  01A6               	clrf	(__pbssBANK0+1)& (0+127)
   192  07FC  01A7               	clrf	(__pbssBANK0+2)& (0+127)
   193  07FD  01A8               	clrf	(__pbssBANK0+3)& (0+127)
   194  07FE                     end_of_initialization:	
   195                           ;End of C runtime variable initialization code
   196                           
   197  07FE                     __end_of__initialization:	
   198  07FE  0183               	clrf	3
   199  07FF  2E2A               	ljmp	_main	;jump to C main() function
   200                           
   201                           	psect	dataEEDATA
   202  0000                     __pdataEEDATA:	
   203                           
   204                           	psect	bssBANK0
   205  0025                     __pbssBANK0:	
   206  0025                     _cnt:	
   207  0025                     	ds	2
   208  0027                     _ant:	
   209  0027                     	ds	1
   210  0028                     _blink:	
   211  0028                     	ds	1
   212                           
   213                           	psect	dataBANK0
   214  0029                     __pdataBANK0:	
   215  0029                     _m2:	
   216  0029                     	ds	1
   217  002A                     _m1:	
   218  002A                     	ds	1
   219  002B                     _h2:	
   220  002B                     	ds	1
   221  002C                     _h1:	
   222  002C                     	ds	1
   223                           
   224                           	psect	cstackCOMMON
   225  0070                     __pcstackCOMMON:	
   226  0070                     ?_writeBit:	
   227  0070                     ??_writeBit:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_addMinute:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_main:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?___eecpymem:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?___eetoc:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?___lwdiv:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     writeBit@_bit:	
   246                           ; 2 bytes @ 0x0
   247                           
   248  0070                     ___eecpymem@from:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ___lwdiv@divisor:	
   252                           ; 1 bytes @ 0x0
   253                           
   254                           
   255                           ; 2 bytes @ 0x0
   256  0070                     	ds	1
   257  0071                     ___eecpymem@size:	
   258                           
   259                           ; 1 bytes @ 0x1
   260  0071                     	ds	1
   261  0072                     ??___eecpymem:	
   262  0072                     ___lwdiv@dividend:	
   263                           ; 1 bytes @ 0x2
   264                           
   265                           
   266                           ; 2 bytes @ 0x2
   267  0072                     	ds	1
   268  0073                     ___eecpymem@cp:	
   269                           
   270                           ; 1 bytes @ 0x3
   271  0073                     	ds	1
   272  0074                     ??___lwdiv:	
   273  0074                     ___eecpymem@to:	
   274                           ; 1 bytes @ 0x4
   275                           
   276                           
   277                           ; 1 bytes @ 0x4
   278  0074                     	ds	1
   279  0075                     ??___eetoc:	
   280  0075                     ?___eetoi:	
   281                           ; 1 bytes @ 0x5
   282                           
   283  0075                     ___lwdiv@quotient:	
   284                           ; 2 bytes @ 0x5
   285                           
   286                           
   287                           ; 2 bytes @ 0x5
   288  0075                     	ds	1
   289  0076                     ___eetoc@addr:	
   290                           
   291                           ; 1 bytes @ 0x6
   292  0076                     	ds	1
   293  0077                     ??___eetoi:	
   294  0077                     ___eetoc@data:	
   295                           ; 1 bytes @ 0x7
   296                           
   297  0077                     ___lwdiv@counter:	
   298                           ; 1 bytes @ 0x7
   299                           
   300                           
   301                           ; 1 bytes @ 0x7
   302  0077                     	ds	2
   303  0079                     ___eetoi@addr:	
   304                           
   305                           ; 1 bytes @ 0x9
   306  0079                     	ds	1
   307  007A                     ___eetoi@data:	
   308                           
   309                           ; 2 bytes @ 0xA
   310  007A                     	ds	2
   311  007C                     ??_addMinute:	
   312                           
   313                           ; 1 bytes @ 0xC
   314  007C                     	ds	2
   315                           
   316                           	psect	cstackBANK0
   317  0020                     __pcstackBANK0:	
   318  0020                     ?_writeNumber:	
   319  0020                     writeNumber@point:	
   320                           ; 1 bytes @ 0x0
   321                           
   322                           
   323                           ; 1 bytes @ 0x0
   324  0020                     	ds	1
   325  0021                     ??_writeNumber:	
   326                           
   327                           ; 1 bytes @ 0x1
   328  0021                     	ds	2
   329  0023                     writeNumber@num:	
   330                           
   331                           ; 1 bytes @ 0x3
   332  0023                     	ds	1
   333  0024                     ??_main:	
   334                           
   335                           ; 1 bytes @ 0x4
   336  0024                     	ds	1
   337                           
   338                           	psect	maintext
   339  062A                     __pmaintext:	
   340 ;;
   341 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   342 ;;
   343 ;; *************** function _main *****************
   344 ;; Defined at:
   345 ;;		line 187 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : B00/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   359 ;;      Params:         0       0       0       0
   360 ;;      Locals:         0       0       0       0
   361 ;;      Temps:          0       1       0       0
   362 ;;      Totals:         0       1       0       0
   363 ;;Total ram usage:        1 bytes
   364 ;; Hardware stack levels required when called:    4
   365 ;; This function calls:
   366 ;;		___eetoc
   367 ;;		_writeNumber
   368 ;; This function is called by:
   369 ;;		Startup code after reset
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373                           
   374                           ;psect for function _main
   375  062A                     _main:	
   376                           
   377                           ;main.c: 188:     TRISB = 0b00000000;
   378                           
   379                           ;incstack = 0
   380                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   381  062A  1683               	bsf	3,5	;RP0=1, select bank1
   382  062B  1303               	bcf	3,6	;RP1=0, select bank1
   383  062C  0186               	clrf	6	;volatile
   384                           
   385                           ;main.c: 189:     PORTB = 0;
   386  062D  1283               	bcf	3,5	;RP0=0, select bank0
   387  062E  1303               	bcf	3,6	;RP1=0, select bank0
   388  062F  0186               	clrf	6	;volatile
   389                           
   390                           ;main.c: 190:     OPTION_REG = 0b00000111;
   391  0630  3007               	movlw	7
   392  0631  1683               	bsf	3,5	;RP0=1, select bank1
   393  0632  1303               	bcf	3,6	;RP1=0, select bank1
   394  0633  0081               	movwf	1	;volatile
   395                           
   396                           ;main.c: 192:     TMR0 = timer0;
   397  0634  3002               	movlw	(low _timer0)& (0+255)
   398  0635  259D               	fcall	___eetoc
   399  0636  1283               	bcf	3,5	;RP0=0, select bank0
   400  0637  1303               	bcf	3,6	;RP1=0, select bank0
   401  0638  0081               	movwf	1	;volatile
   402  0639                     l1022:	
   403                           
   404                           ;main.c: 195:         RB1 = 1;
   405  0639  1283               	bcf	3,5	;RP0=0, select bank0
   406  063A  1303               	bcf	3,6	;RP1=0, select bank0
   407  063B  1486               	bsf	6,1	;volatile
   408                           
   409                           ;main.c: 196:         RB2 = 0;
   410  063C  1106               	bcf	6,2	;volatile
   411                           
   412                           ;main.c: 197:         RB3 = 0;
   413  063D  1186               	bcf	6,3	;volatile
   414                           
   415                           ;main.c: 198:         RB4 = 0;
   416  063E  1206               	bcf	6,4	;volatile
   417                           
   418                           ;main.c: 199:         writeNumber(h1,1);
   419  063F  01A0               	clrf	writeNumber@point
   420  0640  0AA0               	incf	writeNumber@point,f
   421  0641  082C               	movf	_h1,w
   422  0642  2702               	fcall	_writeNumber
   423                           
   424                           ;main.c: 200:         writeNumber(10,1);
   425  0643  1283               	bcf	3,5	;RP0=0, select bank0
   426  0644  1303               	bcf	3,6	;RP1=0, select bank0
   427  0645  01A0               	clrf	writeNumber@point
   428  0646  0AA0               	incf	writeNumber@point,f
   429  0647  300A               	movlw	10
   430  0648  2702               	fcall	_writeNumber
   431                           
   432                           ;main.c: 201:         RB1 = 0;
   433  0649  1283               	bcf	3,5	;RP0=0, select bank0
   434  064A  1303               	bcf	3,6	;RP1=0, select bank0
   435  064B  1086               	bcf	6,1	;volatile
   436                           
   437                           ;main.c: 202:         RB2 = 1;
   438  064C  1506               	bsf	6,2	;volatile
   439                           
   440                           ;main.c: 203:         RB3 = 0;
   441  064D  1186               	bcf	6,3	;volatile
   442                           
   443                           ;main.c: 204:         RB4 = 0;
   444  064E  1206               	bcf	6,4	;volatile
   445                           
   446                           ;main.c: 205:         writeNumber(h2,blink);
   447  064F  0828               	movf	_blink,w
   448  0650  00A4               	movwf	??_main
   449  0651  0824               	movf	??_main,w
   450  0652  00A0               	movwf	writeNumber@point
   451  0653  082B               	movf	_h2,w
   452  0654  2702               	fcall	_writeNumber
   453                           
   454                           ;main.c: 206:         writeNumber(10,1);
   455  0655  1283               	bcf	3,5	;RP0=0, select bank0
   456  0656  1303               	bcf	3,6	;RP1=0, select bank0
   457  0657  01A0               	clrf	writeNumber@point
   458  0658  0AA0               	incf	writeNumber@point,f
   459  0659  300A               	movlw	10
   460  065A  2702               	fcall	_writeNumber
   461                           
   462                           ;main.c: 207:         RB1 = 0;
   463  065B  1283               	bcf	3,5	;RP0=0, select bank0
   464  065C  1303               	bcf	3,6	;RP1=0, select bank0
   465  065D  1086               	bcf	6,1	;volatile
   466                           
   467                           ;main.c: 208:         RB2 = 0;
   468  065E  1106               	bcf	6,2	;volatile
   469                           
   470                           ;main.c: 209:         RB3 = 1;
   471  065F  1586               	bsf	6,3	;volatile
   472                           
   473                           ;main.c: 210:         RB4 = 0;
   474  0660  1206               	bcf	6,4	;volatile
   475                           
   476                           ;main.c: 211:         writeNumber(m1,blink);
   477  0661  0828               	movf	_blink,w
   478  0662  00A4               	movwf	??_main
   479  0663  0824               	movf	??_main,w
   480  0664  00A0               	movwf	writeNumber@point
   481  0665  082A               	movf	_m1,w
   482  0666  2702               	fcall	_writeNumber
   483                           
   484                           ;main.c: 212:         writeNumber(10,1);
   485  0667  1283               	bcf	3,5	;RP0=0, select bank0
   486  0668  1303               	bcf	3,6	;RP1=0, select bank0
   487  0669  01A0               	clrf	writeNumber@point
   488  066A  0AA0               	incf	writeNumber@point,f
   489  066B  300A               	movlw	10
   490  066C  2702               	fcall	_writeNumber
   491                           
   492                           ;main.c: 213:         RB1 = 0;
   493  066D  1283               	bcf	3,5	;RP0=0, select bank0
   494  066E  1303               	bcf	3,6	;RP1=0, select bank0
   495  066F  1086               	bcf	6,1	;volatile
   496                           
   497                           ;main.c: 214:         RB2 = 0;
   498  0670  1106               	bcf	6,2	;volatile
   499                           
   500                           ;main.c: 215:         RB3 = 0;
   501  0671  1186               	bcf	6,3	;volatile
   502                           
   503                           ;main.c: 216:         RB4 = 1;
   504  0672  1606               	bsf	6,4	;volatile
   505                           
   506                           ;main.c: 217:         writeNumber(m2,1);
   507  0673  01A0               	clrf	writeNumber@point
   508  0674  0AA0               	incf	writeNumber@point,f
   509  0675  0829               	movf	_m2,w
   510  0676  2702               	fcall	_writeNumber
   511                           
   512                           ;main.c: 218:         writeNumber(10,1);
   513  0677  1283               	bcf	3,5	;RP0=0, select bank0
   514  0678  1303               	bcf	3,6	;RP1=0, select bank0
   515  0679  01A0               	clrf	writeNumber@point
   516  067A  0AA0               	incf	writeNumber@point,f
   517  067B  300A               	movlw	10
   518  067C  2702               	fcall	_writeNumber
   519  067D  2E39               	goto	l1022
   520  067E                     __end_of_main:	
   521                           
   522                           	psect	text1
   523  0702                     __ptext1:	
   524 ;; *************** function _writeNumber *****************
   525 ;; Defined at:
   526 ;;		line 67 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;  num             1    wreg     unsigned char 
   529 ;;  point           1    0[BANK0 ] unsigned char 
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  num             1    3[BANK0 ] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   541 ;;      Params:         0       1       0       0
   542 ;;      Locals:         0       1       0       0
   543 ;;      Temps:          0       2       0       0
   544 ;;      Totals:         0       4       0       0
   545 ;;Total ram usage:        4 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:    3
   548 ;; This function calls:
   549 ;;		_addMinute
   550 ;;		_writeBit
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           
   557                           ;psect for function _writeNumber
   558  0702                     _writeNumber:	
   559                           
   560                           ;incstack = 0
   561                           ; Regs used in _writeNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   562                           ;writeNumber@num stored from wreg
   563  0702  1283               	bcf	3,5	;RP0=0, select bank0
   564  0703  1303               	bcf	3,6	;RP1=0, select bank0
   565  0704  00A3               	movwf	writeNumber@num
   566                           
   567                           ;main.c: 68:     RB6 = 0;
   568  0705  1306               	bcf	6,6	;volatile
   569                           
   570                           ;main.c: 69:     switch (num)
   571  0706  2FC2               	goto	l1008
   572  0707                     l984:	
   573                           
   574                           ;main.c: 72:             writeBit(point);
   575  0707  0820               	movf	writeNumber@point,w
   576  0708  25B8               	fcall	_writeBit
   577                           
   578                           ;main.c: 73:             writeBit(1);
   579  0709  3001               	movlw	1
   580  070A  25B8               	fcall	_writeBit
   581                           
   582                           ;main.c: 74:             writeBit(1);
   583  070B  3001               	movlw	1
   584  070C  25B8               	fcall	_writeBit
   585                           
   586                           ;main.c: 75:             writeBit(1);
   587  070D  3001               	movlw	1
   588  070E  25B8               	fcall	_writeBit
   589                           
   590                           ;main.c: 76:             writeBit(1);
   591  070F  3001               	movlw	1
   592  0710  25B8               	fcall	_writeBit
   593                           
   594                           ;main.c: 77:             writeBit(0);
   595  0711  3000               	movlw	0
   596  0712  25B8               	fcall	_writeBit
   597                           
   598                           ;main.c: 78:             writeBit(0);
   599  0713  3000               	movlw	0
   600  0714  25B8               	fcall	_writeBit
   601                           
   602                           ;main.c: 79:             writeBit(1);
   603  0715  3001               	movlw	1
   604  0716  25B8               	fcall	_writeBit
   605                           
   606                           ;main.c: 80:             break;
   607  0717  2FED               	goto	l59
   608  0718                     l986:	
   609                           
   610                           ;main.c: 82:             writeBit(point);
   611  0718  0820               	movf	writeNumber@point,w
   612  0719  25B8               	fcall	_writeBit
   613                           
   614                           ;main.c: 83:             writeBit(0);
   615  071A  3000               	movlw	0
   616  071B  25B8               	fcall	_writeBit
   617                           
   618                           ;main.c: 84:             writeBit(1);
   619  071C  3001               	movlw	1
   620  071D  25B8               	fcall	_writeBit
   621                           
   622                           ;main.c: 85:             writeBit(0);
   623  071E  3000               	movlw	0
   624  071F  25B8               	fcall	_writeBit
   625                           
   626                           ;main.c: 86:             writeBit(0);
   627  0720  3000               	movlw	0
   628  0721  25B8               	fcall	_writeBit
   629                           
   630                           ;main.c: 87:             writeBit(1);
   631  0722  3001               	movlw	1
   632  0723  25B8               	fcall	_writeBit
   633                           
   634                           ;main.c: 88:             writeBit(0);
   635  0724  3000               	movlw	0
   636  0725  25B8               	fcall	_writeBit
   637                           
   638                           ;main.c: 89:             writeBit(0);
   639  0726  3000               	movlw	0
   640  0727  25B8               	fcall	_writeBit
   641                           
   642                           ;main.c: 90:             break;
   643  0728  2FED               	goto	l59
   644  0729                     l988:	
   645                           
   646                           ;main.c: 92:             writeBit(point);
   647  0729  0820               	movf	writeNumber@point,w
   648  072A  25B8               	fcall	_writeBit
   649                           
   650                           ;main.c: 93:             writeBit(0);
   651  072B  3000               	movlw	0
   652  072C  25B8               	fcall	_writeBit
   653                           
   654                           ;main.c: 94:             writeBit(1);
   655  072D  3001               	movlw	1
   656  072E  25B8               	fcall	_writeBit
   657                           
   658                           ;main.c: 95:             writeBit(1);
   659  072F  3001               	movlw	1
   660  0730  25B8               	fcall	_writeBit
   661                           
   662                           ;main.c: 96:             writeBit(0);
   663  0731  3000               	movlw	0
   664  0732  25B8               	fcall	_writeBit
   665                           
   666                           ;main.c: 97:             writeBit(0);
   667  0733  3000               	movlw	0
   668  0734  25B8               	fcall	_writeBit
   669                           
   670                           ;main.c: 98:             writeBit(0);
   671  0735  3000               	movlw	0
   672  0736  25B8               	fcall	_writeBit
   673                           
   674                           ;main.c: 99:             writeBit(0);
   675  0737  3000               	movlw	0
   676  0738  25B8               	fcall	_writeBit
   677                           
   678                           ;main.c: 100:             break;
   679  0739  2FED               	goto	l59
   680  073A                     l990:	
   681                           
   682                           ;main.c: 102:             writeBit(point);
   683  073A  0820               	movf	writeNumber@point,w
   684  073B  25B8               	fcall	_writeBit
   685                           
   686                           ;main.c: 103:             writeBit(0);
   687  073C  3000               	movlw	0
   688  073D  25B8               	fcall	_writeBit
   689                           
   690                           ;main.c: 104:             writeBit(0);
   691  073E  3000               	movlw	0
   692  073F  25B8               	fcall	_writeBit
   693                           
   694                           ;main.c: 105:             writeBit(1);
   695  0740  3001               	movlw	1
   696  0741  25B8               	fcall	_writeBit
   697                           
   698                           ;main.c: 106:             writeBit(1);
   699  0742  3001               	movlw	1
   700  0743  25B8               	fcall	_writeBit
   701                           
   702                           ;main.c: 107:             writeBit(0);
   703  0744  3000               	movlw	0
   704  0745  25B8               	fcall	_writeBit
   705                           
   706                           ;main.c: 108:             writeBit(0);
   707  0746  3000               	movlw	0
   708  0747  25B8               	fcall	_writeBit
   709                           
   710                           ;main.c: 109:             writeBit(1);
   711  0748  3001               	movlw	1
   712  0749  25B8               	fcall	_writeBit
   713                           
   714                           ;main.c: 110:             break;
   715  074A  2FED               	goto	l59
   716  074B                     l992:	
   717                           
   718                           ;main.c: 112:             writeBit(point);
   719  074B  0820               	movf	writeNumber@point,w
   720  074C  25B8               	fcall	_writeBit
   721                           
   722                           ;main.c: 113:             writeBit(0);
   723  074D  3000               	movlw	0
   724  074E  25B8               	fcall	_writeBit
   725                           
   726                           ;main.c: 114:             writeBit(0);
   727  074F  3000               	movlw	0
   728  0750  25B8               	fcall	_writeBit
   729                           
   730                           ;main.c: 115:             writeBit(1);
   731  0751  3001               	movlw	1
   732  0752  25B8               	fcall	_writeBit
   733                           
   734                           ;main.c: 116:             writeBit(0);
   735  0753  3000               	movlw	0
   736  0754  25B8               	fcall	_writeBit
   737                           
   738                           ;main.c: 117:             writeBit(0);
   739  0755  3000               	movlw	0
   740  0756  25B8               	fcall	_writeBit
   741                           
   742                           ;main.c: 118:             writeBit(1);
   743  0757  3001               	movlw	1
   744  0758  25B8               	fcall	_writeBit
   745                           
   746                           ;main.c: 119:             writeBit(0);
   747  0759  3000               	movlw	0
   748  075A  25B8               	fcall	_writeBit
   749                           
   750                           ;main.c: 120:             break;
   751  075B  2FED               	goto	l59
   752  075C                     l994:	
   753                           
   754                           ;main.c: 122:             writeBit(point);
   755  075C  0820               	movf	writeNumber@point,w
   756  075D  25B8               	fcall	_writeBit
   757                           
   758                           ;main.c: 123:             writeBit(0);
   759  075E  3000               	movlw	0
   760  075F  25B8               	fcall	_writeBit
   761                           
   762                           ;main.c: 124:             writeBit(0);
   763  0760  3000               	movlw	0
   764  0761  25B8               	fcall	_writeBit
   765                           
   766                           ;main.c: 125:             writeBit(0);
   767  0762  3000               	movlw	0
   768  0763  25B8               	fcall	_writeBit
   769                           
   770                           ;main.c: 126:             writeBit(0);
   771  0764  3000               	movlw	0
   772  0765  25B8               	fcall	_writeBit
   773                           
   774                           ;main.c: 127:             writeBit(0);
   775  0766  3000               	movlw	0
   776  0767  25B8               	fcall	_writeBit
   777                           
   778                           ;main.c: 128:             writeBit(1);
   779  0768  3001               	movlw	1
   780  0769  25B8               	fcall	_writeBit
   781                           
   782                           ;main.c: 129:             writeBit(0);
   783  076A  3000               	movlw	0
   784  076B  25B8               	fcall	_writeBit
   785                           
   786                           ;main.c: 130:             break;
   787  076C  2FED               	goto	l59
   788  076D                     l996:	
   789                           
   790                           ;main.c: 132:             writeBit(point);
   791  076D  0820               	movf	writeNumber@point,w
   792  076E  25B8               	fcall	_writeBit
   793                           
   794                           ;main.c: 133:             writeBit(1);
   795  076F  3001               	movlw	1
   796  0770  25B8               	fcall	_writeBit
   797                           
   798                           ;main.c: 134:             writeBit(1);
   799  0771  3001               	movlw	1
   800  0772  25B8               	fcall	_writeBit
   801                           
   802                           ;main.c: 135:             writeBit(1);
   803  0773  3001               	movlw	1
   804  0774  25B8               	fcall	_writeBit
   805                           
   806                           ;main.c: 136:             writeBit(1);
   807  0775  3001               	movlw	1
   808  0776  25B8               	fcall	_writeBit
   809                           
   810                           ;main.c: 137:             writeBit(0);
   811  0777  3000               	movlw	0
   812  0778  25B8               	fcall	_writeBit
   813                           
   814                           ;main.c: 138:             writeBit(0);
   815  0779  3000               	movlw	0
   816  077A  25B8               	fcall	_writeBit
   817                           
   818                           ;main.c: 139:             writeBit(0);
   819  077B  3000               	movlw	0
   820  077C  25B8               	fcall	_writeBit
   821                           
   822                           ;main.c: 140:             break;
   823  077D  2FED               	goto	l59
   824  077E                     l998:	
   825                           
   826                           ;main.c: 142:             writeBit(point);
   827  077E  0820               	movf	writeNumber@point,w
   828  077F  25B8               	fcall	_writeBit
   829                           
   830                           ;main.c: 143:             writeBit(0);
   831  0780  3000               	movlw	0
   832  0781  25B8               	fcall	_writeBit
   833                           
   834                           ;main.c: 144:             writeBit(0);
   835  0782  3000               	movlw	0
   836  0783  25B8               	fcall	_writeBit
   837                           
   838                           ;main.c: 145:             writeBit(0);
   839  0784  3000               	movlw	0
   840  0785  25B8               	fcall	_writeBit
   841                           
   842                           ;main.c: 146:             writeBit(0);
   843  0786  3000               	movlw	0
   844  0787  25B8               	fcall	_writeBit
   845                           
   846                           ;main.c: 147:             writeBit(0);
   847  0788  3000               	movlw	0
   848  0789  25B8               	fcall	_writeBit
   849                           
   850                           ;main.c: 148:             writeBit(0);
   851  078A  3000               	movlw	0
   852  078B  25B8               	fcall	_writeBit
   853                           
   854                           ;main.c: 149:             writeBit(0);
   855  078C  3000               	movlw	0
   856  078D  25B8               	fcall	_writeBit
   857                           
   858                           ;main.c: 150:             break;
   859  078E  2FED               	goto	l59
   860  078F                     l1000:	
   861                           
   862                           ;main.c: 152:             writeBit(point);
   863  078F  0820               	movf	writeNumber@point,w
   864  0790  25B8               	fcall	_writeBit
   865                           
   866                           ;main.c: 153:             writeBit(0);
   867  0791  3000               	movlw	0
   868  0792  25B8               	fcall	_writeBit
   869                           
   870                           ;main.c: 154:             writeBit(0);
   871  0793  3000               	movlw	0
   872  0794  25B8               	fcall	_writeBit
   873                           
   874                           ;main.c: 155:             writeBit(1);
   875  0795  3001               	movlw	1
   876  0796  25B8               	fcall	_writeBit
   877                           
   878                           ;main.c: 156:             writeBit(0);
   879  0797  3000               	movlw	0
   880  0798  25B8               	fcall	_writeBit
   881                           
   882                           ;main.c: 157:             writeBit(0);
   883  0799  3000               	movlw	0
   884  079A  25B8               	fcall	_writeBit
   885                           
   886                           ;main.c: 158:             writeBit(0);
   887  079B  3000               	movlw	0
   888  079C  25B8               	fcall	_writeBit
   889                           
   890                           ;main.c: 159:             writeBit(0);
   891  079D  3000               	movlw	0
   892  079E  25B8               	fcall	_writeBit
   893                           
   894                           ;main.c: 160:             break;
   895  079F  2FED               	goto	l59
   896  07A0                     l1002:	
   897                           
   898                           ;main.c: 162:             writeBit(point);
   899  07A0  0820               	movf	writeNumber@point,w
   900  07A1  25B8               	fcall	_writeBit
   901                           
   902                           ;main.c: 163:             writeBit(1);
   903  07A2  3001               	movlw	1
   904  07A3  25B8               	fcall	_writeBit
   905                           
   906                           ;main.c: 164:             writeBit(0);
   907  07A4  3000               	movlw	0
   908  07A5  25B8               	fcall	_writeBit
   909                           
   910                           ;main.c: 165:             writeBit(0);
   911  07A6  3000               	movlw	0
   912  07A7  25B8               	fcall	_writeBit
   913                           
   914                           ;main.c: 166:             writeBit(0);
   915  07A8  3000               	movlw	0
   916  07A9  25B8               	fcall	_writeBit
   917                           
   918                           ;main.c: 167:             writeBit(0);
   919  07AA  3000               	movlw	0
   920  07AB  25B8               	fcall	_writeBit
   921                           
   922                           ;main.c: 168:             writeBit(0);
   923  07AC  3000               	movlw	0
   924  07AD  25B8               	fcall	_writeBit
   925                           
   926                           ;main.c: 169:             writeBit(0);
   927  07AE  3000               	movlw	0
   928  07AF  25B8               	fcall	_writeBit
   929                           
   930                           ;main.c: 170:             break;
   931  07B0  2FED               	goto	l59
   932  07B1                     l1004:	
   933                           
   934                           ;main.c: 172:             writeBit(1);
   935  07B1  3001               	movlw	1
   936  07B2  25B8               	fcall	_writeBit
   937                           
   938                           ;main.c: 173:             writeBit(1);
   939  07B3  3001               	movlw	1
   940  07B4  25B8               	fcall	_writeBit
   941                           
   942                           ;main.c: 174:             writeBit(1);
   943  07B5  3001               	movlw	1
   944  07B6  25B8               	fcall	_writeBit
   945                           
   946                           ;main.c: 175:             writeBit(1);
   947  07B7  3001               	movlw	1
   948  07B8  25B8               	fcall	_writeBit
   949                           
   950                           ;main.c: 176:             writeBit(1);
   951  07B9  3001               	movlw	1
   952  07BA  25B8               	fcall	_writeBit
   953                           
   954                           ;main.c: 177:             writeBit(1);
   955  07BB  3001               	movlw	1
   956  07BC  25B8               	fcall	_writeBit
   957                           
   958                           ;main.c: 178:             writeBit(1);
   959  07BD  3001               	movlw	1
   960  07BE  25B8               	fcall	_writeBit
   961                           
   962                           ;main.c: 179:             writeBit(1);
   963  07BF  3001               	movlw	1
   964  07C0  25B8               	fcall	_writeBit
   965                           
   966                           ;main.c: 180:             break;
   967  07C1  2FED               	goto	l59
   968  07C2                     l1008:	
   969  07C2  0823               	movf	writeNumber@num,w
   970  07C3  00A1               	movwf	??_writeNumber
   971  07C4  01A2               	clrf	??_writeNumber+1
   972                           
   973                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   974                           ; Switch size 1, requested type "simple"
   975                           ; Number of cases is 1, Range of values is 0 to 0
   976                           ; switch strategies available:
   977                           ; Name         Instructions Cycles
   978                           ; simple_byte            4     3 (average)
   979                           ; direct_byte            7     6 (fixed)
   980                           ; jumptable            260     6 (fixed)
   981                           ;	Chosen strategy is simple_byte
   982  07C5  0822               	movf	??_writeNumber+1,w
   983  07C6  3A00               	xorlw	0	; case 0
   984  07C7  1903               	skipnz
   985  07C8  2FCA               	goto	l1090
   986  07C9  2FED               	goto	l59
   987  07CA                     l1090:	
   988                           
   989                           ; Switch size 1, requested type "simple"
   990                           ; Number of cases is 11, Range of values is 0 to 10
   991                           ; switch strategies available:
   992                           ; Name         Instructions Cycles
   993                           ; direct_byte           17     6 (fixed)
   994                           ; simple_byte           34    18 (average)
   995                           ; jumptable            260     6 (fixed)
   996                           ;	Chosen strategy is simple_byte
   997  07CA  0821               	movf	??_writeNumber,w
   998  07CB  3A00               	xorlw	0	; case 0
   999  07CC  1903               	skipnz
  1000  07CD  2FA0               	goto	l1002
  1001  07CE  3A01               	xorlw	1	; case 1
  1002  07CF  1903               	skipnz
  1003  07D0  2F07               	goto	l984
  1004  07D1  3A03               	xorlw	3	; case 2
  1005  07D2  1903               	skipnz
  1006  07D3  2F18               	goto	l986
  1007  07D4  3A01               	xorlw	1	; case 3
  1008  07D5  1903               	skipnz
  1009  07D6  2F29               	goto	l988
  1010  07D7  3A07               	xorlw	7	; case 4
  1011  07D8  1903               	skipnz
  1012  07D9  2F3A               	goto	l990
  1013  07DA  3A01               	xorlw	1	; case 5
  1014  07DB  1903               	skipnz
  1015  07DC  2F4B               	goto	l992
  1016  07DD  3A03               	xorlw	3	; case 6
  1017  07DE  1903               	skipnz
  1018  07DF  2F5C               	goto	l994
  1019  07E0  3A01               	xorlw	1	; case 7
  1020  07E1  1903               	skipnz
  1021  07E2  2F6D               	goto	l996
  1022  07E3  3A0F               	xorlw	15	; case 8
  1023  07E4  1903               	skipnz
  1024  07E5  2F7E               	goto	l998
  1025  07E6  3A01               	xorlw	1	; case 9
  1026  07E7  1903               	skipnz
  1027  07E8  2F8F               	goto	l1000
  1028  07E9  3A03               	xorlw	3	; case 10
  1029  07EA  1903               	skipnz
  1030  07EB  2FB1               	goto	l1004
  1031  07EC  2FED               	goto	l59
  1032  07ED                     l59:	
  1033                           
  1034                           ;main.c: 183:     RB6 = 1;
  1035  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  1036  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  1037  07EF  1706               	bsf	6,6	;volatile
  1038                           
  1039                           ;main.c: 184:     addMinute();
  1040  07F0  267E               	fcall	_addMinute
  1041  07F1  0008               	return
  1042  07F2                     __end_of_writeNumber:	
  1043                           
  1044                           	psect	text2
  1045  05B8                     __ptext2:	
  1046 ;; *************** function _writeBit *****************
  1047 ;; Defined at:
  1048 ;;		line 26 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  _bit            1    wreg     unsigned char 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  _bit            1    0[COMMON] unsigned char 
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1062 ;;      Params:         0       0       0       0
  1063 ;;      Locals:         1       0       0       0
  1064 ;;      Temps:          0       0       0       0
  1065 ;;      Totals:         1       0       0       0
  1066 ;;Total ram usage:        1 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_writeNumber
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           
  1076                           ;psect for function _writeBit
  1077  05B8                     _writeBit:	
  1078                           
  1079                           ;incstack = 0
  1080                           ; Regs used in _writeBit: [wreg]
  1081                           ;writeBit@_bit stored from wreg
  1082  05B8  00F0               	movwf	writeBit@_bit
  1083                           
  1084                           ;main.c: 26: void writeBit(char _bit);main.c: 27: {;main.c: 28:   RB7 = 0;
  1085  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1086  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1087  05BB  1386               	bcf	6,7	;volatile
  1088                           
  1089                           ;main.c: 29:   RB5 = _bit;
  1090  05BC  1C70               	btfss	writeBit@_bit,0
  1091  05BD  2DC2               	goto	u350
  1092  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1093  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1094  05C0  1686               	bsf	6,5	;volatile
  1095  05C1  2DC5               	goto	u364
  1096  05C2                     u350:	
  1097  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1098  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1099  05C4  1286               	bcf	6,5	;volatile
  1100  05C5                     u364:	
  1101                           
  1102                           ;main.c: 30:   RB7 = 1;
  1103  05C5  1786               	bsf	6,7	;volatile
  1104                           
  1105                           ;main.c: 31:   RB7 = 0;
  1106  05C6  1386               	bcf	6,7	;volatile
  1107  05C7  0008               	return
  1108  05C8                     __end_of_writeBit:	
  1109                           
  1110                           	psect	text3
  1111  067E                     __ptext3:	
  1112 ;; *************** function _addMinute *****************
  1113 ;; Defined at:
  1114 ;;		line 34 in file "main.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1128 ;;      Params:         0       0       0       0
  1129 ;;      Locals:         0       0       0       0
  1130 ;;      Temps:          2       0       0       0
  1131 ;;      Totals:         2       0       0       0
  1132 ;;Total ram usage:        2 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    2
  1135 ;; This function calls:
  1136 ;;		___eetoc
  1137 ;;		___eetoi
  1138 ;;		___lwdiv
  1139 ;; This function is called by:
  1140 ;;		_writeNumber
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _addMinute
  1146  067E                     _addMinute:	
  1147                           
  1148                           ;main.c: 35:     if (TMR0 == 255){
  1149                           
  1150                           ;incstack = 0
  1151                           ; Regs used in _addMinute: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1152  067E  1283               	bcf	3,5	;RP0=0, select bank0
  1153  067F  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0680  0A01               	incf	1,w	;volatile
  1155  0681  1D03               	btfss	3,2
  1156  0682  0008               	return
  1157                           
  1158                           ;main.c: 36:         cnt = cnt + 1;
  1159  0683  0825               	movf	_cnt,w
  1160  0684  3E01               	addlw	1
  1161  0685  00A5               	movwf	_cnt
  1162  0686  0826               	movf	_cnt+1,w
  1163  0687  1803               	skipnc
  1164  0688  3E01               	addlw	1
  1165  0689  3E00               	addlw	0
  1166  068A  00A6               	movwf	_cnt+1
  1167                           
  1168                           ;main.c: 37:         TMR0 = timer0;
  1169  068B  3002               	movlw	(low _timer0)& (0+255)
  1170  068C  259D               	fcall	___eetoc
  1171  068D  1283               	bcf	3,5	;RP0=0, select bank0
  1172  068E  1303               	bcf	3,6	;RP1=0, select bank0
  1173  068F  0081               	movwf	1	;volatile
  1174                           
  1175                           ;main.c: 38:         if (ant != (cnt/15)){
  1176  0690  300F               	movlw	15
  1177  0691  00F0               	movwf	___lwdiv@divisor
  1178  0692  3000               	movlw	0
  1179  0693  00F1               	movwf	___lwdiv@divisor+1
  1180  0694  0826               	movf	_cnt+1,w
  1181  0695  00F3               	movwf	___lwdiv@dividend+1
  1182  0696  0825               	movf	_cnt,w
  1183  0697  00F2               	movwf	___lwdiv@dividend
  1184  0698  25EE               	fcall	___lwdiv
  1185  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1186  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1187  069B  0827               	movf	_ant,w
  1188  069C  00FC               	movwf	??_addMinute
  1189  069D  01FD               	clrf	??_addMinute+1
  1190  069E  0871               	movf	?___lwdiv+1,w
  1191  069F  067D               	xorwf	??_addMinute+1,w
  1192  06A0  1D03               	skipz
  1193  06A1  2EA4               	goto	u385
  1194  06A2  0870               	movf	?___lwdiv,w
  1195  06A3  067C               	xorwf	??_addMinute,w
  1196  06A4                     u385:	
  1197  06A4  1903               	skipnz
  1198  06A5  2EBE               	goto	l948
  1199                           
  1200                           ;main.c: 39:             ant = cnt/15;
  1201  06A6  300F               	movlw	15
  1202  06A7  00F0               	movwf	___lwdiv@divisor
  1203  06A8  3000               	movlw	0
  1204  06A9  00F1               	movwf	___lwdiv@divisor+1
  1205  06AA  0826               	movf	_cnt+1,w
  1206  06AB  00F3               	movwf	___lwdiv@dividend+1
  1207  06AC  0825               	movf	_cnt,w
  1208  06AD  00F2               	movwf	___lwdiv@dividend
  1209  06AE  25EE               	fcall	___lwdiv
  1210  06AF  0870               	movf	?___lwdiv,w
  1211  06B0  00FC               	movwf	??_addMinute
  1212  06B1  087C               	movf	??_addMinute,w
  1213  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  1214  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  1215  06B4  00A7               	movwf	_ant
  1216                           
  1217                           ;main.c: 40:             blink = !blink;
  1218  06B5  0828               	movf	_blink,w
  1219  06B6  1D03               	btfss	3,2
  1220  06B7  2EBA               	goto	u390
  1221  06B8  3001               	movlw	1
  1222  06B9  2EBB               	goto	u400
  1223  06BA                     u390:	
  1224  06BA  3000               	movlw	0
  1225  06BB                     u400:	
  1226  06BB  00FC               	movwf	??_addMinute
  1227  06BC  087C               	movf	??_addMinute,w
  1228  06BD  00A8               	movwf	_blink
  1229  06BE                     l948:	
  1230                           
  1231                           ;main.c: 42:         if (cnt >= tiempo){
  1232  06BE  3000               	movlw	(low _tiempo)& (0+255)
  1233  06BF  25A8               	fcall	___eetoi
  1234  06C0  0876               	movf	?___eetoi+1,w
  1235  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1236  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1237  06C3  0226               	subwf	_cnt+1,w
  1238  06C4  1D03               	skipz
  1239  06C5  2EC8               	goto	u415
  1240  06C6  0875               	movf	?___eetoi,w
  1241  06C7  0225               	subwf	_cnt,w
  1242  06C8                     u415:	
  1243  06C8  1C03               	skipc
  1244  06C9  0008               	return
  1245                           
  1246                           ;main.c: 43:             cnt = 0;
  1247  06CA  01A5               	clrf	_cnt
  1248  06CB  01A6               	clrf	_cnt+1
  1249                           
  1250                           ;main.c: 44:             m2 = m2 + 1;
  1251  06CC  0829               	movf	_m2,w
  1252  06CD  3E01               	addlw	1
  1253  06CE  00FC               	movwf	??_addMinute
  1254  06CF  087C               	movf	??_addMinute,w
  1255  06D0  00A9               	movwf	_m2
  1256                           
  1257                           ;main.c: 45:             if (m2 > 9){
  1258  06D1  300A               	movlw	10
  1259  06D2  0229               	subwf	_m2,w
  1260  06D3  1C03               	skipc
  1261  06D4  2EDB               	goto	l960
  1262                           
  1263                           ;main.c: 46:                 m2 = 0;
  1264  06D5  01A9               	clrf	_m2
  1265                           
  1266                           ;main.c: 47:                 m1 = m1 + 1;
  1267  06D6  082A               	movf	_m1,w
  1268  06D7  3E01               	addlw	1
  1269  06D8  00FC               	movwf	??_addMinute
  1270  06D9  087C               	movf	??_addMinute,w
  1271  06DA  00AA               	movwf	_m1
  1272  06DB                     l960:	
  1273                           
  1274                           ;main.c: 49:             if (m1 > 5){
  1275  06DB  3006               	movlw	6
  1276  06DC  022A               	subwf	_m1,w
  1277  06DD  1C03               	skipc
  1278  06DE  2EE5               	goto	l966
  1279                           
  1280                           ;main.c: 50:                 m1 = 0;
  1281  06DF  01AA               	clrf	_m1
  1282                           
  1283                           ;main.c: 51:                 h2 = h2 + 1;
  1284  06E0  082B               	movf	_h2,w
  1285  06E1  3E01               	addlw	1
  1286  06E2  00FC               	movwf	??_addMinute
  1287  06E3  087C               	movf	??_addMinute,w
  1288  06E4  00AB               	movwf	_h2
  1289  06E5                     l966:	
  1290                           
  1291                           ;main.c: 53:             if (h2 > 9){
  1292  06E5  300A               	movlw	10
  1293  06E6  022B               	subwf	_h2,w
  1294  06E7  1C03               	skipc
  1295  06E8  2EEF               	goto	l972
  1296                           
  1297                           ;main.c: 54:                 h2 = 0;
  1298  06E9  01AB               	clrf	_h2
  1299                           
  1300                           ;main.c: 55:                 h1 = h1 + 1;
  1301  06EA  082C               	movf	_h1,w
  1302  06EB  3E01               	addlw	1
  1303  06EC  00FC               	movwf	??_addMinute
  1304  06ED  087C               	movf	??_addMinute,w
  1305  06EE  00AC               	movwf	_h1
  1306  06EF                     l972:	
  1307                           
  1308                           ;main.c: 57:             if (h1 >= 2){
  1309  06EF  3002               	movlw	2
  1310  06F0  022C               	subwf	_h1,w
  1311  06F1  1C03               	skipc
  1312  06F2  0008               	return
  1313                           
  1314                           ;main.c: 58:                 if(h2 < 9 && h2 > 3 && h1 == 2){
  1315  06F3  3009               	movlw	9
  1316  06F4  022B               	subwf	_h2,w
  1317  06F5  1803               	skipnc
  1318  06F6  0008               	return
  1319  06F7  3004               	movlw	4
  1320  06F8  022B               	subwf	_h2,w
  1321  06F9  1C03               	skipc
  1322  06FA  0008               	return
  1323  06FB  3002               	movlw	2
  1324  06FC  062C               	xorwf	_h1,w
  1325  06FD  1D03               	btfss	3,2
  1326  06FE  0008               	return
  1327                           
  1328                           ;main.c: 59:                     h2 = 0;
  1329  06FF  01AB               	clrf	_h2
  1330                           
  1331                           ;main.c: 60:                     h1 = 0;
  1332  0700  01AC               	clrf	_h1
  1333  0701  0008               	return
  1334  0702                     __end_of_addMinute:	
  1335                           ;main.c: 63:         }
  1336                           
  1337                           
  1338                           	psect	text4
  1339  05EE                     __ptext4:	
  1340 ;; *************** function ___lwdiv *****************
  1341 ;; Defined at:
  1342 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  divisor         2    0[COMMON] unsigned int 
  1345 ;;  dividend        2    2[COMMON] unsigned int 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  quotient        2    5[COMMON] unsigned int 
  1348 ;;  counter         1    7[COMMON] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  2    0[COMMON] unsigned int 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1358 ;;      Params:         4       0       0       0
  1359 ;;      Locals:         3       0       0       0
  1360 ;;      Temps:          1       0       0       0
  1361 ;;      Totals:         8       0       0       0
  1362 ;;Total ram usage:        8 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_addMinute
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           
  1372                           ;psect for function ___lwdiv
  1373  05EE                     ___lwdiv:	
  1374                           
  1375                           ;incstack = 0
  1376                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1377  05EE  01F5               	clrf	___lwdiv@quotient
  1378  05EF  01F6               	clrf	___lwdiv@quotient+1
  1379  05F0  0870               	movf	___lwdiv@divisor,w
  1380  05F1  0471               	iorwf	___lwdiv@divisor+1,w
  1381  05F2  1903               	btfsc	3,2
  1382  05F3  2E25               	goto	l930
  1383  05F4  01F7               	clrf	___lwdiv@counter
  1384  05F5  0AF7               	incf	___lwdiv@counter,f
  1385  05F6                     l918:	
  1386  05F6  1BF1               	btfsc	___lwdiv@divisor+1,7
  1387  05F7  2E04               	goto	l920
  1388  05F8  3001               	movlw	1
  1389  05F9                     u295:	
  1390  05F9  1003               	clrc
  1391  05FA  0DF0               	rlf	___lwdiv@divisor,f
  1392  05FB  0DF1               	rlf	___lwdiv@divisor+1,f
  1393  05FC  3EFF               	addlw	-1
  1394  05FD  1D03               	skipz
  1395  05FE  2DF9               	goto	u295
  1396  05FF  3001               	movlw	1
  1397  0600  00F4               	movwf	??___lwdiv
  1398  0601  0874               	movf	??___lwdiv,w
  1399  0602  07F7               	addwf	___lwdiv@counter,f
  1400  0603  2DF6               	goto	l918
  1401  0604                     l920:	
  1402  0604  3001               	movlw	1
  1403  0605                     u315:	
  1404  0605  1003               	clrc
  1405  0606  0DF5               	rlf	___lwdiv@quotient,f
  1406  0607  0DF6               	rlf	___lwdiv@quotient+1,f
  1407  0608  3EFF               	addlw	-1
  1408  0609  1D03               	skipz
  1409  060A  2E05               	goto	u315
  1410  060B  0871               	movf	___lwdiv@divisor+1,w
  1411  060C  0273               	subwf	___lwdiv@dividend+1,w
  1412  060D  1D03               	skipz
  1413  060E  2E11               	goto	u325
  1414  060F  0870               	movf	___lwdiv@divisor,w
  1415  0610  0272               	subwf	___lwdiv@dividend,w
  1416  0611                     u325:	
  1417  0611  1C03               	skipc
  1418  0612  2E1A               	goto	l926
  1419  0613  0870               	movf	___lwdiv@divisor,w
  1420  0614  02F2               	subwf	___lwdiv@dividend,f
  1421  0615  0871               	movf	___lwdiv@divisor+1,w
  1422  0616  1C03               	skipc
  1423  0617  03F3               	decf	___lwdiv@dividend+1,f
  1424  0618  02F3               	subwf	___lwdiv@dividend+1,f
  1425  0619  1475               	bsf	___lwdiv@quotient,0
  1426  061A                     l926:	
  1427  061A  3001               	movlw	1
  1428  061B                     u335:	
  1429  061B  1003               	clrc
  1430  061C  0CF1               	rrf	___lwdiv@divisor+1,f
  1431  061D  0CF0               	rrf	___lwdiv@divisor,f
  1432  061E  3EFF               	addlw	-1
  1433  061F  1D03               	skipz
  1434  0620  2E1B               	goto	u335
  1435  0621  3001               	movlw	1
  1436  0622  02F7               	subwf	___lwdiv@counter,f
  1437  0623  1D03               	btfss	3,2
  1438  0624  2E04               	goto	l920
  1439  0625                     l930:	
  1440  0625  0876               	movf	___lwdiv@quotient+1,w
  1441  0626  00F1               	movwf	?___lwdiv+1
  1442  0627  0875               	movf	___lwdiv@quotient,w
  1443  0628  00F0               	movwf	?___lwdiv
  1444  0629  0008               	return
  1445  062A                     __end_of___lwdiv:	
  1446                           
  1447                           	psect	text5
  1448  05A8                     __ptext5:	
  1449 ;; *************** function ___eetoi *****************
  1450 ;; Defined at:
  1451 ;;		line 112 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  addr            1    wreg     PTR eeprom void 
  1454 ;;		 -> tiempo(2), 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  addr            1    9[COMMON] PTR eeprom void 
  1457 ;;		 -> tiempo(2), 
  1458 ;;  data            2   10[COMMON] unsigned int 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2    5[COMMON] unsigned int 
  1461 ;; Registers used:
  1462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1468 ;;      Params:         2       0       0       0
  1469 ;;      Locals:         3       0       0       0
  1470 ;;      Temps:          2       0       0       0
  1471 ;;      Totals:         7       0       0       0
  1472 ;;Total ram usage:        7 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    1
  1475 ;; This function calls:
  1476 ;;		___eecpymem
  1477 ;; This function is called by:
  1478 ;;		_addMinute
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           
  1483                           ;psect for function ___eetoi
  1484  05A8                     ___eetoi:	
  1485                           
  1486                           ;incstack = 0
  1487                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1488                           ;___eetoi@addr stored from wreg
  1489  05A8  00F9               	movwf	___eetoi@addr
  1490                           
  1491                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 112: __eetoi
      +                          (__eeprom void *addr);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 113: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.
      +                          c: 114:  unsigned int data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\p
      +                          ic\__eeprom.c: 115:  __eecpymem((unsigned char *) &data,addr,2);
  1492  05A9  0879               	movf	___eetoi@addr,w
  1493  05AA  00F7               	movwf	??___eetoi
  1494  05AB  0877               	movf	??___eetoi,w
  1495  05AC  00F0               	movwf	___eecpymem@from
  1496  05AD  3002               	movlw	2
  1497  05AE  00F8               	movwf	??___eetoi+1
  1498  05AF  0878               	movf	??___eetoi+1,w
  1499  05B0  00F1               	movwf	___eecpymem@size
  1500  05B1  307A               	movlw	(low (___eetoi@data| 0))& (0+255)
  1501  05B2  25C8               	fcall	___eecpymem
  1502                           
  1503                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 116:  return
      +                           data;
  1504  05B3  087B               	movf	___eetoi@data+1,w
  1505  05B4  00F6               	movwf	?___eetoi+1
  1506  05B5  087A               	movf	___eetoi@data,w
  1507  05B6  00F5               	movwf	?___eetoi
  1508  05B7  0008               	return
  1509  05B8                     __end_of___eetoi:	
  1510                           
  1511                           	psect	text6
  1512  059D                     __ptext6:	
  1513 ;; *************** function ___eetoc *****************
  1514 ;; Defined at:
  1515 ;;		line 104 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  addr            1    wreg     PTR eeprom void 
  1518 ;;		 -> timer0(1), 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  addr            1    6[COMMON] PTR eeprom void 
  1521 ;;		 -> timer0(1), 
  1522 ;;  data            1    7[COMMON] unsigned char 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      unsigned char 
  1525 ;; Registers used:
  1526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1532 ;;      Params:         0       0       0       0
  1533 ;;      Locals:         2       0       0       0
  1534 ;;      Temps:          1       0       0       0
  1535 ;;      Totals:         3       0       0       0
  1536 ;;Total ram usage:        3 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    1
  1539 ;; This function calls:
  1540 ;;		___eecpymem
  1541 ;; This function is called by:
  1542 ;;		_addMinute
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function ___eetoc
  1549  059D                     ___eetoc:	
  1550                           
  1551                           ;incstack = 0
  1552                           ; Regs used in ___eetoc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1553                           ;___eetoc@addr stored from wreg
  1554  059D  00F6               	movwf	___eetoc@addr
  1555                           
  1556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 104: __eetoc
      +                          (__eeprom void *addr);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 105: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.
      +                          c: 106:  unsigned char data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          pic\__eeprom.c: 107:  __eecpymem((unsigned char *) &data,addr,1);
  1557  059E  0876               	movf	___eetoc@addr,w
  1558  059F  00F5               	movwf	??___eetoc
  1559  05A0  0875               	movf	??___eetoc,w
  1560  05A1  00F0               	movwf	___eecpymem@from
  1561  05A2  01F1               	clrf	___eecpymem@size
  1562  05A3  0AF1               	incf	___eecpymem@size,f
  1563  05A4  3077               	movlw	(low (___eetoc@data| 0))& (0+255)
  1564  05A5  25C8               	fcall	___eecpymem
  1565                           
  1566                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 108:  return
      +                           data;
  1567  05A6  0877               	movf	___eetoc@data,w
  1568  05A7  0008               	return
  1569  05A8                     __end_of___eetoc:	
  1570                           
  1571                           	psect	text7
  1572  05C8                     __ptext7:	
  1573 ;; *************** function ___eecpymem *****************
  1574 ;; Defined at:
  1575 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  to              1    wreg     PTR volatile unsigned ch
  1578 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1579 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1580 ;;  from            1    0[COMMON] PTR eeprom unsigned char
  1581 ;;		 -> tiempo(2), timer0(1), 
  1582 ;;  size            1    1[COMMON] unsigned char 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  to              1    4[COMMON] PTR volatile unsigned ch
  1585 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1586 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1587 ;;  cp              1    3[COMMON] PTR volatile unsigned ch
  1588 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1589 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1599 ;;      Params:         2       0       0       0
  1600 ;;      Locals:         2       0       0       0
  1601 ;;      Temps:          1       0       0       0
  1602 ;;      Totals:         5       0       0       0
  1603 ;;Total ram usage:        5 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		___eetoc
  1609 ;;		___eetoi
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function ___eecpymem
  1615  05C8                     ___eecpymem:	
  1616                           
  1617                           ;incstack = 0
  1618                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0]
  1619                           ;___eecpymem@to stored from wreg
  1620  05C8  00F4               	movwf	___eecpymem@to
  1621                           
  1622                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: __eecpyme
      +                          m(volatile unsigned char *to, __eeprom unsigned char * from, unsigned char size);C:\Prog
      +                          ram Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program File
      +                          s (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\M
      +                          icrochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c90\pic\__eeprom.c: 7: {
  1623  05C9  0874               	movf	___eecpymem@to,w
  1624  05CA  00F2               	movwf	??___eecpymem
  1625  05CB  0872               	movf	??___eecpymem,w
  1626  05CC  00F3               	movwf	___eecpymem@cp
  1627  05CD                     l95:	
  1628                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10:  while (
      +                          EECON1bits.WR) continue;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\
      +                          __eeprom.c: 10:  __memcpyee(addr,(unsigned char *) &data,2);;C:\Program Files (x86)\Micr
      +                          ochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10: {
  1629                           
  1630  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  1631  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  1632  05CF  189C               	btfsc	28,1	;volsfr
  1633  05D0  2DCD               	goto	l95
  1634                           
  1635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 11:  EEADR =
      +                           (unsigned char)from;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 11:  return data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pi
      +                          c\__eeprom.c: 11:  double data;
  1636  05D1  0870               	movf	___eecpymem@from,w
  1637  05D2  009B               	movwf	27	;volatile
  1638  05D3                     l894:	
  1639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  1640                           
  1641                           
  1642                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  1643  05D3  3001               	movlw	1
  1644  05D4  02F1               	subwf	___eecpymem@size,f
  1645  05D5  0A71               	incf	___eecpymem@size,w
  1646  05D6  1903               	btfsc	3,2
  1647  05D7  0008               	return
  1648  05D8                     l100:	
  1649  05D8  189C               	btfsc	28,1	;volsfr
  1650  05D9  2DD8               	goto	l100
  1651                           
  1652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:   EECON1
      +                           &= 0x7F;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:
      +                           
  1653  05DA  307F               	movlw	127
  1654  05DB  00F2               	movwf	??___eecpymem
  1655  05DC  0872               	movf	??___eecpymem,w
  1656  05DD  059C               	andwf	28,f	;volsfr
  1657                           
  1658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 17:   EECON1
      +                          bits.RD = 1;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 
      +                          17: __fttoee(__eeprom void *addr, float data)
  1659  05DE  141C               	bsf	28,0	;volsfr
  1660                           
  1661                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:   *cp++ 
      +                          = EEDATA;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:
      +                           {
  1662  05DF  081A               	movf	26,w	;volatile
  1663  05E0  00F2               	movwf	??___eecpymem
  1664  05E1  0873               	movf	___eecpymem@cp,w
  1665  05E2  0084               	movwf	4
  1666  05E3  0872               	movf	??___eecpymem,w
  1667  05E4  0080               	movwf	0
  1668  05E5  3001               	movlw	1
  1669  05E6  00F2               	movwf	??___eecpymem
  1670  05E7  0872               	movf	??___eecpymem,w
  1671  05E8  07F3               	addwf	___eecpymem@cp,f
  1672                           
  1673                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:   ++EEAD
      +                          R;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:  __mem
      +                          cpyee(addr,(unsigned char *) &data,3);
  1674  05E9  3001               	movlw	1
  1675  05EA  00F2               	movwf	??___eecpymem
  1676  05EB  0872               	movf	??___eecpymem,w
  1677  05EC  079B               	addwf	27,f	;volatile
  1678  05ED  2DD3               	goto	l894
  1679  05EE                     __end_of___eecpymem:	
  1680  007E                     btemp	set	126	;btemp
  1681  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      5      13
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> tiempo(EEDATA[2]), 

    __eetoc@addr	PTR eeprom void  size(1) Largest target is 1
		 -> timer0(EEDATA[1]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> tiempo(EEDATA[2]), timer0(EEDATA[1]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(COMMON[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(COMMON[1]), 


Critical Paths under _main in COMMON

    _writeNumber->_addMinute
    _addMinute->___eetoi
    ___eetoi->___eecpymem
    ___eetoc->___eecpymem

Critical Paths under _main in BANK0

    _main->_writeNumber

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    5472
                                              4 BANK0      1     1      0
                            ___eetoc
                        _writeNumber
 ---------------------------------------------------------------------------------
 (1) _writeNumber                                          4     3      1    4083
                                              0 BANK0      4     3      1
                          _addMinute
                           _writeBit
 ---------------------------------------------------------------------------------
 (2) _writeBit                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _addMinute                                            2     2      0    3211
                                             12 COMMON     2     2      0
                            ___eetoc
                            ___eetoi
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___eetoi                                              7     5      2    1356
                                              5 COMMON     7     5      2
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (3) ___eetoc                                              3     3      0    1389
                                              5 COMMON     3     3      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (4) ___eecpymem                                           5     3      2    1255
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___eetoc
     ___eecpymem
   _writeNumber
     _addMinute
       ___eetoc
         ___eecpymem
       ___eetoi
         ___eecpymem
       ___lwdiv
     _writeBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      5       D       3       16.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1B      10        0.0%
ABS                  0      0      1B       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       3       0        2.3%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jun 02 14:23:16 2019

            __CFG_CP$OFF 0000           writeNumber@num 0023                       l59 07ED  
                     l95 05CD                       _h1 002C                       _h2 002B  
                     _m1 002A                       _m2 0029                      l100 05D8  
                    l920 0604                      l930 0625                      l926 061A  
                    l918 05F6                      l960 06DB                      l972 06EF  
                    l948 06BE                      l894 05D3                      l966 06E5  
                    l990 073A                      l992 074B                      l984 0707  
                    l994 075C                      l986 0718                      l996 076D  
                    l988 0729                      l998 077E                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      _RB4 0034  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
                    u400 06BB                      u315 0605                      u325 0611  
                    u350 05C2                      u335 061B                      u415 06C8  
           __CFG_CPD$OFF 0000                      u364 05C5                      u390 06BA  
                    u295 05F9                      u385 06A4                      _ant 0027  
                    _cnt 0025                      fsr0 0004                      indf 0000  
           __CFG_LVP$OFF 0000                     l1000 078F                     l1002 07A0  
                   l1004 07B1                     l1022 0639                     l1008 07C2  
                   l1090 07CA         writeNumber@point 0020                     _TMR0 0001  
                   _main 062A                     btemp 007E                     start 0000  
                  ?_main 0070          __end_of___eetoc 05A8          __end_of___eetoi 05B8  
                  _EEADR 009B            __CFG_WDTE$OFF 0000          __end_of___lwdiv 062A  
            _writeNumber 0702                    _PORTB 0006                    _TRISB 0086  
          __CFG_PWRTE$ON 0000                    _blink 0028           __CFG_BOREN$OFF 0000  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 07F2             __end_of_main 067E                   ??_main 0024  
                 _EEDATA 009A                   _EECON1 009C                ??___eetoc 0075  
              ??___eetoi 0077                ??___lwdiv 0074                   _timer0 0002  
                 _tiempo 0000             __pdataEEDATA 0000         __end_of_writeBit 05C8  
             ___eecpymem 05C8       __size_of_addMinute 0084  __end_of__initialization 07FE  
         __pcstackCOMMON 0070             __pidataBANK0 0599               __pbssBANK0 0025  
             __pmaintext 062A        __end_of_addMinute 0702             ?_writeNumber 0020  
            ?___eecpymem 0070                  ___eetoc 059D                  ___eetoi 05A8  
                ___lwdiv 05EE                ?_writeBit 0070                  __ptext1 0702  
                __ptext2 05B8                  __ptext3 067E                  __ptext4 05EE  
                __ptext5 05A8                  __ptext6 059D                  __ptext7 05C8  
   end_of_initialization 07FE             writeBit@_bit 0070      __size_of___eecpymem 0026  
             ??_writeBit 0070            __pidataEEDATA 0000      start_initialization 07F2  
   __size_of_writeNumber 00F0              __pdataBANK0 0029                _addMinute 067E  
              ___latbits 0000            __pcstackBANK0 0020             ??___eecpymem 0072  
       ___lwdiv@dividend 0072                 ?___eetoc 0070                 ?___eetoi 0075  
               ?___lwdiv 0070       __end_of___eecpymem 05EE        __size_of_writeBit 0010  
             ?_addMinute 0070         ___lwdiv@quotient 0075               _EECON1bits 009C  
       __size_of___eetoc 000B         __size_of___eetoi 0010         __size_of___lwdiv 003C  
            ??_addMinute 007C          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
          __size_of_main 0054                 _writeBit 05B8          ___eecpymem@from 0070  
          ??_writeNumber 0021          ___eecpymem@size 0071      __CFG_FOSC$INTOSCCLK 0000  
             _OPTION_REG 0081            ___eecpymem@cp 0073            ___eecpymem@to 0074  
    __end_of_writeNumber 07F2             ___eetoc@addr 0076             ___eetoc@data 0077  
           ___eetoi@addr 0079             ___eetoi@data 007A  
