

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jun 08 00:23:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F628A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  008C                     	;# 
    79  008E                     	;# 
    80  0092                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009F                     	;# 
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0092                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009F                     	;# 
   125                           
   126                           	psect	idataBANK0
   127  05B0                     __pidataBANK0:	
   128                           
   129                           ;initializer for _acum
   130  05B0  3499               	retlw	153
   131  05B1  3414               	retlw	20
   132                           
   133                           ;initializer for _tiempo
   134  05B2  3493               	retlw	147
   135  05B3  3403               	retlw	3
   136                           
   137                           ;initializer for _m2
   138  05B4  3405               	retlw	5
   139                           
   140                           ;initializer for _m1
   141  05B5  3402               	retlw	2
   142  0006                     _PORTB	set	6
   143  0001                     _TMR0	set	1
   144  0034                     _RB4	set	52
   145  0033                     _RB3	set	51
   146  0032                     _RB2	set	50
   147  0031                     _RB1	set	49
   148  0036                     _RB6	set	54
   149  0030                     _RB0	set	48
   150  0035                     _RB5	set	53
   151  0037                     _RB7	set	55
   152  0081                     _OPTION_REG	set	129
   153  0086                     _TRISB	set	134
   154                           
   155                           ; #config settings
   156  0000                     
   157                           	psect	cinit
   158  07EA                     start_initialization:	
   159  07EA                     __initialization:	
   160                           
   161                           ; Initialize objects allocated to BANK0
   162  07EA  25B0               	fcall	__pidataBANK0	;fetch initializer
   163  07EB  00A8               	movwf	__pdataBANK0& (0+127)
   164  07EC  25B1               	fcall	__pidataBANK0+1	;fetch initializer
   165  07ED  00A9               	movwf	(__pdataBANK0+1)& (0+127)
   166  07EE  25B2               	fcall	__pidataBANK0+2	;fetch initializer
   167  07EF  00AA               	movwf	(__pdataBANK0+2)& (0+127)
   168  07F0  25B3               	fcall	__pidataBANK0+3	;fetch initializer
   169  07F1  00AB               	movwf	(__pdataBANK0+3)& (0+127)
   170  07F2  25B4               	fcall	__pidataBANK0+4	;fetch initializer
   171  07F3  00AC               	movwf	(__pdataBANK0+4)& (0+127)
   172  07F4  25B5               	fcall	__pidataBANK0+5	;fetch initializer
   173  07F5  00AD               	movwf	(__pdataBANK0+5)& (0+127)
   174                           
   175                           ; Clear objects allocated to BANK0
   176  07F6  01A0               	clrf	__pbssBANK0& (0+127)
   177  07F7  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   178  07F8  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   179  07F9  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   180  07FA  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   181  07FB  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   182  07FC  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   183  07FD  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   184  07FE                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  07FE                     __end_of__initialization:	
   188  07FE  0183               	clrf	3
   189  07FF  2E02               	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bssBANK0
   192  0020                     __pbssBANK0:	
   193  0020                     _suma:	
   194  0020                     	ds	2
   195  0022                     _cnt:	
   196  0022                     	ds	2
   197  0024                     _ant:	
   198  0024                     	ds	1
   199  0025                     _blink:	
   200  0025                     	ds	1
   201  0026                     _h2:	
   202  0026                     	ds	1
   203  0027                     _h1:	
   204  0027                     	ds	1
   205                           
   206                           	psect	dataBANK0
   207  0028                     __pdataBANK0:	
   208  0028                     _acum:	
   209  0028                     	ds	2
   210  002A                     _tiempo:	
   211  002A                     	ds	2
   212  002C                     _m2:	
   213  002C                     	ds	1
   214  002D                     _m1:	
   215  002D                     	ds	1
   216                           
   217                           	psect	cstackCOMMON
   218  0070                     __pcstackCOMMON:	
   219  0070                     ?_writeBit:	
   220  0070                     ??_writeBit:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_addMinute:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_main:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?___lwdiv:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     writeBit@_bit:	
   233                           ; 2 bytes @ 0x0
   234                           
   235  0070                     ___lwdiv@divisor:	
   236                           ; 1 bytes @ 0x0
   237                           
   238                           
   239                           ; 2 bytes @ 0x0
   240  0070                     	ds	2
   241  0072                     ___lwdiv@dividend:	
   242                           
   243                           ; 2 bytes @ 0x2
   244  0072                     	ds	2
   245  0074                     ??___lwdiv:	
   246                           
   247                           ; 1 bytes @ 0x4
   248  0074                     	ds	1
   249  0075                     ___lwdiv@quotient:	
   250                           
   251                           ; 2 bytes @ 0x5
   252  0075                     	ds	2
   253  0077                     ___lwdiv@counter:	
   254                           
   255                           ; 1 bytes @ 0x7
   256  0077                     	ds	1
   257  0078                     ??_addMinute:	
   258                           
   259                           ; 1 bytes @ 0x8
   260  0078                     	ds	2
   261  007A                     ?_writeNumber:	
   262  007A                     writeNumber@point:	
   263                           ; 1 bytes @ 0xA
   264                           
   265                           
   266                           ; 1 bytes @ 0xA
   267  007A                     	ds	1
   268  007B                     ??_writeNumber:	
   269                           
   270                           ; 1 bytes @ 0xB
   271  007B                     	ds	2
   272  007D                     writeNumber@num:	
   273                           
   274                           ; 1 bytes @ 0xD
   275  007D                     	ds	1
   276                           
   277                           	psect	cstackBANK0
   278  002E                     __pcstackBANK0:	
   279  002E                     ??_main:	
   280                           
   281                           ; 1 bytes @ 0x0
   282  002E                     	ds	1
   283                           
   284                           	psect	maintext
   285  0602                     __pmaintext:	
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   288 ;;
   289 ;; *************** function _main *****************
   290 ;; Defined at:
   291 ;;		line 201 in file "main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;		None
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : B00/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   305 ;;      Params:         0       0       0       0
   306 ;;      Locals:         0       0       0       0
   307 ;;      Temps:          0       1       0       0
   308 ;;      Totals:         0       1       0       0
   309 ;;Total ram usage:        1 bytes
   310 ;; Hardware stack levels required when called:    3
   311 ;; This function calls:
   312 ;;		_writeNumber
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           
   319                           ;psect for function _main
   320  0602                     _main:	
   321                           
   322                           ;main.c: 202:     TRISB = 0b00000000;
   323                           
   324                           ;incstack = 0
   325                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   326  0602  1683               	bsf	3,5	;RP0=1, select bank1
   327  0603  1303               	bcf	3,6	;RP1=0, select bank1
   328  0604  0186               	clrf	6	;volatile
   329                           
   330                           ;main.c: 203:     PORTB = 0;
   331  0605  1283               	bcf	3,5	;RP0=0, select bank0
   332  0606  1303               	bcf	3,6	;RP1=0, select bank0
   333  0607  0186               	clrf	6	;volatile
   334                           
   335                           ;main.c: 204:     OPTION_REG = 0b00000111;
   336  0608  3007               	movlw	7
   337  0609  1683               	bsf	3,5	;RP0=1, select bank1
   338  060A  1303               	bcf	3,6	;RP1=0, select bank1
   339  060B  0081               	movwf	1	;volatile
   340  060C                     l992:	
   341                           
   342                           ;main.c: 207:         RB1 = 1;
   343  060C  1283               	bcf	3,5	;RP0=0, select bank0
   344  060D  1303               	bcf	3,6	;RP1=0, select bank0
   345  060E  1486               	bsf	6,1	;volatile
   346                           
   347                           ;main.c: 208:         RB2 = 0;
   348  060F  1106               	bcf	6,2	;volatile
   349                           
   350                           ;main.c: 209:         RB3 = 0;
   351  0610  1186               	bcf	6,3	;volatile
   352                           
   353                           ;main.c: 210:         RB4 = 0;
   354  0611  1206               	bcf	6,4	;volatile
   355                           
   356                           ;main.c: 211:         writeNumber(h1,1);
   357  0612  01FA               	clrf	writeNumber@point
   358  0613  0AFA               	incf	writeNumber@point,f
   359  0614  0827               	movf	_h1,w
   360  0615  26FA               	fcall	_writeNumber
   361                           
   362                           ;main.c: 212:         writeNumber(10,1);
   363  0616  01FA               	clrf	writeNumber@point
   364  0617  0AFA               	incf	writeNumber@point,f
   365  0618  300A               	movlw	10
   366  0619  26FA               	fcall	_writeNumber
   367                           
   368                           ;main.c: 213:         RB1 = 0;
   369  061A  1283               	bcf	3,5	;RP0=0, select bank0
   370  061B  1303               	bcf	3,6	;RP1=0, select bank0
   371  061C  1086               	bcf	6,1	;volatile
   372                           
   373                           ;main.c: 214:         RB2 = 1;
   374  061D  1506               	bsf	6,2	;volatile
   375                           
   376                           ;main.c: 215:         RB3 = 0;
   377  061E  1186               	bcf	6,3	;volatile
   378                           
   379                           ;main.c: 216:         RB4 = 0;
   380  061F  1206               	bcf	6,4	;volatile
   381                           
   382                           ;main.c: 217:         writeNumber(h2,blink);
   383  0620  0825               	movf	_blink,w
   384  0621  00AE               	movwf	??_main
   385  0622  082E               	movf	??_main,w
   386  0623  00FA               	movwf	writeNumber@point
   387  0624  0826               	movf	_h2,w
   388  0625  26FA               	fcall	_writeNumber
   389                           
   390                           ;main.c: 218:         writeNumber(10,1);
   391  0626  01FA               	clrf	writeNumber@point
   392  0627  0AFA               	incf	writeNumber@point,f
   393  0628  300A               	movlw	10
   394  0629  26FA               	fcall	_writeNumber
   395                           
   396                           ;main.c: 219:         RB1 = 0;
   397  062A  1283               	bcf	3,5	;RP0=0, select bank0
   398  062B  1303               	bcf	3,6	;RP1=0, select bank0
   399  062C  1086               	bcf	6,1	;volatile
   400                           
   401                           ;main.c: 220:         RB2 = 0;
   402  062D  1106               	bcf	6,2	;volatile
   403                           
   404                           ;main.c: 221:         RB3 = 1;
   405  062E  1586               	bsf	6,3	;volatile
   406                           
   407                           ;main.c: 222:         RB4 = 0;
   408  062F  1206               	bcf	6,4	;volatile
   409                           
   410                           ;main.c: 223:         writeNumber(m1,blink);
   411  0630  0825               	movf	_blink,w
   412  0631  00AE               	movwf	??_main
   413  0632  082E               	movf	??_main,w
   414  0633  00FA               	movwf	writeNumber@point
   415  0634  082D               	movf	_m1,w
   416  0635  26FA               	fcall	_writeNumber
   417                           
   418                           ;main.c: 224:         writeNumber(10,1);
   419  0636  01FA               	clrf	writeNumber@point
   420  0637  0AFA               	incf	writeNumber@point,f
   421  0638  300A               	movlw	10
   422  0639  26FA               	fcall	_writeNumber
   423                           
   424                           ;main.c: 225:         RB1 = 0;
   425  063A  1283               	bcf	3,5	;RP0=0, select bank0
   426  063B  1303               	bcf	3,6	;RP1=0, select bank0
   427  063C  1086               	bcf	6,1	;volatile
   428                           
   429                           ;main.c: 226:         RB2 = 0;
   430  063D  1106               	bcf	6,2	;volatile
   431                           
   432                           ;main.c: 227:         RB3 = 0;
   433  063E  1186               	bcf	6,3	;volatile
   434                           
   435                           ;main.c: 228:         RB4 = 1;
   436  063F  1606               	bsf	6,4	;volatile
   437                           
   438                           ;main.c: 229:         writeNumber(m2,1);
   439  0640  01FA               	clrf	writeNumber@point
   440  0641  0AFA               	incf	writeNumber@point,f
   441  0642  082C               	movf	_m2,w
   442  0643  26FA               	fcall	_writeNumber
   443                           
   444                           ;main.c: 230:         writeNumber(10,1);
   445  0644  01FA               	clrf	writeNumber@point
   446  0645  0AFA               	incf	writeNumber@point,f
   447  0646  300A               	movlw	10
   448  0647  26FA               	fcall	_writeNumber
   449  0648  2E0C               	goto	l992
   450  0649                     __end_of_main:	
   451                           
   452                           	psect	text1
   453  06FA                     __ptext1:	
   454 ;; *************** function _writeNumber *****************
   455 ;; Defined at:
   456 ;;		line 81 in file "main.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;  num             1    wreg     unsigned char 
   459 ;;  point           1   10[COMMON] unsigned char 
   460 ;; Auto vars:     Size  Location     Type
   461 ;;  num             1   13[COMMON] unsigned char 
   462 ;; Return value:  Size  Location     Type
   463 ;;                  1    wreg      void 
   464 ;; Registers used:
   465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   471 ;;      Params:         1       0       0       0
   472 ;;      Locals:         1       0       0       0
   473 ;;      Temps:          2       0       0       0
   474 ;;      Totals:         4       0       0       0
   475 ;;Total ram usage:        4 bytes
   476 ;; Hardware stack levels used:    1
   477 ;; Hardware stack levels required when called:    2
   478 ;; This function calls:
   479 ;;		_addMinute
   480 ;;		_writeBit
   481 ;; This function is called by:
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function _writeNumber
   488  06FA                     _writeNumber:	
   489                           
   490                           ;incstack = 0
   491                           ; Regs used in _writeNumber: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   492                           ;writeNumber@num stored from wreg
   493  06FA  00FD               	movwf	writeNumber@num
   494                           
   495                           ;main.c: 82:     RB6 = 0;
   496  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   497  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   498  06FD  1306               	bcf	6,6	;volatile
   499                           
   500                           ;main.c: 83:     switch (num)
   501  06FE  2FBA               	goto	l980
   502  06FF                     l956:	
   503                           
   504                           ;main.c: 86:             writeBit(point);
   505  06FF  087A               	movf	writeNumber@point,w
   506  0700  25B6               	fcall	_writeBit
   507                           
   508                           ;main.c: 87:             writeBit(1);
   509  0701  3001               	movlw	1
   510  0702  25B6               	fcall	_writeBit
   511                           
   512                           ;main.c: 88:             writeBit(1);
   513  0703  3001               	movlw	1
   514  0704  25B6               	fcall	_writeBit
   515                           
   516                           ;main.c: 89:             writeBit(1);
   517  0705  3001               	movlw	1
   518  0706  25B6               	fcall	_writeBit
   519                           
   520                           ;main.c: 90:             writeBit(1);
   521  0707  3001               	movlw	1
   522  0708  25B6               	fcall	_writeBit
   523                           
   524                           ;main.c: 91:             writeBit(0);
   525  0709  3000               	movlw	0
   526  070A  25B6               	fcall	_writeBit
   527                           
   528                           ;main.c: 92:             writeBit(0);
   529  070B  3000               	movlw	0
   530  070C  25B6               	fcall	_writeBit
   531                           
   532                           ;main.c: 93:             writeBit(1);
   533  070D  3001               	movlw	1
   534  070E  25B6               	fcall	_writeBit
   535                           
   536                           ;main.c: 94:             break;
   537  070F  2FE5               	goto	l65
   538  0710                     l958:	
   539                           
   540                           ;main.c: 96:             writeBit(point);
   541  0710  087A               	movf	writeNumber@point,w
   542  0711  25B6               	fcall	_writeBit
   543                           
   544                           ;main.c: 97:             writeBit(0);
   545  0712  3000               	movlw	0
   546  0713  25B6               	fcall	_writeBit
   547                           
   548                           ;main.c: 98:             writeBit(1);
   549  0714  3001               	movlw	1
   550  0715  25B6               	fcall	_writeBit
   551                           
   552                           ;main.c: 99:             writeBit(0);
   553  0716  3000               	movlw	0
   554  0717  25B6               	fcall	_writeBit
   555                           
   556                           ;main.c: 100:             writeBit(0);
   557  0718  3000               	movlw	0
   558  0719  25B6               	fcall	_writeBit
   559                           
   560                           ;main.c: 101:             writeBit(1);
   561  071A  3001               	movlw	1
   562  071B  25B6               	fcall	_writeBit
   563                           
   564                           ;main.c: 102:             writeBit(0);
   565  071C  3000               	movlw	0
   566  071D  25B6               	fcall	_writeBit
   567                           
   568                           ;main.c: 103:             writeBit(0);
   569  071E  3000               	movlw	0
   570  071F  25B6               	fcall	_writeBit
   571                           
   572                           ;main.c: 104:             break;
   573  0720  2FE5               	goto	l65
   574  0721                     l960:	
   575                           
   576                           ;main.c: 106:             writeBit(point);
   577  0721  087A               	movf	writeNumber@point,w
   578  0722  25B6               	fcall	_writeBit
   579                           
   580                           ;main.c: 107:             writeBit(0);
   581  0723  3000               	movlw	0
   582  0724  25B6               	fcall	_writeBit
   583                           
   584                           ;main.c: 108:             writeBit(1);
   585  0725  3001               	movlw	1
   586  0726  25B6               	fcall	_writeBit
   587                           
   588                           ;main.c: 109:             writeBit(1);
   589  0727  3001               	movlw	1
   590  0728  25B6               	fcall	_writeBit
   591                           
   592                           ;main.c: 110:             writeBit(0);
   593  0729  3000               	movlw	0
   594  072A  25B6               	fcall	_writeBit
   595                           
   596                           ;main.c: 111:             writeBit(0);
   597  072B  3000               	movlw	0
   598  072C  25B6               	fcall	_writeBit
   599                           
   600                           ;main.c: 112:             writeBit(0);
   601  072D  3000               	movlw	0
   602  072E  25B6               	fcall	_writeBit
   603                           
   604                           ;main.c: 113:             writeBit(0);
   605  072F  3000               	movlw	0
   606  0730  25B6               	fcall	_writeBit
   607                           
   608                           ;main.c: 114:             break;
   609  0731  2FE5               	goto	l65
   610  0732                     l962:	
   611                           
   612                           ;main.c: 116:             writeBit(point);
   613  0732  087A               	movf	writeNumber@point,w
   614  0733  25B6               	fcall	_writeBit
   615                           
   616                           ;main.c: 117:             writeBit(0);
   617  0734  3000               	movlw	0
   618  0735  25B6               	fcall	_writeBit
   619                           
   620                           ;main.c: 118:             writeBit(0);
   621  0736  3000               	movlw	0
   622  0737  25B6               	fcall	_writeBit
   623                           
   624                           ;main.c: 119:             writeBit(1);
   625  0738  3001               	movlw	1
   626  0739  25B6               	fcall	_writeBit
   627                           
   628                           ;main.c: 120:             writeBit(1);
   629  073A  3001               	movlw	1
   630  073B  25B6               	fcall	_writeBit
   631                           
   632                           ;main.c: 121:             writeBit(0);
   633  073C  3000               	movlw	0
   634  073D  25B6               	fcall	_writeBit
   635                           
   636                           ;main.c: 122:             writeBit(0);
   637  073E  3000               	movlw	0
   638  073F  25B6               	fcall	_writeBit
   639                           
   640                           ;main.c: 123:             writeBit(1);
   641  0740  3001               	movlw	1
   642  0741  25B6               	fcall	_writeBit
   643                           
   644                           ;main.c: 124:             break;
   645  0742  2FE5               	goto	l65
   646  0743                     l964:	
   647                           
   648                           ;main.c: 126:             writeBit(point);
   649  0743  087A               	movf	writeNumber@point,w
   650  0744  25B6               	fcall	_writeBit
   651                           
   652                           ;main.c: 127:             writeBit(0);
   653  0745  3000               	movlw	0
   654  0746  25B6               	fcall	_writeBit
   655                           
   656                           ;main.c: 128:             writeBit(0);
   657  0747  3000               	movlw	0
   658  0748  25B6               	fcall	_writeBit
   659                           
   660                           ;main.c: 129:             writeBit(1);
   661  0749  3001               	movlw	1
   662  074A  25B6               	fcall	_writeBit
   663                           
   664                           ;main.c: 130:             writeBit(0);
   665  074B  3000               	movlw	0
   666  074C  25B6               	fcall	_writeBit
   667                           
   668                           ;main.c: 131:             writeBit(0);
   669  074D  3000               	movlw	0
   670  074E  25B6               	fcall	_writeBit
   671                           
   672                           ;main.c: 132:             writeBit(1);
   673  074F  3001               	movlw	1
   674  0750  25B6               	fcall	_writeBit
   675                           
   676                           ;main.c: 133:             writeBit(0);
   677  0751  3000               	movlw	0
   678  0752  25B6               	fcall	_writeBit
   679                           
   680                           ;main.c: 134:             break;
   681  0753  2FE5               	goto	l65
   682  0754                     l966:	
   683                           
   684                           ;main.c: 136:             writeBit(point);
   685  0754  087A               	movf	writeNumber@point,w
   686  0755  25B6               	fcall	_writeBit
   687                           
   688                           ;main.c: 137:             writeBit(0);
   689  0756  3000               	movlw	0
   690  0757  25B6               	fcall	_writeBit
   691                           
   692                           ;main.c: 138:             writeBit(0);
   693  0758  3000               	movlw	0
   694  0759  25B6               	fcall	_writeBit
   695                           
   696                           ;main.c: 139:             writeBit(0);
   697  075A  3000               	movlw	0
   698  075B  25B6               	fcall	_writeBit
   699                           
   700                           ;main.c: 140:             writeBit(0);
   701  075C  3000               	movlw	0
   702  075D  25B6               	fcall	_writeBit
   703                           
   704                           ;main.c: 141:             writeBit(0);
   705  075E  3000               	movlw	0
   706  075F  25B6               	fcall	_writeBit
   707                           
   708                           ;main.c: 142:             writeBit(1);
   709  0760  3001               	movlw	1
   710  0761  25B6               	fcall	_writeBit
   711                           
   712                           ;main.c: 143:             writeBit(0);
   713  0762  3000               	movlw	0
   714  0763  25B6               	fcall	_writeBit
   715                           
   716                           ;main.c: 144:             break;
   717  0764  2FE5               	goto	l65
   718  0765                     l968:	
   719                           
   720                           ;main.c: 146:             writeBit(point);
   721  0765  087A               	movf	writeNumber@point,w
   722  0766  25B6               	fcall	_writeBit
   723                           
   724                           ;main.c: 147:             writeBit(1);
   725  0767  3001               	movlw	1
   726  0768  25B6               	fcall	_writeBit
   727                           
   728                           ;main.c: 148:             writeBit(1);
   729  0769  3001               	movlw	1
   730  076A  25B6               	fcall	_writeBit
   731                           
   732                           ;main.c: 149:             writeBit(1);
   733  076B  3001               	movlw	1
   734  076C  25B6               	fcall	_writeBit
   735                           
   736                           ;main.c: 150:             writeBit(1);
   737  076D  3001               	movlw	1
   738  076E  25B6               	fcall	_writeBit
   739                           
   740                           ;main.c: 151:             writeBit(0);
   741  076F  3000               	movlw	0
   742  0770  25B6               	fcall	_writeBit
   743                           
   744                           ;main.c: 152:             writeBit(0);
   745  0771  3000               	movlw	0
   746  0772  25B6               	fcall	_writeBit
   747                           
   748                           ;main.c: 153:             writeBit(0);
   749  0773  3000               	movlw	0
   750  0774  25B6               	fcall	_writeBit
   751                           
   752                           ;main.c: 154:             break;
   753  0775  2FE5               	goto	l65
   754  0776                     l970:	
   755                           
   756                           ;main.c: 156:             writeBit(point);
   757  0776  087A               	movf	writeNumber@point,w
   758  0777  25B6               	fcall	_writeBit
   759                           
   760                           ;main.c: 157:             writeBit(0);
   761  0778  3000               	movlw	0
   762  0779  25B6               	fcall	_writeBit
   763                           
   764                           ;main.c: 158:             writeBit(0);
   765  077A  3000               	movlw	0
   766  077B  25B6               	fcall	_writeBit
   767                           
   768                           ;main.c: 159:             writeBit(0);
   769  077C  3000               	movlw	0
   770  077D  25B6               	fcall	_writeBit
   771                           
   772                           ;main.c: 160:             writeBit(0);
   773  077E  3000               	movlw	0
   774  077F  25B6               	fcall	_writeBit
   775                           
   776                           ;main.c: 161:             writeBit(0);
   777  0780  3000               	movlw	0
   778  0781  25B6               	fcall	_writeBit
   779                           
   780                           ;main.c: 162:             writeBit(0);
   781  0782  3000               	movlw	0
   782  0783  25B6               	fcall	_writeBit
   783                           
   784                           ;main.c: 163:             writeBit(0);
   785  0784  3000               	movlw	0
   786  0785  25B6               	fcall	_writeBit
   787                           
   788                           ;main.c: 164:             break;
   789  0786  2FE5               	goto	l65
   790  0787                     l972:	
   791                           
   792                           ;main.c: 166:             writeBit(point);
   793  0787  087A               	movf	writeNumber@point,w
   794  0788  25B6               	fcall	_writeBit
   795                           
   796                           ;main.c: 167:             writeBit(0);
   797  0789  3000               	movlw	0
   798  078A  25B6               	fcall	_writeBit
   799                           
   800                           ;main.c: 168:             writeBit(0);
   801  078B  3000               	movlw	0
   802  078C  25B6               	fcall	_writeBit
   803                           
   804                           ;main.c: 169:             writeBit(1);
   805  078D  3001               	movlw	1
   806  078E  25B6               	fcall	_writeBit
   807                           
   808                           ;main.c: 170:             writeBit(0);
   809  078F  3000               	movlw	0
   810  0790  25B6               	fcall	_writeBit
   811                           
   812                           ;main.c: 171:             writeBit(0);
   813  0791  3000               	movlw	0
   814  0792  25B6               	fcall	_writeBit
   815                           
   816                           ;main.c: 172:             writeBit(0);
   817  0793  3000               	movlw	0
   818  0794  25B6               	fcall	_writeBit
   819                           
   820                           ;main.c: 173:             writeBit(0);
   821  0795  3000               	movlw	0
   822  0796  25B6               	fcall	_writeBit
   823                           
   824                           ;main.c: 174:             break;
   825  0797  2FE5               	goto	l65
   826  0798                     l974:	
   827                           
   828                           ;main.c: 176:             writeBit(point);
   829  0798  087A               	movf	writeNumber@point,w
   830  0799  25B6               	fcall	_writeBit
   831                           
   832                           ;main.c: 177:             writeBit(1);
   833  079A  3001               	movlw	1
   834  079B  25B6               	fcall	_writeBit
   835                           
   836                           ;main.c: 178:             writeBit(0);
   837  079C  3000               	movlw	0
   838  079D  25B6               	fcall	_writeBit
   839                           
   840                           ;main.c: 179:             writeBit(0);
   841  079E  3000               	movlw	0
   842  079F  25B6               	fcall	_writeBit
   843                           
   844                           ;main.c: 180:             writeBit(0);
   845  07A0  3000               	movlw	0
   846  07A1  25B6               	fcall	_writeBit
   847                           
   848                           ;main.c: 181:             writeBit(0);
   849  07A2  3000               	movlw	0
   850  07A3  25B6               	fcall	_writeBit
   851                           
   852                           ;main.c: 182:             writeBit(0);
   853  07A4  3000               	movlw	0
   854  07A5  25B6               	fcall	_writeBit
   855                           
   856                           ;main.c: 183:             writeBit(0);
   857  07A6  3000               	movlw	0
   858  07A7  25B6               	fcall	_writeBit
   859                           
   860                           ;main.c: 184:             break;
   861  07A8  2FE5               	goto	l65
   862  07A9                     l976:	
   863                           
   864                           ;main.c: 186:             writeBit(1);
   865  07A9  3001               	movlw	1
   866  07AA  25B6               	fcall	_writeBit
   867                           
   868                           ;main.c: 187:             writeBit(1);
   869  07AB  3001               	movlw	1
   870  07AC  25B6               	fcall	_writeBit
   871                           
   872                           ;main.c: 188:             writeBit(1);
   873  07AD  3001               	movlw	1
   874  07AE  25B6               	fcall	_writeBit
   875                           
   876                           ;main.c: 189:             writeBit(1);
   877  07AF  3001               	movlw	1
   878  07B0  25B6               	fcall	_writeBit
   879                           
   880                           ;main.c: 190:             writeBit(1);
   881  07B1  3001               	movlw	1
   882  07B2  25B6               	fcall	_writeBit
   883                           
   884                           ;main.c: 191:             writeBit(1);
   885  07B3  3001               	movlw	1
   886  07B4  25B6               	fcall	_writeBit
   887                           
   888                           ;main.c: 192:             writeBit(1);
   889  07B5  3001               	movlw	1
   890  07B6  25B6               	fcall	_writeBit
   891                           
   892                           ;main.c: 193:             writeBit(1);
   893  07B7  3001               	movlw	1
   894  07B8  25B6               	fcall	_writeBit
   895                           
   896                           ;main.c: 194:             break;
   897  07B9  2FE5               	goto	l65
   898  07BA                     l980:	
   899  07BA  087D               	movf	writeNumber@num,w
   900  07BB  00FB               	movwf	??_writeNumber
   901  07BC  01FC               	clrf	??_writeNumber+1
   902                           
   903                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   904                           ; Switch size 1, requested type "simple"
   905                           ; Number of cases is 1, Range of values is 0 to 0
   906                           ; switch strategies available:
   907                           ; Name         Instructions Cycles
   908                           ; simple_byte            4     3 (average)
   909                           ; direct_byte            7     6 (fixed)
   910                           ; jumptable            260     6 (fixed)
   911                           ;	Chosen strategy is simple_byte
   912  07BD  087C               	movf	??_writeNumber+1,w
   913  07BE  3A00               	xorlw	0	; case 0
   914  07BF  1903               	skipnz
   915  07C0  2FC2               	goto	l1060
   916  07C1  2FE5               	goto	l65
   917  07C2                     l1060:	
   918                           
   919                           ; Switch size 1, requested type "simple"
   920                           ; Number of cases is 11, Range of values is 0 to 10
   921                           ; switch strategies available:
   922                           ; Name         Instructions Cycles
   923                           ; direct_byte           17     6 (fixed)
   924                           ; simple_byte           34    18 (average)
   925                           ; jumptable            260     6 (fixed)
   926                           ;	Chosen strategy is simple_byte
   927  07C2  087B               	movf	??_writeNumber,w
   928  07C3  3A00               	xorlw	0	; case 0
   929  07C4  1903               	skipnz
   930  07C5  2F98               	goto	l974
   931  07C6  3A01               	xorlw	1	; case 1
   932  07C7  1903               	skipnz
   933  07C8  2EFF               	goto	l956
   934  07C9  3A03               	xorlw	3	; case 2
   935  07CA  1903               	skipnz
   936  07CB  2F10               	goto	l958
   937  07CC  3A01               	xorlw	1	; case 3
   938  07CD  1903               	skipnz
   939  07CE  2F21               	goto	l960
   940  07CF  3A07               	xorlw	7	; case 4
   941  07D0  1903               	skipnz
   942  07D1  2F32               	goto	l962
   943  07D2  3A01               	xorlw	1	; case 5
   944  07D3  1903               	skipnz
   945  07D4  2F43               	goto	l964
   946  07D5  3A03               	xorlw	3	; case 6
   947  07D6  1903               	skipnz
   948  07D7  2F54               	goto	l966
   949  07D8  3A01               	xorlw	1	; case 7
   950  07D9  1903               	skipnz
   951  07DA  2F65               	goto	l968
   952  07DB  3A0F               	xorlw	15	; case 8
   953  07DC  1903               	skipnz
   954  07DD  2F76               	goto	l970
   955  07DE  3A01               	xorlw	1	; case 9
   956  07DF  1903               	skipnz
   957  07E0  2F87               	goto	l972
   958  07E1  3A03               	xorlw	3	; case 10
   959  07E2  1903               	skipnz
   960  07E3  2FA9               	goto	l976
   961  07E4  2FE5               	goto	l65
   962  07E5                     l65:	
   963                           
   964                           ;main.c: 197:     RB6 = 1;
   965  07E5  1283               	bcf	3,5	;RP0=0, select bank0
   966  07E6  1303               	bcf	3,6	;RP1=0, select bank0
   967  07E7  1706               	bsf	6,6	;volatile
   968                           
   969                           ;main.c: 198:     addMinute();
   970  07E8  2649               	fcall	_addMinute
   971  07E9  0008               	return
   972  07EA                     __end_of_writeNumber:	
   973                           
   974                           	psect	text2
   975  05B6                     __ptext2:	
   976 ;; *************** function _writeBit *****************
   977 ;; Defined at:
   978 ;;		line 26 in file "main.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;  _bit            1    wreg     unsigned char 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  _bit            1    0[COMMON] unsigned char 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      void 
   985 ;; Registers used:
   986 ;;		wreg
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   992 ;;      Params:         0       0       0       0
   993 ;;      Locals:         1       0       0       0
   994 ;;      Temps:          0       0       0       0
   995 ;;      Totals:         1       0       0       0
   996 ;;Total ram usage:        1 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_writeNumber
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           
  1006                           ;psect for function _writeBit
  1007  05B6                     _writeBit:	
  1008                           
  1009                           ;incstack = 0
  1010                           ; Regs used in _writeBit: [wreg]
  1011                           ;writeBit@_bit stored from wreg
  1012  05B6  00F0               	movwf	writeBit@_bit
  1013                           
  1014                           ;main.c: 26: void writeBit(char _bit);main.c: 27: {;main.c: 28:   RB7 = 0;
  1015  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  1016  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  1017  05B9  1386               	bcf	6,7	;volatile
  1018                           
  1019                           ;main.c: 29:   RB5 = _bit;
  1020  05BA  1C70               	btfss	writeBit@_bit,0
  1021  05BB  2DC0               	goto	u310
  1022  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1023  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1024  05BE  1686               	bsf	6,5	;volatile
  1025  05BF  2DC3               	goto	u324
  1026  05C0                     u310:	
  1027  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1028  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1029  05C2  1286               	bcf	6,5	;volatile
  1030  05C3                     u324:	
  1031                           
  1032                           ;main.c: 30:   RB7 = 1;
  1033  05C3  1786               	bsf	6,7	;volatile
  1034                           
  1035                           ;main.c: 31:   RB7 = 0;
  1036  05C4  1386               	bcf	6,7	;volatile
  1037  05C5  0008               	return
  1038  05C6                     __end_of_writeBit:	
  1039                           
  1040                           	psect	text3
  1041  0649                     __ptext3:	
  1042 ;; *************** function _addMinute *****************
  1043 ;; Defined at:
  1044 ;;		line 34 in file "main.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1058 ;;      Params:         0       0       0       0
  1059 ;;      Locals:         0       0       0       0
  1060 ;;      Temps:          2       0       0       0
  1061 ;;      Totals:         2       0       0       0
  1062 ;;Total ram usage:        2 bytes
  1063 ;; Hardware stack levels used:    1
  1064 ;; Hardware stack levels required when called:    1
  1065 ;; This function calls:
  1066 ;;		___lwdiv
  1067 ;; This function is called by:
  1068 ;;		_writeNumber
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           
  1073                           ;psect for function _addMinute
  1074  0649                     _addMinute:	
  1075                           
  1076                           ;main.c: 35:     if (TMR0 == 255){
  1077                           
  1078                           ;incstack = 0
  1079                           ; Regs used in _addMinute: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1080  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1081  064A  1303               	bcf	3,6	;RP1=0, select bank0
  1082  064B  0A01               	incf	1,w	;volatile
  1083  064C  1D03               	btfss	3,2
  1084  064D  0008               	return
  1085                           
  1086                           ;main.c: 36:         cnt = cnt + 1;
  1087  064E  0822               	movf	_cnt,w
  1088  064F  3E01               	addlw	1
  1089  0650  00A2               	movwf	_cnt
  1090  0651  0823               	movf	_cnt+1,w
  1091  0652  1803               	skipnc
  1092  0653  3E01               	addlw	1
  1093  0654  3E00               	addlw	0
  1094  0655  00A3               	movwf	_cnt+1
  1095                           
  1096                           ;main.c: 37:         if (ant != (cnt/10)){
  1097  0656  300A               	movlw	10
  1098  0657  00F0               	movwf	___lwdiv@divisor
  1099  0658  3000               	movlw	0
  1100  0659  00F1               	movwf	___lwdiv@divisor+1
  1101  065A  0823               	movf	_cnt+1,w
  1102  065B  00F3               	movwf	___lwdiv@dividend+1
  1103  065C  0822               	movf	_cnt,w
  1104  065D  00F2               	movwf	___lwdiv@dividend
  1105  065E  25C6               	fcall	___lwdiv
  1106  065F  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0660  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0661  0824               	movf	_ant,w
  1109  0662  00F8               	movwf	??_addMinute
  1110  0663  01F9               	clrf	??_addMinute+1
  1111  0664  0871               	movf	?___lwdiv+1,w
  1112  0665  0679               	xorwf	??_addMinute+1,w
  1113  0666  1D03               	skipz
  1114  0667  2E6A               	goto	u345
  1115  0668  0870               	movf	?___lwdiv,w
  1116  0669  0678               	xorwf	??_addMinute,w
  1117  066A                     u345:	
  1118  066A  1903               	skipnz
  1119  066B  2E84               	goto	l906
  1120                           
  1121                           ;main.c: 38:             ant = cnt/10;
  1122  066C  300A               	movlw	10
  1123  066D  00F0               	movwf	___lwdiv@divisor
  1124  066E  3000               	movlw	0
  1125  066F  00F1               	movwf	___lwdiv@divisor+1
  1126  0670  0823               	movf	_cnt+1,w
  1127  0671  00F3               	movwf	___lwdiv@dividend+1
  1128  0672  0822               	movf	_cnt,w
  1129  0673  00F2               	movwf	___lwdiv@dividend
  1130  0674  25C6               	fcall	___lwdiv
  1131  0675  0870               	movf	?___lwdiv,w
  1132  0676  00F8               	movwf	??_addMinute
  1133  0677  0878               	movf	??_addMinute,w
  1134  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1135  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1136  067A  00A4               	movwf	_ant
  1137                           
  1138                           ;main.c: 39:             blink = !blink;
  1139  067B  0825               	movf	_blink,w
  1140  067C  1D03               	btfss	3,2
  1141  067D  2E80               	goto	u350
  1142  067E  3001               	movlw	1
  1143  067F  2E81               	goto	u360
  1144  0680                     u350:	
  1145  0680  3000               	movlw	0
  1146  0681                     u360:	
  1147  0681  00F8               	movwf	??_addMinute
  1148  0682  0878               	movf	??_addMinute,w
  1149  0683  00A5               	movwf	_blink
  1150  0684                     l906:	
  1151                           
  1152                           ;main.c: 41:         if (cnt >= tiempo){
  1153  0684  082B               	movf	_tiempo+1,w
  1154  0685  0223               	subwf	_cnt+1,w
  1155  0686  1D03               	skipz
  1156  0687  2E8A               	goto	u375
  1157  0688  082A               	movf	_tiempo,w
  1158  0689  0222               	subwf	_cnt,w
  1159  068A                     u375:	
  1160  068A  1C03               	skipc
  1161  068B  0008               	return
  1162                           
  1163                           ;main.c: 42:             suma = suma + acum;
  1164  068C  0820               	movf	_suma,w
  1165  068D  3E99               	addlw	153
  1166  068E  00A0               	movwf	_suma
  1167  068F  0821               	movf	_suma+1,w
  1168  0690  1803               	skipnc
  1169  0691  3E01               	addlw	1
  1170  0692  3E14               	addlw	20
  1171  0693  00A1               	movwf	_suma+1
  1172                           
  1173                           ;main.c: 44:             if (tiempo > 916){
  1174  0694  082B               	movf	_tiempo+1,w
  1175  0695  3A80               	xorlw	128
  1176  0696  00FF               	movwf	127
  1177  0697  3083               	movlw	131
  1178  0698  027F               	subwf	127,w
  1179  0699  1D03               	skipz
  1180  069A  2E9D               	goto	u385
  1181  069B  3095               	movlw	149
  1182  069C  022A               	subwf	_tiempo,w
  1183  069D                     u385:	
  1184  069D  1C03               	skipc
  1185  069E  2EA7               	goto	l916
  1186                           
  1187                           ;main.c: 45:                 tiempo = 915;
  1188  069F  3093               	movlw	147
  1189  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  1190  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  1191  06A2  00AA               	movwf	_tiempo
  1192  06A3  3003               	movlw	3
  1193  06A4  00AB               	movwf	_tiempo+1
  1194                           
  1195                           ;main.c: 46:                 suma = 0;
  1196  06A5  01A0               	clrf	_suma
  1197  06A6  01A1               	clrf	_suma+1
  1198  06A7                     l916:	
  1199                           
  1200                           ;main.c: 49:             if (suma >= 10000){
  1201  06A7  3027               	movlw	39
  1202  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  1203  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  1204  06AA  0221               	subwf	_suma+1,w
  1205  06AB  3010               	movlw	16
  1206  06AC  1903               	skipnz
  1207  06AD  0220               	subwf	_suma,w
  1208  06AE  1C03               	skipc
  1209  06AF  2EC2               	goto	l922
  1210                           
  1211                           ;main.c: 50:                 suma = suma - 10000;
  1212  06B0  0820               	movf	_suma,w
  1213  06B1  3EF0               	addlw	240
  1214  06B2  00A0               	movwf	_suma
  1215  06B3  0821               	movf	_suma+1,w
  1216  06B4  1803               	skipnc
  1217  06B5  3E01               	addlw	1
  1218  06B6  3ED8               	addlw	216
  1219  06B7  00A1               	movwf	_suma+1
  1220                           
  1221                           ;main.c: 51:                 tiempo = tiempo + 1;
  1222  06B8  082A               	movf	_tiempo,w
  1223  06B9  3E01               	addlw	1
  1224  06BA  00AA               	movwf	_tiempo
  1225  06BB  082B               	movf	_tiempo+1,w
  1226  06BC  1803               	skipnc
  1227  06BD  3E01               	addlw	1
  1228  06BE  3E00               	addlw	0
  1229  06BF  00AB               	movwf	_tiempo+1
  1230                           
  1231                           ;main.c: 53:                 RB0 = !RB0;
  1232  06C0  3001               	movlw	1
  1233  06C1  0686               	xorwf	6,f
  1234  06C2                     l922:	
  1235                           
  1236                           ;main.c: 56:             cnt = 0;
  1237  06C2  01A2               	clrf	_cnt
  1238  06C3  01A3               	clrf	_cnt+1
  1239                           
  1240                           ;main.c: 57:             m2 = m2 + 1;
  1241  06C4  082C               	movf	_m2,w
  1242  06C5  3E01               	addlw	1
  1243  06C6  00F8               	movwf	??_addMinute
  1244  06C7  0878               	movf	??_addMinute,w
  1245  06C8  00AC               	movwf	_m2
  1246                           
  1247                           ;main.c: 58:             if (m2 > 9){
  1248  06C9  300A               	movlw	10
  1249  06CA  022C               	subwf	_m2,w
  1250  06CB  1C03               	skipc
  1251  06CC  2ED3               	goto	l932
  1252                           
  1253                           ;main.c: 59:                 m2 = 0;
  1254  06CD  01AC               	clrf	_m2
  1255                           
  1256                           ;main.c: 60:                 m1 = m1 + 1;
  1257  06CE  082D               	movf	_m1,w
  1258  06CF  3E01               	addlw	1
  1259  06D0  00F8               	movwf	??_addMinute
  1260  06D1  0878               	movf	??_addMinute,w
  1261  06D2  00AD               	movwf	_m1
  1262  06D3                     l932:	
  1263                           
  1264                           ;main.c: 62:             if (m1 > 5){
  1265  06D3  3006               	movlw	6
  1266  06D4  022D               	subwf	_m1,w
  1267  06D5  1C03               	skipc
  1268  06D6  2EDD               	goto	l938
  1269                           
  1270                           ;main.c: 63:                 m1 = 0;
  1271  06D7  01AD               	clrf	_m1
  1272                           
  1273                           ;main.c: 64:                 h2 = h2 + 1;
  1274  06D8  0826               	movf	_h2,w
  1275  06D9  3E01               	addlw	1
  1276  06DA  00F8               	movwf	??_addMinute
  1277  06DB  0878               	movf	??_addMinute,w
  1278  06DC  00A6               	movwf	_h2
  1279  06DD                     l938:	
  1280                           
  1281                           ;main.c: 66:             if (h2 > 9){
  1282  06DD  300A               	movlw	10
  1283  06DE  0226               	subwf	_h2,w
  1284  06DF  1C03               	skipc
  1285  06E0  2EE7               	goto	l944
  1286                           
  1287                           ;main.c: 67:                 h2 = 0;
  1288  06E1  01A6               	clrf	_h2
  1289                           
  1290                           ;main.c: 68:                 h1 = h1 + 1;
  1291  06E2  0827               	movf	_h1,w
  1292  06E3  3E01               	addlw	1
  1293  06E4  00F8               	movwf	??_addMinute
  1294  06E5  0878               	movf	??_addMinute,w
  1295  06E6  00A7               	movwf	_h1
  1296  06E7                     l944:	
  1297                           
  1298                           ;main.c: 70:             if (h1 >= 2){
  1299  06E7  3002               	movlw	2
  1300  06E8  0227               	subwf	_h1,w
  1301  06E9  1C03               	skipc
  1302  06EA  0008               	return
  1303                           
  1304                           ;main.c: 71:                 if(h2 < 9 && h2 > 3 && h1 == 2){
  1305  06EB  3009               	movlw	9
  1306  06EC  0226               	subwf	_h2,w
  1307  06ED  1803               	skipnc
  1308  06EE  0008               	return
  1309  06EF  3004               	movlw	4
  1310  06F0  0226               	subwf	_h2,w
  1311  06F1  1C03               	skipc
  1312  06F2  0008               	return
  1313  06F3  3002               	movlw	2
  1314  06F4  0627               	xorwf	_h1,w
  1315  06F5  1D03               	btfss	3,2
  1316  06F6  0008               	return
  1317                           
  1318                           ;main.c: 72:                     h2 = 0;
  1319  06F7  01A6               	clrf	_h2
  1320                           
  1321                           ;main.c: 73:                     h1 = 0;
  1322  06F8  01A7               	clrf	_h1
  1323  06F9  0008               	return
  1324  06FA                     __end_of_addMinute:	
  1325                           ;main.c: 76:         }
  1326                           
  1327                           
  1328                           	psect	text4
  1329  05C6                     __ptext4:	
  1330 ;; *************** function ___lwdiv *****************
  1331 ;; Defined at:
  1332 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  divisor         2    0[COMMON] unsigned int 
  1335 ;;  dividend        2    2[COMMON] unsigned int 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  quotient        2    5[COMMON] unsigned int 
  1338 ;;  counter         1    7[COMMON] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2    0[COMMON] unsigned int 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2, status,0
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1348 ;;      Params:         4       0       0       0
  1349 ;;      Locals:         3       0       0       0
  1350 ;;      Temps:          1       0       0       0
  1351 ;;      Totals:         8       0       0       0
  1352 ;;Total ram usage:        8 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; This function calls:
  1355 ;;		Nothing
  1356 ;; This function is called by:
  1357 ;;		_addMinute
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           
  1362                           ;psect for function ___lwdiv
  1363  05C6                     ___lwdiv:	
  1364                           
  1365                           ;incstack = 0
  1366                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1367  05C6  01F5               	clrf	___lwdiv@quotient
  1368  05C7  01F6               	clrf	___lwdiv@quotient+1
  1369  05C8  0870               	movf	___lwdiv@divisor,w
  1370  05C9  0471               	iorwf	___lwdiv@divisor+1,w
  1371  05CA  1903               	btfsc	3,2
  1372  05CB  2DFD               	goto	l890
  1373  05CC  01F7               	clrf	___lwdiv@counter
  1374  05CD  0AF7               	incf	___lwdiv@counter,f
  1375  05CE                     l878:	
  1376  05CE  1BF1               	btfsc	___lwdiv@divisor+1,7
  1377  05CF  2DDC               	goto	l880
  1378  05D0  3001               	movlw	1
  1379  05D1                     u255:	
  1380  05D1  1003               	clrc
  1381  05D2  0DF0               	rlf	___lwdiv@divisor,f
  1382  05D3  0DF1               	rlf	___lwdiv@divisor+1,f
  1383  05D4  3EFF               	addlw	-1
  1384  05D5  1D03               	skipz
  1385  05D6  2DD1               	goto	u255
  1386  05D7  3001               	movlw	1
  1387  05D8  00F4               	movwf	??___lwdiv
  1388  05D9  0874               	movf	??___lwdiv,w
  1389  05DA  07F7               	addwf	___lwdiv@counter,f
  1390  05DB  2DCE               	goto	l878
  1391  05DC                     l880:	
  1392  05DC  3001               	movlw	1
  1393  05DD                     u275:	
  1394  05DD  1003               	clrc
  1395  05DE  0DF5               	rlf	___lwdiv@quotient,f
  1396  05DF  0DF6               	rlf	___lwdiv@quotient+1,f
  1397  05E0  3EFF               	addlw	-1
  1398  05E1  1D03               	skipz
  1399  05E2  2DDD               	goto	u275
  1400  05E3  0871               	movf	___lwdiv@divisor+1,w
  1401  05E4  0273               	subwf	___lwdiv@dividend+1,w
  1402  05E5  1D03               	skipz
  1403  05E6  2DE9               	goto	u285
  1404  05E7  0870               	movf	___lwdiv@divisor,w
  1405  05E8  0272               	subwf	___lwdiv@dividend,w
  1406  05E9                     u285:	
  1407  05E9  1C03               	skipc
  1408  05EA  2DF2               	goto	l886
  1409  05EB  0870               	movf	___lwdiv@divisor,w
  1410  05EC  02F2               	subwf	___lwdiv@dividend,f
  1411  05ED  0871               	movf	___lwdiv@divisor+1,w
  1412  05EE  1C03               	skipc
  1413  05EF  03F3               	decf	___lwdiv@dividend+1,f
  1414  05F0  02F3               	subwf	___lwdiv@dividend+1,f
  1415  05F1  1475               	bsf	___lwdiv@quotient,0
  1416  05F2                     l886:	
  1417  05F2  3001               	movlw	1
  1418  05F3                     u295:	
  1419  05F3  1003               	clrc
  1420  05F4  0CF1               	rrf	___lwdiv@divisor+1,f
  1421  05F5  0CF0               	rrf	___lwdiv@divisor,f
  1422  05F6  3EFF               	addlw	-1
  1423  05F7  1D03               	skipz
  1424  05F8  2DF3               	goto	u295
  1425  05F9  3001               	movlw	1
  1426  05FA  02F7               	subwf	___lwdiv@counter,f
  1427  05FB  1D03               	btfss	3,2
  1428  05FC  2DDC               	goto	l880
  1429  05FD                     l890:	
  1430  05FD  0876               	movf	___lwdiv@quotient+1,w
  1431  05FE  00F1               	movwf	?___lwdiv+1
  1432  05FF  0875               	movf	___lwdiv@quotient,w
  1433  0600  00F0               	movwf	?___lwdiv
  1434  0601  0008               	return
  1435  0602                     __end_of___lwdiv:	
  1436  007E                     btemp	set	126	;btemp
  1437  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      1      15
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_writeNumber
    _writeNumber->_addMinute
    _addMinute->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1338
                                              0 BANK0      1     1      0
                        _writeNumber
 ---------------------------------------------------------------------------------
 (1) _writeNumber                                          4     3      1    1338
                                             10 COMMON     4     3      1
                          _addMinute
                           _writeBit
 ---------------------------------------------------------------------------------
 (2) _writeBit                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _addMinute                                            2     2      0     466
                                              8 COMMON     2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _writeNumber
     _addMinute
       ___lwdiv
     _writeBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1       F       3       18.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1D      10        0.0%
ABS                  0      0      1D       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jun 08 00:23:45 2019

            __CFG_CP$OFF 0000           writeNumber@num 007D                       l65 07E5  
                     _h1 0027                       _h2 0026                       _m1 002D  
                     _m2 002C                      l922 06C2                      l906 0684  
                    l932 06D3                      l916 06A7                      l880 05DC  
                    l944 06E7                      l960 0721                      l890 05FD  
                    l938 06DD                      l970 0776                      l962 0732  
                    l972 0787                      l964 0743                      l956 06FF  
                    l980 07BA                      l886 05F2                      l878 05CE  
                    l974 0798                      l966 0754                      l958 0710  
                    l976 07A9                      l968 0765                      l992 060C  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RB6 0036                      _RB7 0037                      u310 05C0  
                    u324 05C3                      u350 0680                      u255 05D1  
                    u360 0681                      u345 066A             __CFG_CPD$OFF 0000  
                    u275 05DD                      u285 05E9                      u295 05F3  
                    u375 068A                      u385 069D                      _ant 0024  
                    _cnt 0022             __CFG_LVP$OFF 0000                     l1060 07C2  
       writeNumber@point 007A                     _TMR0 0001                     _acum 0028  
                   _main 0602                     _suma 0020                     btemp 007E  
                   start 0000                    ?_main 0070            __CFG_WDTE$OFF 0000  
        __end_of___lwdiv 0602              _writeNumber 06FA                    _PORTB 0006  
                  _TRISB 0086            __CFG_PWRTE$ON 0000                    _blink 0025  
         __CFG_BOREN$OFF 0000                    status 0003                    wtemp0 007E  
         __CFG_MCLRE$OFF 0000          __initialization 07EA             __end_of_main 0649  
                 ??_main 002E                ??___lwdiv 0074                   _tiempo 002A  
       __end_of_writeBit 05C6       __size_of_addMinute 00B1  __end_of__initialization 07FE  
         __pcstackCOMMON 0070             __pidataBANK0 05B0               __pbssBANK0 0020  
             __pmaintext 0602        __end_of_addMinute 06FA             ?_writeNumber 007A  
                ___lwdiv 05C6                ?_writeBit 0070                  __ptext1 06FA  
                __ptext2 05B6                  __ptext3 0649                  __ptext4 05C6  
   end_of_initialization 07FE             writeBit@_bit 0070               ??_writeBit 0070  
    start_initialization 07EA     __size_of_writeNumber 00F0              __pdataBANK0 0028  
              _addMinute 0649                ___latbits 0000            __pcstackBANK0 002E  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070        __size_of_writeBit 0010  
             ?_addMinute 0070         ___lwdiv@quotient 0075         __size_of___lwdiv 003C  
            ??_addMinute 0078          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
          __size_of_main 0047                 _writeBit 05B6            ??_writeNumber 007B  
    __CFG_FOSC$INTOSCCLK 0000               _OPTION_REG 0081      __end_of_writeNumber 07EA  
