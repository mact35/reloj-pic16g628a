

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jun 02 02:23:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.05
    15                           ; Generated 20/12/2018 GMT
    16                           ; 
    17                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F628A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001F                     	;# 
    72  0081                     	;# 
    73  0085                     	;# 
    74  0086                     	;# 
    75  008C                     	;# 
    76  008E                     	;# 
    77  0092                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009B                     	;# 
    82  009C                     	;# 
    83  009D                     	;# 
    84  009F                     	;# 
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  008C                     	;# 
   113  008E                     	;# 
   114  0092                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009F                     	;# 
   122                           
   123                           	psect	nvCOMMON
   124  0070                     __pnvCOMMON:	
   125  0070                     _m2:	
   126  0070                     	ds	2
   127  0072                     _m1:	
   128  0072                     	ds	2
   129  0074                     _h2:	
   130  0074                     	ds	2
   131  0006                     _PORTB	set	6
   132  0001                     _TMR0	set	1
   133  0034                     _RB4	set	52
   134  0033                     _RB3	set	51
   135  0032                     _RB2	set	50
   136  0031                     _RB1	set	49
   137  0036                     _RB6	set	54
   138  0035                     _RB5	set	53
   139  0037                     _RB7	set	55
   140  0081                     _OPTION_REG	set	129
   141  0086                     _TRISB	set	134
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  07FA                     start_initialization:	
   147  07FA                     __initialization:	
   148                           
   149                           ; Clear objects allocated to COMMON
   150  07FA  01F6               	clrf	__pbssCOMMON& (0+127)
   151  07FB  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   152  07FC  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   153  07FD  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   154  07FE                     end_of_initialization:	
   155                           ;End of C runtime variable initialization code
   156                           
   157  07FE                     __end_of__initialization:	
   158  07FE  0183               	clrf	3
   159  07FF  2E25               	ljmp	_main	;jump to C main() function
   160                           
   161                           	psect	bssCOMMON
   162  0076                     __pbssCOMMON:	
   163  0076                     _cnt:	
   164  0076                     	ds	2
   165  0078                     _h1:	
   166  0078                     	ds	2
   167                           
   168                           	psect	cstackCOMMON
   169  007A                     __pcstackCOMMON:	
   170  007A                     ?_writeBit:	
   171  007A                     ??_writeBit:	
   172                           ; 1 bytes @ 0x0
   173                           
   174  007A                     ?_addMinute:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  007A                     ??_addMinute:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  007A                     ?_main:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  007A                     writeBit@_bit:	
   184                           ; 1 bytes @ 0x0
   185                           
   186                           
   187                           ; 1 bytes @ 0x0
   188  007A                     	ds	1
   189  007B                     ?_writeNumber:	
   190  007B                     writeNumber@num:	
   191                           ; 1 bytes @ 0x1
   192                           
   193                           
   194                           ; 2 bytes @ 0x1
   195  007B                     	ds	2
   196  007D                     ??_writeNumber:	
   197  007D                     ??_main:	
   198                           ; 1 bytes @ 0x3
   199                           
   200                           
   201                           	psect	maintext
   202  0625                     __pmaintext:	
   203                           ; 1 bytes @ 0x3
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 178 in file "main.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;		None
   214 ;; Return value:  Size  Location     Type
   215 ;;                  1    wreg      void 
   216 ;; Registers used:
   217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   218 ;; Tracked objects:
   219 ;;		On entry : B00/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   223 ;;      Params:         0       0       0       0
   224 ;;      Locals:         0       0       0       0
   225 ;;      Temps:          0       0       0       0
   226 ;;      Totals:         0       0       0       0
   227 ;;Total ram usage:        0 bytes
   228 ;; Hardware stack levels required when called:    2
   229 ;; This function calls:
   230 ;;		_writeNumber
   231 ;; This function is called by:
   232 ;;		Startup code after reset
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236                           
   237                           ;psect for function _main
   238  0625                     _main:	
   239                           
   240                           ;main.c: 179:     TRISB = 0b00000000;
   241                           
   242                           ;incstack = 0
   243                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   244  0625  1683               	bsf	3,5	;RP0=1, select bank1
   245  0626  1303               	bcf	3,6	;RP1=0, select bank1
   246  0627  0186               	clrf	6	;volatile
   247                           
   248                           ;main.c: 180:     PORTB = 0;
   249  0628  1283               	bcf	3,5	;RP0=0, select bank0
   250  0629  1303               	bcf	3,6	;RP1=0, select bank0
   251  062A  0186               	clrf	6	;volatile
   252                           
   253                           ;main.c: 181:     OPTION_REG = 0b00000111;
   254  062B  3007               	movlw	7
   255  062C  1683               	bsf	3,5	;RP0=1, select bank1
   256  062D  1303               	bcf	3,6	;RP1=0, select bank1
   257  062E  0081               	movwf	1	;volatile
   258                           
   259                           ;main.c: 183:     h1 = 0;
   260  062F  01F8               	clrf	_h1
   261  0630  01F9               	clrf	_h1+1
   262                           
   263                           ;main.c: 184:     h2 = 2;
   264  0631  3002               	movlw	2
   265  0632  00F4               	movwf	_h2
   266  0633  3000               	movlw	0
   267  0634  00F5               	movwf	_h2+1
   268                           
   269                           ;main.c: 185:     m1 = 2;
   270  0635  3002               	movlw	2
   271  0636  00F2               	movwf	_m1
   272  0637  3000               	movlw	0
   273  0638  00F3               	movwf	_m1+1
   274                           
   275                           ;main.c: 186:     m2 = 5;
   276  0639  3005               	movlw	5
   277  063A  00F0               	movwf	_m2
   278  063B  3000               	movlw	0
   279  063C  00F1               	movwf	_m2+1
   280                           
   281                           ;main.c: 191:     cnt = 0;
   282  063D  01F6               	clrf	_cnt
   283  063E  01F7               	clrf	_cnt+1
   284                           
   285                           ;main.c: 192:     TMR0 = 99;
   286  063F  3063               	movlw	99
   287  0640  1283               	bcf	3,5	;RP0=0, select bank0
   288  0641  1303               	bcf	3,6	;RP1=0, select bank0
   289  0642  0081               	movwf	1	;volatile
   290  0643                     l859:	
   291                           
   292                           ;main.c: 195:         RB1 = 1;
   293  0643  1283               	bcf	3,5	;RP0=0, select bank0
   294  0644  1303               	bcf	3,6	;RP1=0, select bank0
   295  0645  1486               	bsf	6,1	;volatile
   296                           
   297                           ;main.c: 196:         RB2 = 0;
   298  0646  1106               	bcf	6,2	;volatile
   299                           
   300                           ;main.c: 197:         RB3 = 0;
   301  0647  1186               	bcf	6,3	;volatile
   302                           
   303                           ;main.c: 198:         RB4 = 0;
   304  0648  1206               	bcf	6,4	;volatile
   305                           
   306                           ;main.c: 199:         writeNumber(h1);
   307  0649  0879               	movf	_h1+1,w
   308  064A  00FC               	movwf	writeNumber@num+1
   309  064B  0878               	movf	_h1,w
   310  064C  00FB               	movwf	writeNumber@num
   311  064D  270E               	fcall	_writeNumber
   312                           
   313                           ;main.c: 200:         writeNumber(10);
   314  064E  300A               	movlw	10
   315  064F  00FB               	movwf	writeNumber@num
   316  0650  3000               	movlw	0
   317  0651  00FC               	movwf	writeNumber@num+1
   318  0652  270E               	fcall	_writeNumber
   319                           
   320                           ;main.c: 201:         RB1 = 0;
   321  0653  1283               	bcf	3,5	;RP0=0, select bank0
   322  0654  1303               	bcf	3,6	;RP1=0, select bank0
   323  0655  1086               	bcf	6,1	;volatile
   324                           
   325                           ;main.c: 202:         RB2 = 1;
   326  0656  1506               	bsf	6,2	;volatile
   327                           
   328                           ;main.c: 203:         RB3 = 0;
   329  0657  1186               	bcf	6,3	;volatile
   330                           
   331                           ;main.c: 204:         RB4 = 0;
   332  0658  1206               	bcf	6,4	;volatile
   333                           
   334                           ;main.c: 205:         writeNumber(h2);
   335  0659  0875               	movf	_h2+1,w
   336  065A  00FC               	movwf	writeNumber@num+1
   337  065B  0874               	movf	_h2,w
   338  065C  00FB               	movwf	writeNumber@num
   339  065D  270E               	fcall	_writeNumber
   340                           
   341                           ;main.c: 206:         writeNumber(10);
   342  065E  300A               	movlw	10
   343  065F  00FB               	movwf	writeNumber@num
   344  0660  3000               	movlw	0
   345  0661  00FC               	movwf	writeNumber@num+1
   346  0662  270E               	fcall	_writeNumber
   347                           
   348                           ;main.c: 207:         RB1 = 0;
   349  0663  1283               	bcf	3,5	;RP0=0, select bank0
   350  0664  1303               	bcf	3,6	;RP1=0, select bank0
   351  0665  1086               	bcf	6,1	;volatile
   352                           
   353                           ;main.c: 208:         RB2 = 0;
   354  0666  1106               	bcf	6,2	;volatile
   355                           
   356                           ;main.c: 209:         RB3 = 1;
   357  0667  1586               	bsf	6,3	;volatile
   358                           
   359                           ;main.c: 210:         RB4 = 0;
   360  0668  1206               	bcf	6,4	;volatile
   361                           
   362                           ;main.c: 211:         writeNumber(m1);
   363  0669  0873               	movf	_m1+1,w
   364  066A  00FC               	movwf	writeNumber@num+1
   365  066B  0872               	movf	_m1,w
   366  066C  00FB               	movwf	writeNumber@num
   367  066D  270E               	fcall	_writeNumber
   368                           
   369                           ;main.c: 212:         writeNumber(10);
   370  066E  300A               	movlw	10
   371  066F  00FB               	movwf	writeNumber@num
   372  0670  3000               	movlw	0
   373  0671  00FC               	movwf	writeNumber@num+1
   374  0672  270E               	fcall	_writeNumber
   375                           
   376                           ;main.c: 213:         RB1 = 0;
   377  0673  1283               	bcf	3,5	;RP0=0, select bank0
   378  0674  1303               	bcf	3,6	;RP1=0, select bank0
   379  0675  1086               	bcf	6,1	;volatile
   380                           
   381                           ;main.c: 214:         RB2 = 0;
   382  0676  1106               	bcf	6,2	;volatile
   383                           
   384                           ;main.c: 215:         RB3 = 0;
   385  0677  1186               	bcf	6,3	;volatile
   386                           
   387                           ;main.c: 216:         RB4 = 1;
   388  0678  1606               	bsf	6,4	;volatile
   389                           
   390                           ;main.c: 217:         writeNumber(m2);
   391  0679  0871               	movf	_m2+1,w
   392  067A  00FC               	movwf	writeNumber@num+1
   393  067B  0870               	movf	_m2,w
   394  067C  00FB               	movwf	writeNumber@num
   395  067D  270E               	fcall	_writeNumber
   396                           
   397                           ;main.c: 218:         writeNumber(10);
   398  067E  300A               	movlw	10
   399  067F  00FB               	movwf	writeNumber@num
   400  0680  3000               	movlw	0
   401  0681  00FC               	movwf	writeNumber@num+1
   402  0682  270E               	fcall	_writeNumber
   403  0683  2E43               	goto	l859
   404  0684                     __end_of_main:	
   405                           
   406                           	psect	text1
   407  070E                     __ptext1:	
   408 ;; *************** function _writeNumber *****************
   409 ;; Defined at:
   410 ;;		line 58 in file "main.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  num             2    1[COMMON] int 
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   424 ;;      Params:         2       0       0       0
   425 ;;      Locals:         0       0       0       0
   426 ;;      Temps:          0       0       0       0
   427 ;;      Totals:         2       0       0       0
   428 ;;Total ram usage:        2 bytes
   429 ;; Hardware stack levels used:    1
   430 ;; Hardware stack levels required when called:    1
   431 ;; This function calls:
   432 ;;		_addMinute
   433 ;;		_writeBit
   434 ;; This function is called by:
   435 ;;		_main
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           
   440                           ;psect for function _writeNumber
   441  070E                     _writeNumber:	
   442                           
   443                           ;main.c: 59:     RB6 = 0;
   444                           
   445                           ;incstack = 0
   446                           ; Regs used in _writeNumber: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   447  070E  1283               	bcf	3,5	;RP0=0, select bank0
   448  070F  1303               	bcf	3,6	;RP1=0, select bank0
   449  0710  1306               	bcf	6,6	;volatile
   450                           
   451                           ;main.c: 60:     switch (num)
   452  0711  2FCD               	goto	l841
   453  0712                     l817:	
   454                           
   455                           ;main.c: 63:             writeBit(1);
   456  0712  3001               	movlw	1
   457  0713  2615               	fcall	_writeBit
   458                           
   459                           ;main.c: 64:             writeBit(1);
   460  0714  3001               	movlw	1
   461  0715  2615               	fcall	_writeBit
   462                           
   463                           ;main.c: 65:             writeBit(1);
   464  0716  3001               	movlw	1
   465  0717  2615               	fcall	_writeBit
   466                           
   467                           ;main.c: 66:             writeBit(1);
   468  0718  3001               	movlw	1
   469  0719  2615               	fcall	_writeBit
   470                           
   471                           ;main.c: 67:             writeBit(1);
   472  071A  3001               	movlw	1
   473  071B  2615               	fcall	_writeBit
   474                           
   475                           ;main.c: 68:             writeBit(0);
   476  071C  3000               	movlw	0
   477  071D  2615               	fcall	_writeBit
   478                           
   479                           ;main.c: 69:             writeBit(0);
   480  071E  3000               	movlw	0
   481  071F  2615               	fcall	_writeBit
   482                           
   483                           ;main.c: 70:             writeBit(1);
   484  0720  3001               	movlw	1
   485  0721  2615               	fcall	_writeBit
   486                           
   487                           ;main.c: 71:             break;
   488  0722  2FF5               	goto	l50
   489  0723                     l819:	
   490                           
   491                           ;main.c: 73:             writeBit(1);
   492  0723  3001               	movlw	1
   493  0724  2615               	fcall	_writeBit
   494                           
   495                           ;main.c: 74:             writeBit(0);
   496  0725  3000               	movlw	0
   497  0726  2615               	fcall	_writeBit
   498                           
   499                           ;main.c: 75:             writeBit(1);
   500  0727  3001               	movlw	1
   501  0728  2615               	fcall	_writeBit
   502                           
   503                           ;main.c: 76:             writeBit(0);
   504  0729  3000               	movlw	0
   505  072A  2615               	fcall	_writeBit
   506                           
   507                           ;main.c: 77:             writeBit(0);
   508  072B  3000               	movlw	0
   509  072C  2615               	fcall	_writeBit
   510                           
   511                           ;main.c: 78:             writeBit(1);
   512  072D  3001               	movlw	1
   513  072E  2615               	fcall	_writeBit
   514                           
   515                           ;main.c: 79:             writeBit(0);
   516  072F  3000               	movlw	0
   517  0730  2615               	fcall	_writeBit
   518                           
   519                           ;main.c: 80:             writeBit(0);
   520  0731  3000               	movlw	0
   521  0732  2615               	fcall	_writeBit
   522                           
   523                           ;main.c: 81:             break;
   524  0733  2FF5               	goto	l50
   525  0734                     l821:	
   526                           
   527                           ;main.c: 83:             writeBit(1);
   528  0734  3001               	movlw	1
   529  0735  2615               	fcall	_writeBit
   530                           
   531                           ;main.c: 84:             writeBit(0);
   532  0736  3000               	movlw	0
   533  0737  2615               	fcall	_writeBit
   534                           
   535                           ;main.c: 85:             writeBit(1);
   536  0738  3001               	movlw	1
   537  0739  2615               	fcall	_writeBit
   538                           
   539                           ;main.c: 86:             writeBit(1);
   540  073A  3001               	movlw	1
   541  073B  2615               	fcall	_writeBit
   542                           
   543                           ;main.c: 87:             writeBit(0);
   544  073C  3000               	movlw	0
   545  073D  2615               	fcall	_writeBit
   546                           
   547                           ;main.c: 88:             writeBit(0);
   548  073E  3000               	movlw	0
   549  073F  2615               	fcall	_writeBit
   550                           
   551                           ;main.c: 89:             writeBit(0);
   552  0740  3000               	movlw	0
   553  0741  2615               	fcall	_writeBit
   554                           
   555                           ;main.c: 90:             writeBit(0);
   556  0742  3000               	movlw	0
   557  0743  2615               	fcall	_writeBit
   558                           
   559                           ;main.c: 91:             break;
   560  0744  2FF5               	goto	l50
   561  0745                     l823:	
   562                           
   563                           ;main.c: 93:             writeBit(1);
   564  0745  3001               	movlw	1
   565  0746  2615               	fcall	_writeBit
   566                           
   567                           ;main.c: 94:             writeBit(0);
   568  0747  3000               	movlw	0
   569  0748  2615               	fcall	_writeBit
   570                           
   571                           ;main.c: 95:             writeBit(0);
   572  0749  3000               	movlw	0
   573  074A  2615               	fcall	_writeBit
   574                           
   575                           ;main.c: 96:             writeBit(1);
   576  074B  3001               	movlw	1
   577  074C  2615               	fcall	_writeBit
   578                           
   579                           ;main.c: 97:             writeBit(1);
   580  074D  3001               	movlw	1
   581  074E  2615               	fcall	_writeBit
   582                           
   583                           ;main.c: 98:             writeBit(0);
   584  074F  3000               	movlw	0
   585  0750  2615               	fcall	_writeBit
   586                           
   587                           ;main.c: 99:             writeBit(0);
   588  0751  3000               	movlw	0
   589  0752  2615               	fcall	_writeBit
   590                           
   591                           ;main.c: 100:             writeBit(1);
   592  0753  3001               	movlw	1
   593  0754  2615               	fcall	_writeBit
   594                           
   595                           ;main.c: 101:             break;
   596  0755  2FF5               	goto	l50
   597  0756                     l825:	
   598                           
   599                           ;main.c: 103:             writeBit(1);
   600  0756  3001               	movlw	1
   601  0757  2615               	fcall	_writeBit
   602                           
   603                           ;main.c: 104:             writeBit(0);
   604  0758  3000               	movlw	0
   605  0759  2615               	fcall	_writeBit
   606                           
   607                           ;main.c: 105:             writeBit(0);
   608  075A  3000               	movlw	0
   609  075B  2615               	fcall	_writeBit
   610                           
   611                           ;main.c: 106:             writeBit(1);
   612  075C  3001               	movlw	1
   613  075D  2615               	fcall	_writeBit
   614                           
   615                           ;main.c: 107:             writeBit(0);
   616  075E  3000               	movlw	0
   617  075F  2615               	fcall	_writeBit
   618                           
   619                           ;main.c: 108:             writeBit(0);
   620  0760  3000               	movlw	0
   621  0761  2615               	fcall	_writeBit
   622                           
   623                           ;main.c: 109:             writeBit(1);
   624  0762  3001               	movlw	1
   625  0763  2615               	fcall	_writeBit
   626                           
   627                           ;main.c: 110:             writeBit(0);
   628  0764  3000               	movlw	0
   629  0765  2615               	fcall	_writeBit
   630                           
   631                           ;main.c: 111:             break;
   632  0766  2FF5               	goto	l50
   633  0767                     l827:	
   634                           
   635                           ;main.c: 113:             writeBit(1);
   636  0767  3001               	movlw	1
   637  0768  2615               	fcall	_writeBit
   638                           
   639                           ;main.c: 114:             writeBit(0);
   640  0769  3000               	movlw	0
   641  076A  2615               	fcall	_writeBit
   642                           
   643                           ;main.c: 115:             writeBit(0);
   644  076B  3000               	movlw	0
   645  076C  2615               	fcall	_writeBit
   646                           
   647                           ;main.c: 116:             writeBit(0);
   648  076D  3000               	movlw	0
   649  076E  2615               	fcall	_writeBit
   650                           
   651                           ;main.c: 117:             writeBit(0);
   652  076F  3000               	movlw	0
   653  0770  2615               	fcall	_writeBit
   654                           
   655                           ;main.c: 118:             writeBit(0);
   656  0771  3000               	movlw	0
   657  0772  2615               	fcall	_writeBit
   658                           
   659                           ;main.c: 119:             writeBit(1);
   660  0773  3001               	movlw	1
   661  0774  2615               	fcall	_writeBit
   662                           
   663                           ;main.c: 120:             writeBit(0);
   664  0775  3000               	movlw	0
   665  0776  2615               	fcall	_writeBit
   666                           
   667                           ;main.c: 121:             break;
   668  0777  2FF5               	goto	l50
   669  0778                     l829:	
   670                           
   671                           ;main.c: 123:             writeBit(1);
   672  0778  3001               	movlw	1
   673  0779  2615               	fcall	_writeBit
   674                           
   675                           ;main.c: 124:             writeBit(1);
   676  077A  3001               	movlw	1
   677  077B  2615               	fcall	_writeBit
   678                           
   679                           ;main.c: 125:             writeBit(1);
   680  077C  3001               	movlw	1
   681  077D  2615               	fcall	_writeBit
   682                           
   683                           ;main.c: 126:             writeBit(1);
   684  077E  3001               	movlw	1
   685  077F  2615               	fcall	_writeBit
   686                           
   687                           ;main.c: 127:             writeBit(1);
   688  0780  3001               	movlw	1
   689  0781  2615               	fcall	_writeBit
   690                           
   691                           ;main.c: 128:             writeBit(0);
   692  0782  3000               	movlw	0
   693  0783  2615               	fcall	_writeBit
   694                           
   695                           ;main.c: 129:             writeBit(0);
   696  0784  3000               	movlw	0
   697  0785  2615               	fcall	_writeBit
   698                           
   699                           ;main.c: 130:             writeBit(0);
   700  0786  3000               	movlw	0
   701  0787  2615               	fcall	_writeBit
   702                           
   703                           ;main.c: 131:             break;
   704  0788  2FF5               	goto	l50
   705  0789                     l831:	
   706                           
   707                           ;main.c: 133:             writeBit(1);
   708  0789  3001               	movlw	1
   709  078A  2615               	fcall	_writeBit
   710                           
   711                           ;main.c: 134:             writeBit(0);
   712  078B  3000               	movlw	0
   713  078C  2615               	fcall	_writeBit
   714                           
   715                           ;main.c: 135:             writeBit(0);
   716  078D  3000               	movlw	0
   717  078E  2615               	fcall	_writeBit
   718                           
   719                           ;main.c: 136:             writeBit(0);
   720  078F  3000               	movlw	0
   721  0790  2615               	fcall	_writeBit
   722                           
   723                           ;main.c: 137:             writeBit(0);
   724  0791  3000               	movlw	0
   725  0792  2615               	fcall	_writeBit
   726                           
   727                           ;main.c: 138:             writeBit(0);
   728  0793  3000               	movlw	0
   729  0794  2615               	fcall	_writeBit
   730                           
   731                           ;main.c: 139:             writeBit(0);
   732  0795  3000               	movlw	0
   733  0796  2615               	fcall	_writeBit
   734                           
   735                           ;main.c: 140:             writeBit(0);
   736  0797  3000               	movlw	0
   737  0798  2615               	fcall	_writeBit
   738                           
   739                           ;main.c: 141:             break;
   740  0799  2FF5               	goto	l50
   741  079A                     l833:	
   742                           
   743                           ;main.c: 143:             writeBit(1);
   744  079A  3001               	movlw	1
   745  079B  2615               	fcall	_writeBit
   746                           
   747                           ;main.c: 144:             writeBit(0);
   748  079C  3000               	movlw	0
   749  079D  2615               	fcall	_writeBit
   750                           
   751                           ;main.c: 145:             writeBit(0);
   752  079E  3000               	movlw	0
   753  079F  2615               	fcall	_writeBit
   754                           
   755                           ;main.c: 146:             writeBit(1);
   756  07A0  3001               	movlw	1
   757  07A1  2615               	fcall	_writeBit
   758                           
   759                           ;main.c: 147:             writeBit(0);
   760  07A2  3000               	movlw	0
   761  07A3  2615               	fcall	_writeBit
   762                           
   763                           ;main.c: 148:             writeBit(0);
   764  07A4  3000               	movlw	0
   765  07A5  2615               	fcall	_writeBit
   766                           
   767                           ;main.c: 149:             writeBit(0);
   768  07A6  3000               	movlw	0
   769  07A7  2615               	fcall	_writeBit
   770                           
   771                           ;main.c: 150:             writeBit(0);
   772  07A8  3000               	movlw	0
   773  07A9  2615               	fcall	_writeBit
   774                           
   775                           ;main.c: 151:             break;
   776  07AA  2FF5               	goto	l50
   777  07AB                     l835:	
   778                           
   779                           ;main.c: 153:             writeBit(1);
   780  07AB  3001               	movlw	1
   781  07AC  2615               	fcall	_writeBit
   782                           
   783                           ;main.c: 154:             writeBit(1);
   784  07AD  3001               	movlw	1
   785  07AE  2615               	fcall	_writeBit
   786                           
   787                           ;main.c: 155:             writeBit(0);
   788  07AF  3000               	movlw	0
   789  07B0  2615               	fcall	_writeBit
   790                           
   791                           ;main.c: 156:             writeBit(0);
   792  07B1  3000               	movlw	0
   793  07B2  2615               	fcall	_writeBit
   794                           
   795                           ;main.c: 157:             writeBit(0);
   796  07B3  3000               	movlw	0
   797  07B4  2615               	fcall	_writeBit
   798                           
   799                           ;main.c: 158:             writeBit(0);
   800  07B5  3000               	movlw	0
   801  07B6  2615               	fcall	_writeBit
   802                           
   803                           ;main.c: 159:             writeBit(0);
   804  07B7  3000               	movlw	0
   805  07B8  2615               	fcall	_writeBit
   806                           
   807                           ;main.c: 160:             writeBit(0);
   808  07B9  3000               	movlw	0
   809  07BA  2615               	fcall	_writeBit
   810                           
   811                           ;main.c: 161:             break;
   812  07BB  2FF5               	goto	l50
   813  07BC                     l837:	
   814                           
   815                           ;main.c: 163:             writeBit(1);
   816  07BC  3001               	movlw	1
   817  07BD  2615               	fcall	_writeBit
   818                           
   819                           ;main.c: 164:             writeBit(1);
   820  07BE  3001               	movlw	1
   821  07BF  2615               	fcall	_writeBit
   822                           
   823                           ;main.c: 165:             writeBit(1);
   824  07C0  3001               	movlw	1
   825  07C1  2615               	fcall	_writeBit
   826                           
   827                           ;main.c: 166:             writeBit(1);
   828  07C2  3001               	movlw	1
   829  07C3  2615               	fcall	_writeBit
   830                           
   831                           ;main.c: 167:             writeBit(1);
   832  07C4  3001               	movlw	1
   833  07C5  2615               	fcall	_writeBit
   834                           
   835                           ;main.c: 168:             writeBit(1);
   836  07C6  3001               	movlw	1
   837  07C7  2615               	fcall	_writeBit
   838                           
   839                           ;main.c: 169:             writeBit(1);
   840  07C8  3001               	movlw	1
   841  07C9  2615               	fcall	_writeBit
   842                           
   843                           ;main.c: 170:             writeBit(1);
   844  07CA  3001               	movlw	1
   845  07CB  2615               	fcall	_writeBit
   846                           
   847                           ;main.c: 171:             break;
   848  07CC  2FF5               	goto	l50
   849  07CD                     l841:	
   850                           
   851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   852                           ; Switch size 1, requested type "simple"
   853                           ; Number of cases is 1, Range of values is 0 to 0
   854                           ; switch strategies available:
   855                           ; Name         Instructions Cycles
   856                           ; simple_byte            4     3 (average)
   857                           ; direct_byte            7     6 (fixed)
   858                           ; jumptable            260     6 (fixed)
   859                           ;	Chosen strategy is simple_byte
   860  07CD  087C               	movf	writeNumber@num+1,w
   861  07CE  3A00               	xorlw	0	; case 0
   862  07CF  1903               	skipnz
   863  07D0  2FD2               	goto	l927
   864  07D1  2FF5               	goto	l50
   865  07D2                     l927:	
   866                           
   867                           ; Switch size 1, requested type "simple"
   868                           ; Number of cases is 11, Range of values is 0 to 10
   869                           ; switch strategies available:
   870                           ; Name         Instructions Cycles
   871                           ; direct_byte           17     6 (fixed)
   872                           ; simple_byte           34    18 (average)
   873                           ; jumptable            260     6 (fixed)
   874                           ;	Chosen strategy is simple_byte
   875  07D2  087B               	movf	writeNumber@num,w
   876  07D3  3A00               	xorlw	0	; case 0
   877  07D4  1903               	skipnz
   878  07D5  2FAB               	goto	l835
   879  07D6  3A01               	xorlw	1	; case 1
   880  07D7  1903               	skipnz
   881  07D8  2F12               	goto	l817
   882  07D9  3A03               	xorlw	3	; case 2
   883  07DA  1903               	skipnz
   884  07DB  2F23               	goto	l819
   885  07DC  3A01               	xorlw	1	; case 3
   886  07DD  1903               	skipnz
   887  07DE  2F34               	goto	l821
   888  07DF  3A07               	xorlw	7	; case 4
   889  07E0  1903               	skipnz
   890  07E1  2F45               	goto	l823
   891  07E2  3A01               	xorlw	1	; case 5
   892  07E3  1903               	skipnz
   893  07E4  2F56               	goto	l825
   894  07E5  3A03               	xorlw	3	; case 6
   895  07E6  1903               	skipnz
   896  07E7  2F67               	goto	l827
   897  07E8  3A01               	xorlw	1	; case 7
   898  07E9  1903               	skipnz
   899  07EA  2F78               	goto	l829
   900  07EB  3A0F               	xorlw	15	; case 8
   901  07EC  1903               	skipnz
   902  07ED  2F89               	goto	l831
   903  07EE  3A01               	xorlw	1	; case 9
   904  07EF  1903               	skipnz
   905  07F0  2F9A               	goto	l833
   906  07F1  3A03               	xorlw	3	; case 10
   907  07F2  1903               	skipnz
   908  07F3  2FBC               	goto	l837
   909  07F4  2FF5               	goto	l50
   910  07F5                     l50:	
   911                           
   912                           ;main.c: 174:     RB6 = 1;
   913  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   914  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   915  07F7  1706               	bsf	6,6	;volatile
   916                           
   917                           ;main.c: 175:     addMinute();
   918  07F8  2684               	fcall	_addMinute
   919  07F9  0008               	return
   920  07FA                     __end_of_writeNumber:	
   921                           
   922                           	psect	text2
   923  0615                     __ptext2:	
   924 ;; *************** function _writeBit *****************
   925 ;; Defined at:
   926 ;;		line 21 in file "main.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  _bit            1    wreg     unsigned char 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  _bit            1    0[COMMON] unsigned char 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   940 ;;      Params:         0       0       0       0
   941 ;;      Locals:         1       0       0       0
   942 ;;      Temps:          0       0       0       0
   943 ;;      Totals:         1       0       0       0
   944 ;;Total ram usage:        1 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_writeNumber
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           
   954                           ;psect for function _writeBit
   955  0615                     _writeBit:	
   956                           
   957                           ;incstack = 0
   958                           ; Regs used in _writeBit: [wreg]
   959                           ;writeBit@_bit stored from wreg
   960  0615  00FA               	movwf	writeBit@_bit
   961                           
   962                           ;main.c: 21: void writeBit(char _bit);main.c: 22: {;main.c: 23:   RB7 = 0;
   963  0616  1283               	bcf	3,5	;RP0=0, select bank0
   964  0617  1303               	bcf	3,6	;RP1=0, select bank0
   965  0618  1386               	bcf	6,7	;volatile
   966                           
   967                           ;main.c: 24:   RB5 = _bit;
   968  0619  1C7A               	btfss	writeBit@_bit,0
   969  061A  2E1F               	goto	u10
   970  061B  1283               	bcf	3,5	;RP0=0, select bank0
   971  061C  1303               	bcf	3,6	;RP1=0, select bank0
   972  061D  1686               	bsf	6,5	;volatile
   973  061E  2E22               	goto	u24
   974  061F                     u10:	
   975  061F  1283               	bcf	3,5	;RP0=0, select bank0
   976  0620  1303               	bcf	3,6	;RP1=0, select bank0
   977  0621  1286               	bcf	6,5	;volatile
   978  0622                     u24:	
   979                           
   980                           ;main.c: 25:   RB7 = 1;
   981  0622  1786               	bsf	6,7	;volatile
   982                           
   983                           ;main.c: 26:   RB7 = 0;
   984  0623  1386               	bcf	6,7	;volatile
   985  0624  0008               	return
   986  0625                     __end_of_writeBit:	
   987                           
   988                           	psect	text3
   989  0684                     __ptext3:	
   990 ;; *************** function _addMinute *****************
   991 ;; Defined at:
   992 ;;		line 29 in file "main.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;		None
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, btemp+1
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1006 ;;      Params:         0       0       0       0
  1007 ;;      Locals:         0       0       0       0
  1008 ;;      Temps:          0       0       0       0
  1009 ;;      Totals:         0       0       0       0
  1010 ;;Total ram usage:        0 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; This function calls:
  1013 ;;		Nothing
  1014 ;; This function is called by:
  1015 ;;		_writeNumber
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           
  1020                           ;psect for function _addMinute
  1021  0684                     _addMinute:	
  1022                           
  1023                           ;main.c: 30:     if (TMR0 == 255){
  1024                           
  1025                           ;incstack = 0
  1026                           ; Regs used in _addMinute: [wreg+status,2+status,0+btemp+1]
  1027  0684  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0685  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0686  0A01               	incf	1,w	;volatile
  1030  0687  1D03               	btfss	3,2
  1031  0688  0008               	return
  1032                           
  1033                           ;main.c: 31:         cnt = cnt + 1;
  1034  0689  0876               	movf	_cnt,w
  1035  068A  3E01               	addlw	1
  1036  068B  00F6               	movwf	_cnt
  1037  068C  0877               	movf	_cnt+1,w
  1038  068D  1803               	skipnc
  1039  068E  3E01               	addlw	1
  1040  068F  3E00               	addlw	0
  1041  0690  00F7               	movwf	_cnt+1
  1042                           
  1043                           ;main.c: 32:         TMR0 = 99;
  1044  0691  3063               	movlw	99
  1045  0692  0081               	movwf	1	;volatile
  1046                           
  1047                           ;main.c: 33:         if (cnt == 1500){
  1048  0693  30DC               	movlw	220
  1049  0694  0676               	xorwf	_cnt,w
  1050  0695  3005               	movlw	5
  1051  0696  1903               	skipnz
  1052  0697  0677               	xorwf	_cnt+1,w
  1053  0698  1D03               	btfss	3,2
  1054  0699  0008               	return
  1055                           
  1056                           ;main.c: 34:             cnt = 0;
  1057  069A  01F6               	clrf	_cnt
  1058  069B  01F7               	clrf	_cnt+1
  1059                           
  1060                           ;main.c: 35:             m2 = m2 + 1;
  1061  069C  0870               	movf	_m2,w
  1062  069D  3E01               	addlw	1
  1063  069E  00F0               	movwf	_m2
  1064  069F  0871               	movf	_m2+1,w
  1065  06A0  1803               	skipnc
  1066  06A1  3E01               	addlw	1
  1067  06A2  3E00               	addlw	0
  1068  06A3  00F1               	movwf	_m2+1
  1069                           
  1070                           ;main.c: 36:             if (m2 > 9){
  1071  06A4  0871               	movf	_m2+1,w
  1072  06A5  3A80               	xorlw	128
  1073  06A6  00FF               	movwf	127
  1074  06A7  3080               	movlw	128
  1075  06A8  027F               	subwf	127,w
  1076  06A9  1D03               	skipz
  1077  06AA  2EAD               	goto	u55
  1078  06AB  300A               	movlw	10
  1079  06AC  0270               	subwf	_m2,w
  1080  06AD                     u55:	
  1081  06AD  1C03               	skipc
  1082  06AE  2EB9               	goto	l681
  1083                           
  1084                           ;main.c: 37:                 m2 = 0;
  1085  06AF  01F0               	clrf	_m2
  1086  06B0  01F1               	clrf	_m2+1
  1087                           
  1088                           ;main.c: 38:                 m1 = m1 + 1;
  1089  06B1  0872               	movf	_m1,w
  1090  06B2  3E01               	addlw	1
  1091  06B3  00F2               	movwf	_m1
  1092  06B4  0873               	movf	_m1+1,w
  1093  06B5  1803               	skipnc
  1094  06B6  3E01               	addlw	1
  1095  06B7  3E00               	addlw	0
  1096  06B8  00F3               	movwf	_m1+1
  1097  06B9                     l681:	
  1098                           
  1099                           ;main.c: 40:             if (m1 > 5){
  1100  06B9  0873               	movf	_m1+1,w
  1101  06BA  3A80               	xorlw	128
  1102  06BB  00FF               	movwf	127
  1103  06BC  3080               	movlw	128
  1104  06BD  027F               	subwf	127,w
  1105  06BE  1D03               	skipz
  1106  06BF  2EC2               	goto	u65
  1107  06C0  3006               	movlw	6
  1108  06C1  0272               	subwf	_m1,w
  1109  06C2                     u65:	
  1110  06C2  1C03               	skipc
  1111  06C3  2ECE               	goto	l687
  1112                           
  1113                           ;main.c: 41:                 m1 = 0;
  1114  06C4  01F2               	clrf	_m1
  1115  06C5  01F3               	clrf	_m1+1
  1116                           
  1117                           ;main.c: 42:                 h2 = h2 + 1;
  1118  06C6  0874               	movf	_h2,w
  1119  06C7  3E01               	addlw	1
  1120  06C8  00F4               	movwf	_h2
  1121  06C9  0875               	movf	_h2+1,w
  1122  06CA  1803               	skipnc
  1123  06CB  3E01               	addlw	1
  1124  06CC  3E00               	addlw	0
  1125  06CD  00F5               	movwf	_h2+1
  1126  06CE                     l687:	
  1127                           
  1128                           ;main.c: 44:             if (h2 > 9){
  1129  06CE  0875               	movf	_h2+1,w
  1130  06CF  3A80               	xorlw	128
  1131  06D0  00FF               	movwf	127
  1132  06D1  3080               	movlw	128
  1133  06D2  027F               	subwf	127,w
  1134  06D3  1D03               	skipz
  1135  06D4  2ED7               	goto	u75
  1136  06D5  300A               	movlw	10
  1137  06D6  0274               	subwf	_h2,w
  1138  06D7                     u75:	
  1139  06D7  1C03               	skipc
  1140  06D8  2EE3               	goto	l693
  1141                           
  1142                           ;main.c: 45:                 h2 = 0;
  1143  06D9  01F4               	clrf	_h2
  1144  06DA  01F5               	clrf	_h2+1
  1145                           
  1146                           ;main.c: 46:                 h1 = h1 + 1;
  1147  06DB  0878               	movf	_h1,w
  1148  06DC  3E01               	addlw	1
  1149  06DD  00F8               	movwf	_h1
  1150  06DE  0879               	movf	_h1+1,w
  1151  06DF  1803               	skipnc
  1152  06E0  3E01               	addlw	1
  1153  06E1  3E00               	addlw	0
  1154  06E2  00F9               	movwf	_h1+1
  1155  06E3                     l693:	
  1156                           
  1157                           ;main.c: 48:             if (h1 >= 2){
  1158  06E3  0879               	movf	_h1+1,w
  1159  06E4  3A80               	xorlw	128
  1160  06E5  00FF               	movwf	127
  1161  06E6  3080               	movlw	128
  1162  06E7  027F               	subwf	127,w
  1163  06E8  1D03               	skipz
  1164  06E9  2EEC               	goto	u85
  1165  06EA  3002               	movlw	2
  1166  06EB  0278               	subwf	_h1,w
  1167  06EC                     u85:	
  1168  06EC  1C03               	skipc
  1169  06ED  0008               	return
  1170                           
  1171                           ;main.c: 49:                 if(h2 < 9 && h2 > 3 && h1 == 2){
  1172  06EE  0875               	movf	_h2+1,w
  1173  06EF  3A80               	xorlw	128
  1174  06F0  00FF               	movwf	127
  1175  06F1  3080               	movlw	128
  1176  06F2  027F               	subwf	127,w
  1177  06F3  1D03               	skipz
  1178  06F4  2EF7               	goto	u95
  1179  06F5  3009               	movlw	9
  1180  06F6  0274               	subwf	_h2,w
  1181  06F7                     u95:	
  1182  06F7  1803               	skipnc
  1183  06F8  0008               	return
  1184  06F9  0875               	movf	_h2+1,w
  1185  06FA  3A80               	xorlw	128
  1186  06FB  00FF               	movwf	127
  1187  06FC  3080               	movlw	128
  1188  06FD  027F               	subwf	127,w
  1189  06FE  1D03               	skipz
  1190  06FF  2F02               	goto	u105
  1191  0700  3004               	movlw	4
  1192  0701  0274               	subwf	_h2,w
  1193  0702                     u105:	
  1194  0702  1C03               	skipc
  1195  0703  0008               	return
  1196  0704  3002               	movlw	2
  1197  0705  0678               	xorwf	_h1,w
  1198  0706  0479               	iorwf	_h1+1,w
  1199  0707  1D03               	btfss	3,2
  1200  0708  0008               	return
  1201                           
  1202                           ;main.c: 50:                     h2 = 0;
  1203  0709  01F4               	clrf	_h2
  1204  070A  01F5               	clrf	_h2+1
  1205                           
  1206                           ;main.c: 51:                     h1 = 0;
  1207  070B  01F8               	clrf	_h1
  1208  070C  01F9               	clrf	_h1+1
  1209  070D  0008               	return
  1210  070E                     __end_of_addMinute:	
  1211                           ;main.c: 54:         }
  1212                           
  1213  007E                     btemp	set	126	;btemp
  1214  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_writeNumber
    _writeNumber->_writeBit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     645
                        _writeNumber
 ---------------------------------------------------------------------------------
 (1) _writeNumber                                          2     0      2     645
                                              1 COMMON     2     0      2
                          _addMinute
                           _writeBit
 ---------------------------------------------------------------------------------
 (2) _writeBit                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _addMinute                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _writeNumber
     _addMinute
     _writeBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      3       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       D      10        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jun 02 02:23:32 2019

            __CFG_CP$OFF 0000           writeNumber@num 007B                       l50 07F5  
                     u10 061F                       u24 0622                       u55 06AD  
                     u65 06C2                       u75 06D7                       u85 06EC  
                     u95 06F7                       _h1 0078                       _h2 0074  
                     _m1 0072                       _m2 0070                      l821 0734  
                    l831 0789                      l823 0745                      l681 06B9  
                    l833 079A                      l825 0756                      l817 0712  
                    l841 07CD                      l835 07AB                      l827 0767  
                    l819 0723                      l693 06E3                      l837 07BC  
                    l829 0778                      l687 06CE                      l927 07D2  
                    l859 0643                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RB6 0036                      _RB7 0037                      u105 0702  
           __CFG_CPD$OFF 0000                      _cnt 0076             __CFG_LVP$OFF 0000  
                   _TMR0 0001                     _main 0625                     btemp 007E  
                   start 0000                    ?_main 007A            __CFG_WDTE$OFF 0000  
            _writeNumber 070E                    _PORTB 0006                    _TRISB 0086  
          __CFG_PWRTE$ON 0000           __CFG_BOREN$OFF 0000                    status 0003  
                  wtemp0 007E           __CFG_MCLRE$OFF 0000          __initialization 07FA  
           __end_of_main 0684                   ??_main 007D         __end_of_writeBit 0625  
     __size_of_addMinute 008A  __end_of__initialization 07FE           __pcstackCOMMON 007A  
             __pnvCOMMON 0070               __pmaintext 0625        __end_of_addMinute 070E  
           ?_writeNumber 007B                ?_writeBit 007A                  __ptext1 070E  
                __ptext2 0615                  __ptext3 0684     end_of_initialization 07FE  
           writeBit@_bit 007A               ??_writeBit 007A      start_initialization 07FA  
   __size_of_writeNumber 00EC              __pbssCOMMON 0076                _addMinute 0684  
              ___latbits 0000        __size_of_writeBit 0010               ?_addMinute 007A  
            ??_addMinute 007A            __size_of_main 005F                 _writeBit 0615  
          ??_writeNumber 007D      __CFG_FOSC$INTOSCCLK 0000               _OPTION_REG 0081  
    __end_of_writeNumber 07FA  
