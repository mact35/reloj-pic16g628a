

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jun 07 20:15:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F628A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  008C                     	;# 
    79  008E                     	;# 
    80  0092                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009F                     	;# 
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0092                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009F                     	;# 
   125                           
   126                           	psect	idataBANK0
   127  05B0                     __pidataBANK0:	
   128                           
   129                           ;initializer for _acum
   130  05B0  3499               	retlw	153
   131  05B1  3414               	retlw	20
   132                           
   133                           ;initializer for _tiempo
   134  05B2  3493               	retlw	147
   135  05B3  3403               	retlw	3
   136                           
   137                           ;initializer for _m2
   138  05B4  3407               	retlw	7
   139                           
   140                           ;initializer for _m1
   141  05B5  3401               	retlw	1
   142                           
   143                           ;initializer for _h1
   144  05B6  3402               	retlw	2
   145  0006                     _PORTB	set	6
   146  0001                     _TMR0	set	1
   147  0034                     _RB4	set	52
   148  0033                     _RB3	set	51
   149  0032                     _RB2	set	50
   150  0031                     _RB1	set	49
   151  0036                     _RB6	set	54
   152  0030                     _RB0	set	48
   153  0035                     _RB5	set	53
   154  0037                     _RB7	set	55
   155  0081                     _OPTION_REG	set	129
   156  0086                     _TRISB	set	134
   157                           
   158                           ; #config settings
   159  0000                     
   160                           	psect	cinit
   161  07E9                     start_initialization:	
   162  07E9                     __initialization:	
   163                           
   164                           ; Initialize objects allocated to BANK0
   165  07E9  25B0               	fcall	__pidataBANK0	;fetch initializer
   166  07EA  00A7               	movwf	__pdataBANK0& (0+127)
   167  07EB  25B1               	fcall	__pidataBANK0+1	;fetch initializer
   168  07EC  00A8               	movwf	(__pdataBANK0+1)& (0+127)
   169  07ED  25B2               	fcall	__pidataBANK0+2	;fetch initializer
   170  07EE  00A9               	movwf	(__pdataBANK0+2)& (0+127)
   171  07EF  25B3               	fcall	__pidataBANK0+3	;fetch initializer
   172  07F0  00AA               	movwf	(__pdataBANK0+3)& (0+127)
   173  07F1  25B4               	fcall	__pidataBANK0+4	;fetch initializer
   174  07F2  00AB               	movwf	(__pdataBANK0+4)& (0+127)
   175  07F3  25B5               	fcall	__pidataBANK0+5	;fetch initializer
   176  07F4  00AC               	movwf	(__pdataBANK0+5)& (0+127)
   177  07F5  25B6               	fcall	__pidataBANK0+6	;fetch initializer
   178  07F6  00AD               	movwf	(__pdataBANK0+6)& (0+127)
   179                           
   180                           ; Clear objects allocated to BANK0
   181  07F7  01A0               	clrf	__pbssBANK0& (0+127)
   182  07F8  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   183  07F9  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   184  07FA  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   185  07FB  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   186  07FC  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   187  07FD  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   188  07FE                     end_of_initialization:	
   189                           ;End of C runtime variable initialization code
   190                           
   191  07FE                     __end_of__initialization:	
   192  07FE  0183               	clrf	3
   193  07FF  2E03               	ljmp	_main	;jump to C main() function
   194                           
   195                           	psect	bssBANK0
   196  0020                     __pbssBANK0:	
   197  0020                     _suma:	
   198  0020                     	ds	2
   199  0022                     _cnt:	
   200  0022                     	ds	2
   201  0024                     _ant:	
   202  0024                     	ds	1
   203  0025                     _blink:	
   204  0025                     	ds	1
   205  0026                     _h2:	
   206  0026                     	ds	1
   207                           
   208                           	psect	dataBANK0
   209  0027                     __pdataBANK0:	
   210  0027                     _acum:	
   211  0027                     	ds	2
   212  0029                     _tiempo:	
   213  0029                     	ds	2
   214  002B                     _m2:	
   215  002B                     	ds	1
   216  002C                     _m1:	
   217  002C                     	ds	1
   218  002D                     _h1:	
   219  002D                     	ds	1
   220                           
   221                           	psect	cstackCOMMON
   222  0070                     __pcstackCOMMON:	
   223  0070                     ?_writeBit:	
   224  0070                     ??_writeBit:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_addMinute:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_main:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?___lwdiv:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     writeBit@_bit:	
   237                           ; 2 bytes @ 0x0
   238                           
   239  0070                     ___lwdiv@divisor:	
   240                           ; 1 bytes @ 0x0
   241                           
   242                           
   243                           ; 2 bytes @ 0x0
   244  0070                     	ds	2
   245  0072                     ___lwdiv@dividend:	
   246                           
   247                           ; 2 bytes @ 0x2
   248  0072                     	ds	2
   249  0074                     ??___lwdiv:	
   250                           
   251                           ; 1 bytes @ 0x4
   252  0074                     	ds	1
   253  0075                     ___lwdiv@quotient:	
   254                           
   255                           ; 2 bytes @ 0x5
   256  0075                     	ds	2
   257  0077                     ___lwdiv@counter:	
   258                           
   259                           ; 1 bytes @ 0x7
   260  0077                     	ds	1
   261  0078                     ??_addMinute:	
   262                           
   263                           ; 1 bytes @ 0x8
   264  0078                     	ds	2
   265  007A                     ?_writeNumber:	
   266  007A                     writeNumber@point:	
   267                           ; 1 bytes @ 0xA
   268                           
   269                           
   270                           ; 1 bytes @ 0xA
   271  007A                     	ds	1
   272  007B                     ??_writeNumber:	
   273                           
   274                           ; 1 bytes @ 0xB
   275  007B                     	ds	2
   276  007D                     writeNumber@num:	
   277                           
   278                           ; 1 bytes @ 0xD
   279  007D                     	ds	1
   280                           
   281                           	psect	cstackBANK0
   282  002E                     __pcstackBANK0:	
   283  002E                     ??_main:	
   284                           
   285                           ; 1 bytes @ 0x0
   286  002E                     	ds	1
   287                           
   288                           	psect	maintext
   289  0603                     __pmaintext:	
   290 ;;
   291 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   292 ;;
   293 ;; *************** function _main *****************
   294 ;; Defined at:
   295 ;;		line 200 in file "main.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;		None
   298 ;; Auto vars:     Size  Location     Type
   299 ;;		None
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   304 ;; Tracked objects:
   305 ;;		On entry : B00/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   309 ;;      Params:         0       0       0       0
   310 ;;      Locals:         0       0       0       0
   311 ;;      Temps:          0       1       0       0
   312 ;;      Totals:         0       1       0       0
   313 ;;Total ram usage:        1 bytes
   314 ;; Hardware stack levels required when called:    3
   315 ;; This function calls:
   316 ;;		_writeNumber
   317 ;; This function is called by:
   318 ;;		Startup code after reset
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           
   323                           ;psect for function _main
   324  0603                     _main:	
   325                           
   326                           ;main.c: 201:     TRISB = 0b00000000;
   327                           
   328                           ;incstack = 0
   329                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   330  0603  1683               	bsf	3,5	;RP0=1, select bank1
   331  0604  1303               	bcf	3,6	;RP1=0, select bank1
   332  0605  0186               	clrf	6	;volatile
   333                           
   334                           ;main.c: 202:     PORTB = 0;
   335  0606  1283               	bcf	3,5	;RP0=0, select bank0
   336  0607  1303               	bcf	3,6	;RP1=0, select bank0
   337  0608  0186               	clrf	6	;volatile
   338                           
   339                           ;main.c: 203:     OPTION_REG = 0b00000111;
   340  0609  3007               	movlw	7
   341  060A  1683               	bsf	3,5	;RP0=1, select bank1
   342  060B  1303               	bcf	3,6	;RP1=0, select bank1
   343  060C  0081               	movwf	1	;volatile
   344  060D                     l984:	
   345                           
   346                           ;main.c: 206:         RB1 = 1;
   347  060D  1283               	bcf	3,5	;RP0=0, select bank0
   348  060E  1303               	bcf	3,6	;RP1=0, select bank0
   349  060F  1486               	bsf	6,1	;volatile
   350                           
   351                           ;main.c: 207:         RB2 = 0;
   352  0610  1106               	bcf	6,2	;volatile
   353                           
   354                           ;main.c: 208:         RB3 = 0;
   355  0611  1186               	bcf	6,3	;volatile
   356                           
   357                           ;main.c: 209:         RB4 = 0;
   358  0612  1206               	bcf	6,4	;volatile
   359                           
   360                           ;main.c: 210:         writeNumber(h1,1);
   361  0613  01FA               	clrf	writeNumber@point
   362  0614  0AFA               	incf	writeNumber@point,f
   363  0615  082D               	movf	_h1,w
   364  0616  26F9               	fcall	_writeNumber
   365                           
   366                           ;main.c: 211:         writeNumber(10,1);
   367  0617  01FA               	clrf	writeNumber@point
   368  0618  0AFA               	incf	writeNumber@point,f
   369  0619  300A               	movlw	10
   370  061A  26F9               	fcall	_writeNumber
   371                           
   372                           ;main.c: 212:         RB1 = 0;
   373  061B  1283               	bcf	3,5	;RP0=0, select bank0
   374  061C  1303               	bcf	3,6	;RP1=0, select bank0
   375  061D  1086               	bcf	6,1	;volatile
   376                           
   377                           ;main.c: 213:         RB2 = 1;
   378  061E  1506               	bsf	6,2	;volatile
   379                           
   380                           ;main.c: 214:         RB3 = 0;
   381  061F  1186               	bcf	6,3	;volatile
   382                           
   383                           ;main.c: 215:         RB4 = 0;
   384  0620  1206               	bcf	6,4	;volatile
   385                           
   386                           ;main.c: 216:         writeNumber(h2,blink);
   387  0621  0825               	movf	_blink,w
   388  0622  00AE               	movwf	??_main
   389  0623  082E               	movf	??_main,w
   390  0624  00FA               	movwf	writeNumber@point
   391  0625  0826               	movf	_h2,w
   392  0626  26F9               	fcall	_writeNumber
   393                           
   394                           ;main.c: 217:         writeNumber(10,1);
   395  0627  01FA               	clrf	writeNumber@point
   396  0628  0AFA               	incf	writeNumber@point,f
   397  0629  300A               	movlw	10
   398  062A  26F9               	fcall	_writeNumber
   399                           
   400                           ;main.c: 218:         RB1 = 0;
   401  062B  1283               	bcf	3,5	;RP0=0, select bank0
   402  062C  1303               	bcf	3,6	;RP1=0, select bank0
   403  062D  1086               	bcf	6,1	;volatile
   404                           
   405                           ;main.c: 219:         RB2 = 0;
   406  062E  1106               	bcf	6,2	;volatile
   407                           
   408                           ;main.c: 220:         RB3 = 1;
   409  062F  1586               	bsf	6,3	;volatile
   410                           
   411                           ;main.c: 221:         RB4 = 0;
   412  0630  1206               	bcf	6,4	;volatile
   413                           
   414                           ;main.c: 222:         writeNumber(m1,blink);
   415  0631  0825               	movf	_blink,w
   416  0632  00AE               	movwf	??_main
   417  0633  082E               	movf	??_main,w
   418  0634  00FA               	movwf	writeNumber@point
   419  0635  082C               	movf	_m1,w
   420  0636  26F9               	fcall	_writeNumber
   421                           
   422                           ;main.c: 223:         writeNumber(10,1);
   423  0637  01FA               	clrf	writeNumber@point
   424  0638  0AFA               	incf	writeNumber@point,f
   425  0639  300A               	movlw	10
   426  063A  26F9               	fcall	_writeNumber
   427                           
   428                           ;main.c: 224:         RB1 = 0;
   429  063B  1283               	bcf	3,5	;RP0=0, select bank0
   430  063C  1303               	bcf	3,6	;RP1=0, select bank0
   431  063D  1086               	bcf	6,1	;volatile
   432                           
   433                           ;main.c: 225:         RB2 = 0;
   434  063E  1106               	bcf	6,2	;volatile
   435                           
   436                           ;main.c: 226:         RB3 = 0;
   437  063F  1186               	bcf	6,3	;volatile
   438                           
   439                           ;main.c: 227:         RB4 = 1;
   440  0640  1606               	bsf	6,4	;volatile
   441                           
   442                           ;main.c: 228:         writeNumber(m2,1);
   443  0641  01FA               	clrf	writeNumber@point
   444  0642  0AFA               	incf	writeNumber@point,f
   445  0643  082B               	movf	_m2,w
   446  0644  26F9               	fcall	_writeNumber
   447                           
   448                           ;main.c: 229:         writeNumber(10,1);
   449  0645  01FA               	clrf	writeNumber@point
   450  0646  0AFA               	incf	writeNumber@point,f
   451  0647  300A               	movlw	10
   452  0648  26F9               	fcall	_writeNumber
   453  0649  2E0D               	goto	l984
   454  064A                     __end_of_main:	
   455                           
   456                           	psect	text1
   457  06F9                     __ptext1:	
   458 ;; *************** function _writeNumber *****************
   459 ;; Defined at:
   460 ;;		line 80 in file "main.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;  num             1    wreg     unsigned char 
   463 ;;  point           1   10[COMMON] unsigned char 
   464 ;; Auto vars:     Size  Location     Type
   465 ;;  num             1   13[COMMON] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   475 ;;      Params:         1       0       0       0
   476 ;;      Locals:         1       0       0       0
   477 ;;      Temps:          2       0       0       0
   478 ;;      Totals:         4       0       0       0
   479 ;;Total ram usage:        4 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; Hardware stack levels required when called:    2
   482 ;; This function calls:
   483 ;;		_addMinute
   484 ;;		_writeBit
   485 ;; This function is called by:
   486 ;;		_main
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           
   491                           ;psect for function _writeNumber
   492  06F9                     _writeNumber:	
   493                           
   494                           ;incstack = 0
   495                           ; Regs used in _writeNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   496                           ;writeNumber@num stored from wreg
   497  06F9  00FD               	movwf	writeNumber@num
   498                           
   499                           ;main.c: 81:     RB6 = 0;
   500  06FA  1283               	bcf	3,5	;RP0=0, select bank0
   501  06FB  1303               	bcf	3,6	;RP1=0, select bank0
   502  06FC  1306               	bcf	6,6	;volatile
   503                           
   504                           ;main.c: 82:     switch (num)
   505  06FD  2FB9               	goto	l972
   506  06FE                     l948:	
   507                           
   508                           ;main.c: 85:             writeBit(point);
   509  06FE  087A               	movf	writeNumber@point,w
   510  06FF  25B7               	fcall	_writeBit
   511                           
   512                           ;main.c: 86:             writeBit(1);
   513  0700  3001               	movlw	1
   514  0701  25B7               	fcall	_writeBit
   515                           
   516                           ;main.c: 87:             writeBit(1);
   517  0702  3001               	movlw	1
   518  0703  25B7               	fcall	_writeBit
   519                           
   520                           ;main.c: 88:             writeBit(1);
   521  0704  3001               	movlw	1
   522  0705  25B7               	fcall	_writeBit
   523                           
   524                           ;main.c: 89:             writeBit(1);
   525  0706  3001               	movlw	1
   526  0707  25B7               	fcall	_writeBit
   527                           
   528                           ;main.c: 90:             writeBit(0);
   529  0708  3000               	movlw	0
   530  0709  25B7               	fcall	_writeBit
   531                           
   532                           ;main.c: 91:             writeBit(0);
   533  070A  3000               	movlw	0
   534  070B  25B7               	fcall	_writeBit
   535                           
   536                           ;main.c: 92:             writeBit(1);
   537  070C  3001               	movlw	1
   538  070D  25B7               	fcall	_writeBit
   539                           
   540                           ;main.c: 93:             break;
   541  070E  2FE4               	goto	l65
   542  070F                     l950:	
   543                           
   544                           ;main.c: 95:             writeBit(point);
   545  070F  087A               	movf	writeNumber@point,w
   546  0710  25B7               	fcall	_writeBit
   547                           
   548                           ;main.c: 96:             writeBit(0);
   549  0711  3000               	movlw	0
   550  0712  25B7               	fcall	_writeBit
   551                           
   552                           ;main.c: 97:             writeBit(1);
   553  0713  3001               	movlw	1
   554  0714  25B7               	fcall	_writeBit
   555                           
   556                           ;main.c: 98:             writeBit(0);
   557  0715  3000               	movlw	0
   558  0716  25B7               	fcall	_writeBit
   559                           
   560                           ;main.c: 99:             writeBit(0);
   561  0717  3000               	movlw	0
   562  0718  25B7               	fcall	_writeBit
   563                           
   564                           ;main.c: 100:             writeBit(1);
   565  0719  3001               	movlw	1
   566  071A  25B7               	fcall	_writeBit
   567                           
   568                           ;main.c: 101:             writeBit(0);
   569  071B  3000               	movlw	0
   570  071C  25B7               	fcall	_writeBit
   571                           
   572                           ;main.c: 102:             writeBit(0);
   573  071D  3000               	movlw	0
   574  071E  25B7               	fcall	_writeBit
   575                           
   576                           ;main.c: 103:             break;
   577  071F  2FE4               	goto	l65
   578  0720                     l952:	
   579                           
   580                           ;main.c: 105:             writeBit(point);
   581  0720  087A               	movf	writeNumber@point,w
   582  0721  25B7               	fcall	_writeBit
   583                           
   584                           ;main.c: 106:             writeBit(0);
   585  0722  3000               	movlw	0
   586  0723  25B7               	fcall	_writeBit
   587                           
   588                           ;main.c: 107:             writeBit(1);
   589  0724  3001               	movlw	1
   590  0725  25B7               	fcall	_writeBit
   591                           
   592                           ;main.c: 108:             writeBit(1);
   593  0726  3001               	movlw	1
   594  0727  25B7               	fcall	_writeBit
   595                           
   596                           ;main.c: 109:             writeBit(0);
   597  0728  3000               	movlw	0
   598  0729  25B7               	fcall	_writeBit
   599                           
   600                           ;main.c: 110:             writeBit(0);
   601  072A  3000               	movlw	0
   602  072B  25B7               	fcall	_writeBit
   603                           
   604                           ;main.c: 111:             writeBit(0);
   605  072C  3000               	movlw	0
   606  072D  25B7               	fcall	_writeBit
   607                           
   608                           ;main.c: 112:             writeBit(0);
   609  072E  3000               	movlw	0
   610  072F  25B7               	fcall	_writeBit
   611                           
   612                           ;main.c: 113:             break;
   613  0730  2FE4               	goto	l65
   614  0731                     l954:	
   615                           
   616                           ;main.c: 115:             writeBit(point);
   617  0731  087A               	movf	writeNumber@point,w
   618  0732  25B7               	fcall	_writeBit
   619                           
   620                           ;main.c: 116:             writeBit(0);
   621  0733  3000               	movlw	0
   622  0734  25B7               	fcall	_writeBit
   623                           
   624                           ;main.c: 117:             writeBit(0);
   625  0735  3000               	movlw	0
   626  0736  25B7               	fcall	_writeBit
   627                           
   628                           ;main.c: 118:             writeBit(1);
   629  0737  3001               	movlw	1
   630  0738  25B7               	fcall	_writeBit
   631                           
   632                           ;main.c: 119:             writeBit(1);
   633  0739  3001               	movlw	1
   634  073A  25B7               	fcall	_writeBit
   635                           
   636                           ;main.c: 120:             writeBit(0);
   637  073B  3000               	movlw	0
   638  073C  25B7               	fcall	_writeBit
   639                           
   640                           ;main.c: 121:             writeBit(0);
   641  073D  3000               	movlw	0
   642  073E  25B7               	fcall	_writeBit
   643                           
   644                           ;main.c: 122:             writeBit(1);
   645  073F  3001               	movlw	1
   646  0740  25B7               	fcall	_writeBit
   647                           
   648                           ;main.c: 123:             break;
   649  0741  2FE4               	goto	l65
   650  0742                     l956:	
   651                           
   652                           ;main.c: 125:             writeBit(point);
   653  0742  087A               	movf	writeNumber@point,w
   654  0743  25B7               	fcall	_writeBit
   655                           
   656                           ;main.c: 126:             writeBit(0);
   657  0744  3000               	movlw	0
   658  0745  25B7               	fcall	_writeBit
   659                           
   660                           ;main.c: 127:             writeBit(0);
   661  0746  3000               	movlw	0
   662  0747  25B7               	fcall	_writeBit
   663                           
   664                           ;main.c: 128:             writeBit(1);
   665  0748  3001               	movlw	1
   666  0749  25B7               	fcall	_writeBit
   667                           
   668                           ;main.c: 129:             writeBit(0);
   669  074A  3000               	movlw	0
   670  074B  25B7               	fcall	_writeBit
   671                           
   672                           ;main.c: 130:             writeBit(0);
   673  074C  3000               	movlw	0
   674  074D  25B7               	fcall	_writeBit
   675                           
   676                           ;main.c: 131:             writeBit(1);
   677  074E  3001               	movlw	1
   678  074F  25B7               	fcall	_writeBit
   679                           
   680                           ;main.c: 132:             writeBit(0);
   681  0750  3000               	movlw	0
   682  0751  25B7               	fcall	_writeBit
   683                           
   684                           ;main.c: 133:             break;
   685  0752  2FE4               	goto	l65
   686  0753                     l958:	
   687                           
   688                           ;main.c: 135:             writeBit(point);
   689  0753  087A               	movf	writeNumber@point,w
   690  0754  25B7               	fcall	_writeBit
   691                           
   692                           ;main.c: 136:             writeBit(0);
   693  0755  3000               	movlw	0
   694  0756  25B7               	fcall	_writeBit
   695                           
   696                           ;main.c: 137:             writeBit(0);
   697  0757  3000               	movlw	0
   698  0758  25B7               	fcall	_writeBit
   699                           
   700                           ;main.c: 138:             writeBit(0);
   701  0759  3000               	movlw	0
   702  075A  25B7               	fcall	_writeBit
   703                           
   704                           ;main.c: 139:             writeBit(0);
   705  075B  3000               	movlw	0
   706  075C  25B7               	fcall	_writeBit
   707                           
   708                           ;main.c: 140:             writeBit(0);
   709  075D  3000               	movlw	0
   710  075E  25B7               	fcall	_writeBit
   711                           
   712                           ;main.c: 141:             writeBit(1);
   713  075F  3001               	movlw	1
   714  0760  25B7               	fcall	_writeBit
   715                           
   716                           ;main.c: 142:             writeBit(0);
   717  0761  3000               	movlw	0
   718  0762  25B7               	fcall	_writeBit
   719                           
   720                           ;main.c: 143:             break;
   721  0763  2FE4               	goto	l65
   722  0764                     l960:	
   723                           
   724                           ;main.c: 145:             writeBit(point);
   725  0764  087A               	movf	writeNumber@point,w
   726  0765  25B7               	fcall	_writeBit
   727                           
   728                           ;main.c: 146:             writeBit(1);
   729  0766  3001               	movlw	1
   730  0767  25B7               	fcall	_writeBit
   731                           
   732                           ;main.c: 147:             writeBit(1);
   733  0768  3001               	movlw	1
   734  0769  25B7               	fcall	_writeBit
   735                           
   736                           ;main.c: 148:             writeBit(1);
   737  076A  3001               	movlw	1
   738  076B  25B7               	fcall	_writeBit
   739                           
   740                           ;main.c: 149:             writeBit(1);
   741  076C  3001               	movlw	1
   742  076D  25B7               	fcall	_writeBit
   743                           
   744                           ;main.c: 150:             writeBit(0);
   745  076E  3000               	movlw	0
   746  076F  25B7               	fcall	_writeBit
   747                           
   748                           ;main.c: 151:             writeBit(0);
   749  0770  3000               	movlw	0
   750  0771  25B7               	fcall	_writeBit
   751                           
   752                           ;main.c: 152:             writeBit(0);
   753  0772  3000               	movlw	0
   754  0773  25B7               	fcall	_writeBit
   755                           
   756                           ;main.c: 153:             break;
   757  0774  2FE4               	goto	l65
   758  0775                     l962:	
   759                           
   760                           ;main.c: 155:             writeBit(point);
   761  0775  087A               	movf	writeNumber@point,w
   762  0776  25B7               	fcall	_writeBit
   763                           
   764                           ;main.c: 156:             writeBit(0);
   765  0777  3000               	movlw	0
   766  0778  25B7               	fcall	_writeBit
   767                           
   768                           ;main.c: 157:             writeBit(0);
   769  0779  3000               	movlw	0
   770  077A  25B7               	fcall	_writeBit
   771                           
   772                           ;main.c: 158:             writeBit(0);
   773  077B  3000               	movlw	0
   774  077C  25B7               	fcall	_writeBit
   775                           
   776                           ;main.c: 159:             writeBit(0);
   777  077D  3000               	movlw	0
   778  077E  25B7               	fcall	_writeBit
   779                           
   780                           ;main.c: 160:             writeBit(0);
   781  077F  3000               	movlw	0
   782  0780  25B7               	fcall	_writeBit
   783                           
   784                           ;main.c: 161:             writeBit(0);
   785  0781  3000               	movlw	0
   786  0782  25B7               	fcall	_writeBit
   787                           
   788                           ;main.c: 162:             writeBit(0);
   789  0783  3000               	movlw	0
   790  0784  25B7               	fcall	_writeBit
   791                           
   792                           ;main.c: 163:             break;
   793  0785  2FE4               	goto	l65
   794  0786                     l964:	
   795                           
   796                           ;main.c: 165:             writeBit(point);
   797  0786  087A               	movf	writeNumber@point,w
   798  0787  25B7               	fcall	_writeBit
   799                           
   800                           ;main.c: 166:             writeBit(0);
   801  0788  3000               	movlw	0
   802  0789  25B7               	fcall	_writeBit
   803                           
   804                           ;main.c: 167:             writeBit(0);
   805  078A  3000               	movlw	0
   806  078B  25B7               	fcall	_writeBit
   807                           
   808                           ;main.c: 168:             writeBit(1);
   809  078C  3001               	movlw	1
   810  078D  25B7               	fcall	_writeBit
   811                           
   812                           ;main.c: 169:             writeBit(0);
   813  078E  3000               	movlw	0
   814  078F  25B7               	fcall	_writeBit
   815                           
   816                           ;main.c: 170:             writeBit(0);
   817  0790  3000               	movlw	0
   818  0791  25B7               	fcall	_writeBit
   819                           
   820                           ;main.c: 171:             writeBit(0);
   821  0792  3000               	movlw	0
   822  0793  25B7               	fcall	_writeBit
   823                           
   824                           ;main.c: 172:             writeBit(0);
   825  0794  3000               	movlw	0
   826  0795  25B7               	fcall	_writeBit
   827                           
   828                           ;main.c: 173:             break;
   829  0796  2FE4               	goto	l65
   830  0797                     l966:	
   831                           
   832                           ;main.c: 175:             writeBit(point);
   833  0797  087A               	movf	writeNumber@point,w
   834  0798  25B7               	fcall	_writeBit
   835                           
   836                           ;main.c: 176:             writeBit(1);
   837  0799  3001               	movlw	1
   838  079A  25B7               	fcall	_writeBit
   839                           
   840                           ;main.c: 177:             writeBit(0);
   841  079B  3000               	movlw	0
   842  079C  25B7               	fcall	_writeBit
   843                           
   844                           ;main.c: 178:             writeBit(0);
   845  079D  3000               	movlw	0
   846  079E  25B7               	fcall	_writeBit
   847                           
   848                           ;main.c: 179:             writeBit(0);
   849  079F  3000               	movlw	0
   850  07A0  25B7               	fcall	_writeBit
   851                           
   852                           ;main.c: 180:             writeBit(0);
   853  07A1  3000               	movlw	0
   854  07A2  25B7               	fcall	_writeBit
   855                           
   856                           ;main.c: 181:             writeBit(0);
   857  07A3  3000               	movlw	0
   858  07A4  25B7               	fcall	_writeBit
   859                           
   860                           ;main.c: 182:             writeBit(0);
   861  07A5  3000               	movlw	0
   862  07A6  25B7               	fcall	_writeBit
   863                           
   864                           ;main.c: 183:             break;
   865  07A7  2FE4               	goto	l65
   866  07A8                     l968:	
   867                           
   868                           ;main.c: 185:             writeBit(1);
   869  07A8  3001               	movlw	1
   870  07A9  25B7               	fcall	_writeBit
   871                           
   872                           ;main.c: 186:             writeBit(1);
   873  07AA  3001               	movlw	1
   874  07AB  25B7               	fcall	_writeBit
   875                           
   876                           ;main.c: 187:             writeBit(1);
   877  07AC  3001               	movlw	1
   878  07AD  25B7               	fcall	_writeBit
   879                           
   880                           ;main.c: 188:             writeBit(1);
   881  07AE  3001               	movlw	1
   882  07AF  25B7               	fcall	_writeBit
   883                           
   884                           ;main.c: 189:             writeBit(1);
   885  07B0  3001               	movlw	1
   886  07B1  25B7               	fcall	_writeBit
   887                           
   888                           ;main.c: 190:             writeBit(1);
   889  07B2  3001               	movlw	1
   890  07B3  25B7               	fcall	_writeBit
   891                           
   892                           ;main.c: 191:             writeBit(1);
   893  07B4  3001               	movlw	1
   894  07B5  25B7               	fcall	_writeBit
   895                           
   896                           ;main.c: 192:             writeBit(1);
   897  07B6  3001               	movlw	1
   898  07B7  25B7               	fcall	_writeBit
   899                           
   900                           ;main.c: 193:             break;
   901  07B8  2FE4               	goto	l65
   902  07B9                     l972:	
   903  07B9  087D               	movf	writeNumber@num,w
   904  07BA  00FB               	movwf	??_writeNumber
   905  07BB  01FC               	clrf	??_writeNumber+1
   906                           
   907                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   908                           ; Switch size 1, requested type "simple"
   909                           ; Number of cases is 1, Range of values is 0 to 0
   910                           ; switch strategies available:
   911                           ; Name         Instructions Cycles
   912                           ; simple_byte            4     3 (average)
   913                           ; direct_byte            7     6 (fixed)
   914                           ; jumptable            260     6 (fixed)
   915                           ;	Chosen strategy is simple_byte
   916  07BC  087C               	movf	??_writeNumber+1,w
   917  07BD  3A00               	xorlw	0	; case 0
   918  07BE  1903               	skipnz
   919  07BF  2FC1               	goto	l1052
   920  07C0  2FE4               	goto	l65
   921  07C1                     l1052:	
   922                           
   923                           ; Switch size 1, requested type "simple"
   924                           ; Number of cases is 11, Range of values is 0 to 10
   925                           ; switch strategies available:
   926                           ; Name         Instructions Cycles
   927                           ; direct_byte           17     6 (fixed)
   928                           ; simple_byte           34    18 (average)
   929                           ; jumptable            260     6 (fixed)
   930                           ;	Chosen strategy is simple_byte
   931  07C1  087B               	movf	??_writeNumber,w
   932  07C2  3A00               	xorlw	0	; case 0
   933  07C3  1903               	skipnz
   934  07C4  2F97               	goto	l966
   935  07C5  3A01               	xorlw	1	; case 1
   936  07C6  1903               	skipnz
   937  07C7  2EFE               	goto	l948
   938  07C8  3A03               	xorlw	3	; case 2
   939  07C9  1903               	skipnz
   940  07CA  2F0F               	goto	l950
   941  07CB  3A01               	xorlw	1	; case 3
   942  07CC  1903               	skipnz
   943  07CD  2F20               	goto	l952
   944  07CE  3A07               	xorlw	7	; case 4
   945  07CF  1903               	skipnz
   946  07D0  2F31               	goto	l954
   947  07D1  3A01               	xorlw	1	; case 5
   948  07D2  1903               	skipnz
   949  07D3  2F42               	goto	l956
   950  07D4  3A03               	xorlw	3	; case 6
   951  07D5  1903               	skipnz
   952  07D6  2F53               	goto	l958
   953  07D7  3A01               	xorlw	1	; case 7
   954  07D8  1903               	skipnz
   955  07D9  2F64               	goto	l960
   956  07DA  3A0F               	xorlw	15	; case 8
   957  07DB  1903               	skipnz
   958  07DC  2F75               	goto	l962
   959  07DD  3A01               	xorlw	1	; case 9
   960  07DE  1903               	skipnz
   961  07DF  2F86               	goto	l964
   962  07E0  3A03               	xorlw	3	; case 10
   963  07E1  1903               	skipnz
   964  07E2  2FA8               	goto	l968
   965  07E3  2FE4               	goto	l65
   966  07E4                     l65:	
   967                           
   968                           ;main.c: 196:     RB6 = 1;
   969  07E4  1283               	bcf	3,5	;RP0=0, select bank0
   970  07E5  1303               	bcf	3,6	;RP1=0, select bank0
   971  07E6  1706               	bsf	6,6	;volatile
   972                           
   973                           ;main.c: 197:     addMinute();
   974  07E7  264A               	fcall	_addMinute
   975  07E8  0008               	return
   976  07E9                     __end_of_writeNumber:	
   977                           
   978                           	psect	text2
   979  05B7                     __ptext2:	
   980 ;; *************** function _writeBit *****************
   981 ;; Defined at:
   982 ;;		line 26 in file "main.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  _bit            1    wreg     unsigned char 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  _bit            1    0[COMMON] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   996 ;;      Params:         0       0       0       0
   997 ;;      Locals:         1       0       0       0
   998 ;;      Temps:          0       0       0       0
   999 ;;      Totals:         1       0       0       0
  1000 ;;Total ram usage:        1 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_writeNumber
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _writeBit
  1011  05B7                     _writeBit:	
  1012                           
  1013                           ;incstack = 0
  1014                           ; Regs used in _writeBit: [wreg]
  1015                           ;writeBit@_bit stored from wreg
  1016  05B7  00F0               	movwf	writeBit@_bit
  1017                           
  1018                           ;main.c: 26: void writeBit(char _bit);main.c: 27: {;main.c: 28:   RB7 = 0;
  1019  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  1020  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  1021  05BA  1386               	bcf	6,7	;volatile
  1022                           
  1023                           ;main.c: 29:   RB5 = _bit;
  1024  05BB  1C70               	btfss	writeBit@_bit,0
  1025  05BC  2DC1               	goto	u310
  1026  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1027  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1028  05BF  1686               	bsf	6,5	;volatile
  1029  05C0  2DC4               	goto	u324
  1030  05C1                     u310:	
  1031  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1032  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  1033  05C3  1286               	bcf	6,5	;volatile
  1034  05C4                     u324:	
  1035                           
  1036                           ;main.c: 30:   RB7 = 1;
  1037  05C4  1786               	bsf	6,7	;volatile
  1038                           
  1039                           ;main.c: 31:   RB7 = 0;
  1040  05C5  1386               	bcf	6,7	;volatile
  1041  05C6  0008               	return
  1042  05C7                     __end_of_writeBit:	
  1043                           
  1044                           	psect	text3
  1045  064A                     __ptext3:	
  1046 ;; *************** function _addMinute *****************
  1047 ;; Defined at:
  1048 ;;		line 34 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, status,0, pclath, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1062 ;;      Params:         0       0       0       0
  1063 ;;      Locals:         0       0       0       0
  1064 ;;      Temps:          2       0       0       0
  1065 ;;      Totals:         2       0       0       0
  1066 ;;Total ram usage:        2 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    1
  1069 ;; This function calls:
  1070 ;;		___lwdiv
  1071 ;; This function is called by:
  1072 ;;		_writeNumber
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           
  1077                           ;psect for function _addMinute
  1078  064A                     _addMinute:	
  1079                           
  1080                           ;main.c: 35:     if (TMR0 == 255){
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _addMinute: [wreg+status,2+status,0+pclath+cstack]
  1084  064A  1283               	bcf	3,5	;RP0=0, select bank0
  1085  064B  1303               	bcf	3,6	;RP1=0, select bank0
  1086  064C  0A01               	incf	1,w	;volatile
  1087  064D  1D03               	btfss	3,2
  1088  064E  0008               	return
  1089                           
  1090                           ;main.c: 36:         cnt = cnt + 1;
  1091  064F  0822               	movf	_cnt,w
  1092  0650  3E01               	addlw	1
  1093  0651  00A2               	movwf	_cnt
  1094  0652  0823               	movf	_cnt+1,w
  1095  0653  1803               	skipnc
  1096  0654  3E01               	addlw	1
  1097  0655  3E00               	addlw	0
  1098  0656  00A3               	movwf	_cnt+1
  1099                           
  1100                           ;main.c: 37:         if (ant != (cnt/10)){
  1101  0657  300A               	movlw	10
  1102  0658  00F0               	movwf	___lwdiv@divisor
  1103  0659  3000               	movlw	0
  1104  065A  00F1               	movwf	___lwdiv@divisor+1
  1105  065B  0823               	movf	_cnt+1,w
  1106  065C  00F3               	movwf	___lwdiv@dividend+1
  1107  065D  0822               	movf	_cnt,w
  1108  065E  00F2               	movwf	___lwdiv@dividend
  1109  065F  25C7               	fcall	___lwdiv
  1110  0660  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0661  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0662  0824               	movf	_ant,w
  1113  0663  00F8               	movwf	??_addMinute
  1114  0664  01F9               	clrf	??_addMinute+1
  1115  0665  0871               	movf	?___lwdiv+1,w
  1116  0666  0679               	xorwf	??_addMinute+1,w
  1117  0667  1D03               	skipz
  1118  0668  2E6B               	goto	u345
  1119  0669  0870               	movf	?___lwdiv,w
  1120  066A  0678               	xorwf	??_addMinute,w
  1121  066B                     u345:	
  1122  066B  1903               	skipnz
  1123  066C  2E85               	goto	l902
  1124                           
  1125                           ;main.c: 38:             ant = cnt/10;
  1126  066D  300A               	movlw	10
  1127  066E  00F0               	movwf	___lwdiv@divisor
  1128  066F  3000               	movlw	0
  1129  0670  00F1               	movwf	___lwdiv@divisor+1
  1130  0671  0823               	movf	_cnt+1,w
  1131  0672  00F3               	movwf	___lwdiv@dividend+1
  1132  0673  0822               	movf	_cnt,w
  1133  0674  00F2               	movwf	___lwdiv@dividend
  1134  0675  25C7               	fcall	___lwdiv
  1135  0676  0870               	movf	?___lwdiv,w
  1136  0677  00F8               	movwf	??_addMinute
  1137  0678  0878               	movf	??_addMinute,w
  1138  0679  1283               	bcf	3,5	;RP0=0, select bank0
  1139  067A  1303               	bcf	3,6	;RP1=0, select bank0
  1140  067B  00A4               	movwf	_ant
  1141                           
  1142                           ;main.c: 39:             blink = !blink;
  1143  067C  0825               	movf	_blink,w
  1144  067D  1D03               	btfss	3,2
  1145  067E  2E81               	goto	u350
  1146  067F  3001               	movlw	1
  1147  0680  2E82               	goto	u360
  1148  0681                     u350:	
  1149  0681  3000               	movlw	0
  1150  0682                     u360:	
  1151  0682  00F8               	movwf	??_addMinute
  1152  0683  0878               	movf	??_addMinute,w
  1153  0684  00A5               	movwf	_blink
  1154  0685                     l902:	
  1155                           
  1156                           ;main.c: 41:         if (cnt >= tiempo){
  1157  0685  082A               	movf	_tiempo+1,w
  1158  0686  0223               	subwf	_cnt+1,w
  1159  0687  1D03               	skipz
  1160  0688  2E8B               	goto	u375
  1161  0689  0829               	movf	_tiempo,w
  1162  068A  0222               	subwf	_cnt,w
  1163  068B                     u375:	
  1164  068B  1C03               	skipc
  1165  068C  0008               	return
  1166                           
  1167                           ;main.c: 42:             suma = suma + acum;
  1168  068D  0827               	movf	_acum,w
  1169  068E  0720               	addwf	_suma,w
  1170  068F  00A0               	movwf	_suma
  1171  0690  0828               	movf	_acum+1,w
  1172  0691  1803               	skipnc
  1173  0692  0A28               	incf	_acum+1,w
  1174  0693  0721               	addwf	_suma+1,w
  1175  0694  00A1               	movwf	_suma+1
  1176                           
  1177                           ;main.c: 44:             if (tiempo == 900){
  1178  0695  3084               	movlw	132
  1179  0696  0629               	xorwf	_tiempo,w
  1180  0697  3003               	movlw	3
  1181  0698  1903               	skipnz
  1182  0699  062A               	xorwf	_tiempo+1,w
  1183  069A  1D03               	btfss	3,2
  1184  069B  2EA4               	goto	l53
  1185                           
  1186                           ;main.c: 45:                 tiempo = 915;
  1187  069C  3093               	movlw	147
  1188  069D  00A9               	movwf	_tiempo
  1189  069E  3003               	movlw	3
  1190  069F  00AA               	movwf	_tiempo+1
  1191                           
  1192                           ;main.c: 46:                 acum = 5273;
  1193  06A0  3099               	movlw	153
  1194  06A1  00A7               	movwf	_acum
  1195  06A2  3014               	movlw	20
  1196  06A3  00A8               	movwf	_acum+1
  1197  06A4                     l53:	
  1198                           ;main.c: 47:             }
  1199                           
  1200                           
  1201                           ;main.c: 48:             if (suma >= 10000){
  1202  06A4  3027               	movlw	39
  1203  06A5  0221               	subwf	_suma+1,w
  1204  06A6  3010               	movlw	16
  1205  06A7  1903               	skipnz
  1206  06A8  0220               	subwf	_suma,w
  1207  06A9  1C03               	skipc
  1208  06AA  2EC1               	goto	l914
  1209                           
  1210                           ;main.c: 49:                 suma = suma - 10000;
  1211  06AB  0820               	movf	_suma,w
  1212  06AC  3EF0               	addlw	240
  1213  06AD  00A0               	movwf	_suma
  1214  06AE  0821               	movf	_suma+1,w
  1215  06AF  1803               	skipnc
  1216  06B0  3E01               	addlw	1
  1217  06B1  3ED8               	addlw	216
  1218  06B2  00A1               	movwf	_suma+1
  1219                           
  1220                           ;main.c: 50:                 tiempo = 900;
  1221  06B3  3084               	movlw	132
  1222  06B4  00A9               	movwf	_tiempo
  1223  06B5  3003               	movlw	3
  1224  06B6  00AA               	movwf	_tiempo+1
  1225                           
  1226                           ;main.c: 51:                 acum = acum - 711;
  1227  06B7  0827               	movf	_acum,w
  1228  06B8  3E39               	addlw	57
  1229  06B9  00A7               	movwf	_acum
  1230  06BA  0828               	movf	_acum+1,w
  1231  06BB  1803               	skipnc
  1232  06BC  3E01               	addlw	1
  1233  06BD  3EFD               	addlw	253
  1234  06BE  00A8               	movwf	_acum+1
  1235                           
  1236                           ;main.c: 52:                 RB0 = !RB0;
  1237  06BF  3001               	movlw	1
  1238  06C0  0686               	xorwf	6,f
  1239  06C1                     l914:	
  1240                           
  1241                           ;main.c: 55:             cnt = 0;
  1242  06C1  01A2               	clrf	_cnt
  1243  06C2  01A3               	clrf	_cnt+1
  1244                           
  1245                           ;main.c: 56:             m2 = m2 + 1;
  1246  06C3  082B               	movf	_m2,w
  1247  06C4  3E01               	addlw	1
  1248  06C5  00F8               	movwf	??_addMinute
  1249  06C6  0878               	movf	??_addMinute,w
  1250  06C7  00AB               	movwf	_m2
  1251                           
  1252                           ;main.c: 57:             if (m2 > 9){
  1253  06C8  300A               	movlw	10
  1254  06C9  022B               	subwf	_m2,w
  1255  06CA  1C03               	skipc
  1256  06CB  2ED2               	goto	l924
  1257                           
  1258                           ;main.c: 58:                 m2 = 0;
  1259  06CC  01AB               	clrf	_m2
  1260                           
  1261                           ;main.c: 59:                 m1 = m1 + 1;
  1262  06CD  082C               	movf	_m1,w
  1263  06CE  3E01               	addlw	1
  1264  06CF  00F8               	movwf	??_addMinute
  1265  06D0  0878               	movf	??_addMinute,w
  1266  06D1  00AC               	movwf	_m1
  1267  06D2                     l924:	
  1268                           
  1269                           ;main.c: 61:             if (m1 > 5){
  1270  06D2  3006               	movlw	6
  1271  06D3  022C               	subwf	_m1,w
  1272  06D4  1C03               	skipc
  1273  06D5  2EDC               	goto	l930
  1274                           
  1275                           ;main.c: 62:                 m1 = 0;
  1276  06D6  01AC               	clrf	_m1
  1277                           
  1278                           ;main.c: 63:                 h2 = h2 + 1;
  1279  06D7  0826               	movf	_h2,w
  1280  06D8  3E01               	addlw	1
  1281  06D9  00F8               	movwf	??_addMinute
  1282  06DA  0878               	movf	??_addMinute,w
  1283  06DB  00A6               	movwf	_h2
  1284  06DC                     l930:	
  1285                           
  1286                           ;main.c: 65:             if (h2 > 9){
  1287  06DC  300A               	movlw	10
  1288  06DD  0226               	subwf	_h2,w
  1289  06DE  1C03               	skipc
  1290  06DF  2EE6               	goto	l936
  1291                           
  1292                           ;main.c: 66:                 h2 = 0;
  1293  06E0  01A6               	clrf	_h2
  1294                           
  1295                           ;main.c: 67:                 h1 = h1 + 1;
  1296  06E1  082D               	movf	_h1,w
  1297  06E2  3E01               	addlw	1
  1298  06E3  00F8               	movwf	??_addMinute
  1299  06E4  0878               	movf	??_addMinute,w
  1300  06E5  00AD               	movwf	_h1
  1301  06E6                     l936:	
  1302                           
  1303                           ;main.c: 69:             if (h1 >= 2){
  1304  06E6  3002               	movlw	2
  1305  06E7  022D               	subwf	_h1,w
  1306  06E8  1C03               	skipc
  1307  06E9  0008               	return
  1308                           
  1309                           ;main.c: 70:                 if(h2 < 9 && h2 > 3 && h1 == 2){
  1310  06EA  3009               	movlw	9
  1311  06EB  0226               	subwf	_h2,w
  1312  06EC  1803               	skipnc
  1313  06ED  0008               	return
  1314  06EE  3004               	movlw	4
  1315  06EF  0226               	subwf	_h2,w
  1316  06F0  1C03               	skipc
  1317  06F1  0008               	return
  1318  06F2  3002               	movlw	2
  1319  06F3  062D               	xorwf	_h1,w
  1320  06F4  1D03               	btfss	3,2
  1321  06F5  0008               	return
  1322                           
  1323                           ;main.c: 71:                     h2 = 0;
  1324  06F6  01A6               	clrf	_h2
  1325                           
  1326                           ;main.c: 72:                     h1 = 0;
  1327  06F7  01AD               	clrf	_h1
  1328  06F8  0008               	return
  1329  06F9                     __end_of_addMinute:	
  1330                           ;main.c: 75:         }
  1331                           
  1332                           
  1333                           	psect	text4
  1334  05C7                     __ptext4:	
  1335 ;; *************** function ___lwdiv *****************
  1336 ;; Defined at:
  1337 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  divisor         2    0[COMMON] unsigned int 
  1340 ;;  dividend        2    2[COMMON] unsigned int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  quotient        2    5[COMMON] unsigned int 
  1343 ;;  counter         1    7[COMMON] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2    0[COMMON] unsigned int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1353 ;;      Params:         4       0       0       0
  1354 ;;      Locals:         3       0       0       0
  1355 ;;      Temps:          1       0       0       0
  1356 ;;      Totals:         8       0       0       0
  1357 ;;Total ram usage:        8 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_addMinute
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           
  1367                           ;psect for function ___lwdiv
  1368  05C7                     ___lwdiv:	
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1372  05C7  01F5               	clrf	___lwdiv@quotient
  1373  05C8  01F6               	clrf	___lwdiv@quotient+1
  1374  05C9  0870               	movf	___lwdiv@divisor,w
  1375  05CA  0471               	iorwf	___lwdiv@divisor+1,w
  1376  05CB  1903               	btfsc	3,2
  1377  05CC  2DFE               	goto	l886
  1378  05CD  01F7               	clrf	___lwdiv@counter
  1379  05CE  0AF7               	incf	___lwdiv@counter,f
  1380  05CF                     l874:	
  1381  05CF  1BF1               	btfsc	___lwdiv@divisor+1,7
  1382  05D0  2DDD               	goto	l876
  1383  05D1  3001               	movlw	1
  1384  05D2                     u255:	
  1385  05D2  1003               	clrc
  1386  05D3  0DF0               	rlf	___lwdiv@divisor,f
  1387  05D4  0DF1               	rlf	___lwdiv@divisor+1,f
  1388  05D5  3EFF               	addlw	-1
  1389  05D6  1D03               	skipz
  1390  05D7  2DD2               	goto	u255
  1391  05D8  3001               	movlw	1
  1392  05D9  00F4               	movwf	??___lwdiv
  1393  05DA  0874               	movf	??___lwdiv,w
  1394  05DB  07F7               	addwf	___lwdiv@counter,f
  1395  05DC  2DCF               	goto	l874
  1396  05DD                     l876:	
  1397  05DD  3001               	movlw	1
  1398  05DE                     u275:	
  1399  05DE  1003               	clrc
  1400  05DF  0DF5               	rlf	___lwdiv@quotient,f
  1401  05E0  0DF6               	rlf	___lwdiv@quotient+1,f
  1402  05E1  3EFF               	addlw	-1
  1403  05E2  1D03               	skipz
  1404  05E3  2DDE               	goto	u275
  1405  05E4  0871               	movf	___lwdiv@divisor+1,w
  1406  05E5  0273               	subwf	___lwdiv@dividend+1,w
  1407  05E6  1D03               	skipz
  1408  05E7  2DEA               	goto	u285
  1409  05E8  0870               	movf	___lwdiv@divisor,w
  1410  05E9  0272               	subwf	___lwdiv@dividend,w
  1411  05EA                     u285:	
  1412  05EA  1C03               	skipc
  1413  05EB  2DF3               	goto	l882
  1414  05EC  0870               	movf	___lwdiv@divisor,w
  1415  05ED  02F2               	subwf	___lwdiv@dividend,f
  1416  05EE  0871               	movf	___lwdiv@divisor+1,w
  1417  05EF  1C03               	skipc
  1418  05F0  03F3               	decf	___lwdiv@dividend+1,f
  1419  05F1  02F3               	subwf	___lwdiv@dividend+1,f
  1420  05F2  1475               	bsf	___lwdiv@quotient,0
  1421  05F3                     l882:	
  1422  05F3  3001               	movlw	1
  1423  05F4                     u295:	
  1424  05F4  1003               	clrc
  1425  05F5  0CF1               	rrf	___lwdiv@divisor+1,f
  1426  05F6  0CF0               	rrf	___lwdiv@divisor,f
  1427  05F7  3EFF               	addlw	-1
  1428  05F8  1D03               	skipz
  1429  05F9  2DF4               	goto	u295
  1430  05FA  3001               	movlw	1
  1431  05FB  02F7               	subwf	___lwdiv@counter,f
  1432  05FC  1D03               	btfss	3,2
  1433  05FD  2DDD               	goto	l876
  1434  05FE                     l886:	
  1435  05FE  0876               	movf	___lwdiv@quotient+1,w
  1436  05FF  00F1               	movwf	?___lwdiv+1
  1437  0600  0875               	movf	___lwdiv@quotient,w
  1438  0601  00F0               	movwf	?___lwdiv
  1439  0602  0008               	return
  1440  0603                     __end_of___lwdiv:	
  1441  007E                     btemp	set	126	;btemp
  1442  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      1      15
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_writeNumber
    _writeNumber->_addMinute
    _addMinute->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1338
                                              0 BANK0      1     1      0
                        _writeNumber
 ---------------------------------------------------------------------------------
 (1) _writeNumber                                          4     3      1    1338
                                             10 COMMON     4     3      1
                          _addMinute
                           _writeBit
 ---------------------------------------------------------------------------------
 (2) _writeBit                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _addMinute                                            2     2      0     466
                                              8 COMMON     2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _writeNumber
     _addMinute
       ___lwdiv
     _writeBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1       F       3       18.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1D      10        0.0%
ABS                  0      0      1D       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jun 07 20:15:32 2019

            __CFG_CP$OFF 0000           writeNumber@num 007D                       l53 06A4  
                     l65 07E4                       _h1 002D                       _h2 0026  
                     _m1 002C                       _m2 002B                      l902 0685  
                    l930 06DC                      l914 06C1                      l924 06D2  
                    l950 070F                      l936 06E6                      l960 0764  
                    l952 0720                      l882 05F3                      l874 05CF  
                    l962 0775                      l954 0731                      l876 05DD  
                    l964 0786                      l956 0742                      l948 06FE  
                    l972 07B9                      l886 05FE                      l966 0797  
                    l958 0753                      l968 07A8                      l984 060D  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RB6 0036                      _RB7 0037                      u310 05C1  
                    u324 05C4                      u350 0681                      u255 05D2  
                    u360 0682                      u345 066B             __CFG_CPD$OFF 0000  
                    u275 05DE                      u285 05EA                      u295 05F4  
                    u375 068B                      _ant 0024                      _cnt 0022  
           __CFG_LVP$OFF 0000                     l1052 07C1         writeNumber@point 007A  
                   _TMR0 0001                     _acum 0027                     _main 0603  
                   _suma 0020                     btemp 007E                     start 0000  
                  ?_main 0070            __CFG_WDTE$OFF 0000          __end_of___lwdiv 0603  
            _writeNumber 06F9                    _PORTB 0006                    _TRISB 0086  
          __CFG_PWRTE$ON 0000                    _blink 0025           __CFG_BOREN$OFF 0000  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 07E9             __end_of_main 064A                   ??_main 002E  
              ??___lwdiv 0074                   _tiempo 0029         __end_of_writeBit 05C7  
     __size_of_addMinute 00AF  __end_of__initialization 07FE           __pcstackCOMMON 0070  
           __pidataBANK0 05B0               __pbssBANK0 0020               __pmaintext 0603  
      __end_of_addMinute 06F9             ?_writeNumber 007A                  ___lwdiv 05C7  
              ?_writeBit 0070                  __ptext1 06F9                  __ptext2 05B7  
                __ptext3 064A                  __ptext4 05C7     end_of_initialization 07FE  
           writeBit@_bit 0070               ??_writeBit 0070      start_initialization 07E9  
   __size_of_writeNumber 00F0              __pdataBANK0 0027                _addMinute 064A  
              ___latbits 0000            __pcstackBANK0 002E         ___lwdiv@dividend 0072  
               ?___lwdiv 0070        __size_of_writeBit 0010               ?_addMinute 0070  
       ___lwdiv@quotient 0075         __size_of___lwdiv 003C              ??_addMinute 0078  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077            __size_of_main 0047  
               _writeBit 05B7            ??_writeNumber 007B      __CFG_FOSC$INTOSCCLK 0000  
             _OPTION_REG 0081      __end_of_writeNumber 07E9  
