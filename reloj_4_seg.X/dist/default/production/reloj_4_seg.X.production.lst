

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jun 01 20:34:23 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.05
    14                           ; Generated 20/12/2018 GMT
    15                           ; 
    16                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F628A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000E                     	;# 
    58  000E                     	;# 
    59  000F                     	;# 
    60  0010                     	;# 
    61  0011                     	;# 
    62  0012                     	;# 
    63  0015                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  0086                     	;# 
    74  008C                     	;# 
    75  008E                     	;# 
    76  0092                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009F                     	;# 
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  008C                     	;# 
   112  008E                     	;# 
   113  0092                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009F                     	;# 
   121  0006                     _PORTB	set	6
   122  0034                     _RB4	set	52
   123  0033                     _RB3	set	51
   124  0032                     _RB2	set	50
   125  0031                     _RB1	set	49
   126  0036                     _RB6	set	54
   127  0035                     _RB5	set	53
   128  0037                     _RB7	set	55
   129  0086                     _TRISB	set	134
   130                           
   131                           ; #config settings
   132  0000                     
   133                           	psect	cinit
   134  07FC                     start_initialization:	
   135  07FC                     __initialization:	
   136                           
   137                           ; Clear objects allocated to COMMON
   138  07FC  01F6               	clrf	__pbssCOMMON& (0+127)
   139  07FD  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   140  07FE                     end_of_initialization:	
   141                           ;End of C runtime variable initialization code
   142                           
   143  07FE                     __end_of__initialization:	
   144  07FE  0183               	clrf	3
   145  07FF  2EDC               	ljmp	_main	;jump to C main() function
   146                           
   147                           	psect	bssCOMMON
   148  0076                     __pbssCOMMON:	
   149  0076                     _x:	
   150  0076                     	ds	2
   151                           
   152                           	psect	cstackCOMMON
   153  0070                     __pcstackCOMMON:	
   154  0070                     ?_writeBit:	
   155  0070                     ??_writeBit:	
   156                           ; 1 bytes @ 0x0
   157                           
   158  0070                     ?_write:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0070                     ?_main:	
   162                           ; 1 bytes @ 0x0
   163                           
   164  0070                     writeBit@_bit:	
   165                           ; 1 bytes @ 0x0
   166                           
   167                           
   168                           ; 1 bytes @ 0x0
   169  0070                     	ds	1
   170  0071                     ?_writeNumber:	
   171  0071                     writeNumber@num:	
   172                           ; 1 bytes @ 0x1
   173                           
   174                           
   175                           ; 2 bytes @ 0x1
   176  0071                     	ds	2
   177  0073                     ??_writeNumber:	
   178  0073                     ??_write:	
   179                           ; 1 bytes @ 0x3
   180                           
   181                           
   182                           ; 1 bytes @ 0x3
   183  0073                     	ds	3
   184  0076                     ??_main:	
   185                           
   186                           	psect	maintext
   187  06DC                     __pmaintext:	
   188                           ; 1 bytes @ 0x6
   189 ;;
   190 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   191 ;;
   192 ;; *************** function _main *****************
   193 ;; Defined at:
   194 ;;		line 148 in file "main.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;		None
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   203 ;; Tracked objects:
   204 ;;		On entry : B00/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   208 ;;      Params:         0       0       0       0
   209 ;;      Locals:         0       0       0       0
   210 ;;      Temps:          0       0       0       0
   211 ;;      Totals:         0       0       0       0
   212 ;;Total ram usage:        0 bytes
   213 ;; Hardware stack levels required when called:    3
   214 ;; This function calls:
   215 ;;		_write
   216 ;; This function is called by:
   217 ;;		Startup code after reset
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           
   222                           ;psect for function _main
   223  06DC                     _main:	
   224                           
   225                           ;main.c: 149:     TRISB=0b00000000;
   226                           
   227                           ;incstack = 0
   228                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   229  06DC  1683               	bsf	3,5	;RP0=1, select bank1
   230  06DD  1303               	bcf	3,6	;RP1=0, select bank1
   231  06DE  0186               	clrf	6	;volatile
   232                           
   233                           ;main.c: 150:     PORTB = 0;
   234  06DF  1283               	bcf	3,5	;RP0=0, select bank0
   235  06E0  1303               	bcf	3,6	;RP1=0, select bank0
   236  06E1  0186               	clrf	6	;volatile
   237  06E2                     l803:	
   238                           
   239                           ;main.c: 153:         RB1 = 1;
   240  06E2  1283               	bcf	3,5	;RP0=0, select bank0
   241  06E3  1303               	bcf	3,6	;RP1=0, select bank0
   242  06E4  1486               	bsf	6,1	;volatile
   243                           
   244                           ;main.c: 154:         RB2 = 0;
   245  06E5  1106               	bcf	6,2	;volatile
   246                           
   247                           ;main.c: 155:         RB3 = 0;
   248  06E6  1186               	bcf	6,3	;volatile
   249                           
   250                           ;main.c: 156:         RB4 = 0;
   251  06E7  1206               	bcf	6,4	;volatile
   252                           
   253                           ;main.c: 157:         write();
   254  06E8  26FF               	fcall	_write
   255                           
   256                           ;main.c: 158:         RB1 = 0;
   257  06E9  1283               	bcf	3,5	;RP0=0, select bank0
   258  06EA  1303               	bcf	3,6	;RP1=0, select bank0
   259  06EB  1086               	bcf	6,1	;volatile
   260                           
   261                           ;main.c: 159:         RB2 = 1;
   262  06EC  1506               	bsf	6,2	;volatile
   263                           
   264                           ;main.c: 160:         RB3 = 0;
   265  06ED  1186               	bcf	6,3	;volatile
   266                           
   267                           ;main.c: 161:         RB4 = 0;
   268  06EE  1206               	bcf	6,4	;volatile
   269                           
   270                           ;main.c: 162:         write();
   271  06EF  26FF               	fcall	_write
   272                           
   273                           ;main.c: 163:         RB1 = 0;
   274  06F0  1283               	bcf	3,5	;RP0=0, select bank0
   275  06F1  1303               	bcf	3,6	;RP1=0, select bank0
   276  06F2  1086               	bcf	6,1	;volatile
   277                           
   278                           ;main.c: 164:         RB2 = 0;
   279  06F3  1106               	bcf	6,2	;volatile
   280                           
   281                           ;main.c: 165:         RB3 = 1;
   282  06F4  1586               	bsf	6,3	;volatile
   283                           
   284                           ;main.c: 166:         RB4 = 0;
   285  06F5  1206               	bcf	6,4	;volatile
   286                           
   287                           ;main.c: 167:         write();
   288  06F6  26FF               	fcall	_write
   289                           
   290                           ;main.c: 168:         RB1 = 0;
   291  06F7  1283               	bcf	3,5	;RP0=0, select bank0
   292  06F8  1303               	bcf	3,6	;RP1=0, select bank0
   293  06F9  1086               	bcf	6,1	;volatile
   294                           
   295                           ;main.c: 169:         RB2 = 0;
   296  06FA  1106               	bcf	6,2	;volatile
   297                           
   298                           ;main.c: 170:         RB3 = 0;
   299  06FB  1186               	bcf	6,3	;volatile
   300                           
   301                           ;main.c: 171:         RB4 = 1;
   302  06FC  1606               	bsf	6,4	;volatile
   303                           
   304                           ;main.c: 172:         write();
   305  06FD  26FF               	fcall	_write
   306  06FE  2EE2               	goto	l803
   307  06FF                     __end_of_main:	
   308                           
   309                           	psect	text1
   310  06FF                     __ptext1:	
   311 ;; *************** function _write *****************
   312 ;; Defined at:
   313 ;;		line 137 in file "main.c"
   314 ;; Parameters:    Size  Location     Type
   315 ;;		None
   316 ;; Auto vars:     Size  Location     Type
   317 ;;		None
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   322 ;; Tracked objects:
   323 ;;		On entry : 0/0
   324 ;;		On exit  : 0/0
   325 ;;		Unchanged: 0/0
   326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   327 ;;      Params:         0       0       0       0
   328 ;;      Locals:         0       0       0       0
   329 ;;      Temps:          3       0       0       0
   330 ;;      Totals:         3       0       0       0
   331 ;;Total ram usage:        3 bytes
   332 ;; Hardware stack levels used:    1
   333 ;; Hardware stack levels required when called:    2
   334 ;; This function calls:
   335 ;;		_writeNumber
   336 ;; This function is called by:
   337 ;;		_main
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           
   342                           ;psect for function _write
   343  06FF                     _write:	
   344                           
   345                           ;main.c: 139:     for(x=0; x<10; x++)
   346                           
   347                           ;incstack = 0
   348                           ; Regs used in _write: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   349  06FF  01F6               	clrf	_x
   350  0700  01F7               	clrf	_x+1
   351  0701                     l43:	
   352                           
   353                           ;main.c: 140:     {;main.c: 141:         RB6 = 0;
   354  0701  1283               	bcf	3,5	;RP0=0, select bank0
   355  0702  1303               	bcf	3,6	;RP1=0, select bank0
   356  0703  1306               	bcf	6,6	;volatile
   357                           
   358                           ;main.c: 142:         writeNumber(x);
   359  0704  0877               	movf	_x+1,w
   360  0705  00F2               	movwf	writeNumber@num+1
   361  0706  0876               	movf	_x,w
   362  0707  00F1               	movwf	writeNumber@num
   363  0708  272B               	fcall	_writeNumber
   364                           
   365                           ;main.c: 143:         RB6 = 1;
   366  0709  1283               	bcf	3,5	;RP0=0, select bank0
   367  070A  1303               	bcf	3,6	;RP1=0, select bank0
   368  070B  1706               	bsf	6,6	;volatile
   369                           
   370                           ;main.c: 144:         _delay((unsigned long)((500)*(4000000/4000.0)));
   371  070C  3003               	movlw	3
   372  070D  00F5               	movwf	??_write+2
   373  070E  308A               	movlw	138
   374  070F  00F4               	movwf	??_write+1
   375  0710  3055               	movlw	85
   376  0711  00F3               	movwf	??_write
   377  0712                     u57:	
   378  0712  0BF3               	decfsz	??_write,f
   379  0713  2F12               	goto	u57
   380  0714  0BF4               	decfsz	??_write+1,f
   381  0715  2F12               	goto	u57
   382  0716  0BF5               	decfsz	??_write+2,f
   383  0717  2F12               	goto	u57
   384  0718  2F19               	nop2
   385                           
   386                           ;main.c: 145:     }
   387  0719  3001               	movlw	1
   388  071A  07F6               	addwf	_x,f
   389  071B  1803               	skipnc
   390  071C  0AF7               	incf	_x+1,f
   391  071D  3000               	movlw	0
   392  071E  07F7               	addwf	_x+1,f
   393  071F  0877               	movf	_x+1,w
   394  0720  3A80               	xorlw	128
   395  0721  00FF               	movwf	127
   396  0722  3080               	movlw	128
   397  0723  027F               	subwf	127,w
   398  0724  1D03               	skipz
   399  0725  2F28               	goto	u45
   400  0726  300A               	movlw	10
   401  0727  0276               	subwf	_x,w
   402  0728                     u45:	
   403  0728  1803               	btfsc	3,0
   404  0729  0008               	return
   405  072A  2F01               	goto	l43
   406  072B                     __end_of_write:	
   407                           
   408                           	psect	text2
   409  072B                     __ptext2:	
   410 ;; *************** function _writeNumber *****************
   411 ;; Defined at:
   412 ;;		line 29 in file "main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;  num             2    1[COMMON] int 
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   426 ;;      Params:         2       0       0       0
   427 ;;      Locals:         0       0       0       0
   428 ;;      Temps:          0       0       0       0
   429 ;;      Totals:         2       0       0       0
   430 ;;Total ram usage:        2 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    1
   433 ;; This function calls:
   434 ;;		_writeBit
   435 ;; This function is called by:
   436 ;;		_write
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _writeNumber
   442  072B                     _writeNumber:	
   443                           
   444                           ;main.c: 30:     switch (num)
   445                           
   446                           ;incstack = 0
   447                           ; Regs used in _writeNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   448  072B  2FD6               	goto	l779
   449  072C                     l757:	
   450                           
   451                           ;main.c: 33:             writeBit(1);
   452  072C  3001               	movlw	1
   453  072D  26CC               	fcall	_writeBit
   454                           
   455                           ;main.c: 34:             writeBit(1);
   456  072E  3001               	movlw	1
   457  072F  26CC               	fcall	_writeBit
   458                           
   459                           ;main.c: 35:             writeBit(1);
   460  0730  3001               	movlw	1
   461  0731  26CC               	fcall	_writeBit
   462                           
   463                           ;main.c: 36:             writeBit(1);
   464  0732  3001               	movlw	1
   465  0733  26CC               	fcall	_writeBit
   466                           
   467                           ;main.c: 37:             writeBit(1);
   468  0734  3001               	movlw	1
   469  0735  26CC               	fcall	_writeBit
   470                           
   471                           ;main.c: 38:             writeBit(0);
   472  0736  3000               	movlw	0
   473  0737  26CC               	fcall	_writeBit
   474                           
   475                           ;main.c: 39:             writeBit(0);
   476  0738  3000               	movlw	0
   477  0739  26CC               	fcall	_writeBit
   478                           
   479                           ;main.c: 40:             writeBit(1);
   480  073A  3001               	movlw	1
   481  073B  26CC               	fcall	_writeBit
   482                           
   483                           ;main.c: 41:             break;
   484  073C  0008               	return
   485  073D                     l759:	
   486                           
   487                           ;main.c: 43:             writeBit(1);
   488  073D  3001               	movlw	1
   489  073E  26CC               	fcall	_writeBit
   490                           
   491                           ;main.c: 44:             writeBit(0);
   492  073F  3000               	movlw	0
   493  0740  26CC               	fcall	_writeBit
   494                           
   495                           ;main.c: 45:             writeBit(1);
   496  0741  3001               	movlw	1
   497  0742  26CC               	fcall	_writeBit
   498                           
   499                           ;main.c: 46:             writeBit(0);
   500  0743  3000               	movlw	0
   501  0744  26CC               	fcall	_writeBit
   502                           
   503                           ;main.c: 47:             writeBit(0);
   504  0745  3000               	movlw	0
   505  0746  26CC               	fcall	_writeBit
   506                           
   507                           ;main.c: 48:             writeBit(1);
   508  0747  3001               	movlw	1
   509  0748  26CC               	fcall	_writeBit
   510                           
   511                           ;main.c: 49:             writeBit(0);
   512  0749  3000               	movlw	0
   513  074A  26CC               	fcall	_writeBit
   514                           
   515                           ;main.c: 50:             writeBit(0);
   516  074B  3000               	movlw	0
   517  074C  26CC               	fcall	_writeBit
   518                           
   519                           ;main.c: 51:             break;
   520  074D  0008               	return
   521  074E                     l761:	
   522                           
   523                           ;main.c: 53:             writeBit(1);
   524  074E  3001               	movlw	1
   525  074F  26CC               	fcall	_writeBit
   526                           
   527                           ;main.c: 54:             writeBit(0);
   528  0750  3000               	movlw	0
   529  0751  26CC               	fcall	_writeBit
   530                           
   531                           ;main.c: 55:             writeBit(1);
   532  0752  3001               	movlw	1
   533  0753  26CC               	fcall	_writeBit
   534                           
   535                           ;main.c: 56:             writeBit(1);
   536  0754  3001               	movlw	1
   537  0755  26CC               	fcall	_writeBit
   538                           
   539                           ;main.c: 57:             writeBit(0);
   540  0756  3000               	movlw	0
   541  0757  26CC               	fcall	_writeBit
   542                           
   543                           ;main.c: 58:             writeBit(0);
   544  0758  3000               	movlw	0
   545  0759  26CC               	fcall	_writeBit
   546                           
   547                           ;main.c: 59:             writeBit(0);
   548  075A  3000               	movlw	0
   549  075B  26CC               	fcall	_writeBit
   550                           
   551                           ;main.c: 60:             writeBit(0);
   552  075C  3000               	movlw	0
   553  075D  26CC               	fcall	_writeBit
   554                           
   555                           ;main.c: 61:             break;
   556  075E  0008               	return
   557  075F                     l763:	
   558                           
   559                           ;main.c: 63:             writeBit(1);
   560  075F  3001               	movlw	1
   561  0760  26CC               	fcall	_writeBit
   562                           
   563                           ;main.c: 64:             writeBit(0);
   564  0761  3000               	movlw	0
   565  0762  26CC               	fcall	_writeBit
   566                           
   567                           ;main.c: 65:             writeBit(0);
   568  0763  3000               	movlw	0
   569  0764  26CC               	fcall	_writeBit
   570                           
   571                           ;main.c: 66:             writeBit(1);
   572  0765  3001               	movlw	1
   573  0766  26CC               	fcall	_writeBit
   574                           
   575                           ;main.c: 67:             writeBit(1);
   576  0767  3001               	movlw	1
   577  0768  26CC               	fcall	_writeBit
   578                           
   579                           ;main.c: 68:             writeBit(0);
   580  0769  3000               	movlw	0
   581  076A  26CC               	fcall	_writeBit
   582                           
   583                           ;main.c: 69:             writeBit(0);
   584  076B  3000               	movlw	0
   585  076C  26CC               	fcall	_writeBit
   586                           
   587                           ;main.c: 70:             writeBit(1);
   588  076D  3001               	movlw	1
   589  076E  26CC               	fcall	_writeBit
   590                           
   591                           ;main.c: 71:             break;
   592  076F  0008               	return
   593  0770                     l765:	
   594                           
   595                           ;main.c: 73:             writeBit(1);
   596  0770  3001               	movlw	1
   597  0771  26CC               	fcall	_writeBit
   598                           
   599                           ;main.c: 74:             writeBit(0);
   600  0772  3000               	movlw	0
   601  0773  26CC               	fcall	_writeBit
   602                           
   603                           ;main.c: 75:             writeBit(0);
   604  0774  3000               	movlw	0
   605  0775  26CC               	fcall	_writeBit
   606                           
   607                           ;main.c: 76:             writeBit(1);
   608  0776  3001               	movlw	1
   609  0777  26CC               	fcall	_writeBit
   610                           
   611                           ;main.c: 77:             writeBit(0);
   612  0778  3000               	movlw	0
   613  0779  26CC               	fcall	_writeBit
   614                           
   615                           ;main.c: 78:             writeBit(0);
   616  077A  3000               	movlw	0
   617  077B  26CC               	fcall	_writeBit
   618                           
   619                           ;main.c: 79:             writeBit(1);
   620  077C  3001               	movlw	1
   621  077D  26CC               	fcall	_writeBit
   622                           
   623                           ;main.c: 80:             writeBit(0);
   624  077E  3000               	movlw	0
   625  077F  26CC               	fcall	_writeBit
   626                           
   627                           ;main.c: 81:             break;
   628  0780  0008               	return
   629  0781                     l767:	
   630                           
   631                           ;main.c: 83:             writeBit(1);
   632  0781  3001               	movlw	1
   633  0782  26CC               	fcall	_writeBit
   634                           
   635                           ;main.c: 84:             writeBit(0);
   636  0783  3000               	movlw	0
   637  0784  26CC               	fcall	_writeBit
   638                           
   639                           ;main.c: 85:             writeBit(0);
   640  0785  3000               	movlw	0
   641  0786  26CC               	fcall	_writeBit
   642                           
   643                           ;main.c: 86:             writeBit(0);
   644  0787  3000               	movlw	0
   645  0788  26CC               	fcall	_writeBit
   646                           
   647                           ;main.c: 87:             writeBit(0);
   648  0789  3000               	movlw	0
   649  078A  26CC               	fcall	_writeBit
   650                           
   651                           ;main.c: 88:             writeBit(0);
   652  078B  3000               	movlw	0
   653  078C  26CC               	fcall	_writeBit
   654                           
   655                           ;main.c: 89:             writeBit(1);
   656  078D  3001               	movlw	1
   657  078E  26CC               	fcall	_writeBit
   658                           
   659                           ;main.c: 90:             writeBit(0);
   660  078F  3000               	movlw	0
   661  0790  26CC               	fcall	_writeBit
   662                           
   663                           ;main.c: 91:             break;
   664  0791  0008               	return
   665  0792                     l769:	
   666                           
   667                           ;main.c: 93:             writeBit(1);
   668  0792  3001               	movlw	1
   669  0793  26CC               	fcall	_writeBit
   670                           
   671                           ;main.c: 94:             writeBit(1);
   672  0794  3001               	movlw	1
   673  0795  26CC               	fcall	_writeBit
   674                           
   675                           ;main.c: 95:             writeBit(1);
   676  0796  3001               	movlw	1
   677  0797  26CC               	fcall	_writeBit
   678                           
   679                           ;main.c: 96:             writeBit(1);
   680  0798  3001               	movlw	1
   681  0799  26CC               	fcall	_writeBit
   682                           
   683                           ;main.c: 97:             writeBit(1);
   684  079A  3001               	movlw	1
   685  079B  26CC               	fcall	_writeBit
   686                           
   687                           ;main.c: 98:             writeBit(0);
   688  079C  3000               	movlw	0
   689  079D  26CC               	fcall	_writeBit
   690                           
   691                           ;main.c: 99:             writeBit(0);
   692  079E  3000               	movlw	0
   693  079F  26CC               	fcall	_writeBit
   694                           
   695                           ;main.c: 100:             writeBit(0);
   696  07A0  3000               	movlw	0
   697  07A1  26CC               	fcall	_writeBit
   698                           
   699                           ;main.c: 101:             break;
   700  07A2  0008               	return
   701  07A3                     l771:	
   702                           
   703                           ;main.c: 103:             writeBit(1);
   704  07A3  3001               	movlw	1
   705  07A4  26CC               	fcall	_writeBit
   706                           
   707                           ;main.c: 104:             writeBit(0);
   708  07A5  3000               	movlw	0
   709  07A6  26CC               	fcall	_writeBit
   710                           
   711                           ;main.c: 105:             writeBit(0);
   712  07A7  3000               	movlw	0
   713  07A8  26CC               	fcall	_writeBit
   714                           
   715                           ;main.c: 106:             writeBit(0);
   716  07A9  3000               	movlw	0
   717  07AA  26CC               	fcall	_writeBit
   718                           
   719                           ;main.c: 107:             writeBit(0);
   720  07AB  3000               	movlw	0
   721  07AC  26CC               	fcall	_writeBit
   722                           
   723                           ;main.c: 108:             writeBit(0);
   724  07AD  3000               	movlw	0
   725  07AE  26CC               	fcall	_writeBit
   726                           
   727                           ;main.c: 109:             writeBit(0);
   728  07AF  3000               	movlw	0
   729  07B0  26CC               	fcall	_writeBit
   730                           
   731                           ;main.c: 110:             writeBit(0);
   732  07B1  3000               	movlw	0
   733  07B2  26CC               	fcall	_writeBit
   734                           
   735                           ;main.c: 111:             break;
   736  07B3  0008               	return
   737  07B4                     l773:	
   738                           
   739                           ;main.c: 113:             writeBit(1);
   740  07B4  3001               	movlw	1
   741  07B5  26CC               	fcall	_writeBit
   742                           
   743                           ;main.c: 114:             writeBit(0);
   744  07B6  3000               	movlw	0
   745  07B7  26CC               	fcall	_writeBit
   746                           
   747                           ;main.c: 115:             writeBit(0);
   748  07B8  3000               	movlw	0
   749  07B9  26CC               	fcall	_writeBit
   750                           
   751                           ;main.c: 116:             writeBit(1);
   752  07BA  3001               	movlw	1
   753  07BB  26CC               	fcall	_writeBit
   754                           
   755                           ;main.c: 117:             writeBit(0);
   756  07BC  3000               	movlw	0
   757  07BD  26CC               	fcall	_writeBit
   758                           
   759                           ;main.c: 118:             writeBit(0);
   760  07BE  3000               	movlw	0
   761  07BF  26CC               	fcall	_writeBit
   762                           
   763                           ;main.c: 119:             writeBit(0);
   764  07C0  3000               	movlw	0
   765  07C1  26CC               	fcall	_writeBit
   766                           
   767                           ;main.c: 120:             writeBit(0);
   768  07C2  3000               	movlw	0
   769  07C3  26CC               	fcall	_writeBit
   770                           
   771                           ;main.c: 121:             break;
   772  07C4  0008               	return
   773  07C5                     l775:	
   774                           
   775                           ;main.c: 123:             writeBit(1);
   776  07C5  3001               	movlw	1
   777  07C6  26CC               	fcall	_writeBit
   778                           
   779                           ;main.c: 124:             writeBit(1);
   780  07C7  3001               	movlw	1
   781  07C8  26CC               	fcall	_writeBit
   782                           
   783                           ;main.c: 125:             writeBit(0);
   784  07C9  3000               	movlw	0
   785  07CA  26CC               	fcall	_writeBit
   786                           
   787                           ;main.c: 126:             writeBit(0);
   788  07CB  3000               	movlw	0
   789  07CC  26CC               	fcall	_writeBit
   790                           
   791                           ;main.c: 127:             writeBit(0);
   792  07CD  3000               	movlw	0
   793  07CE  26CC               	fcall	_writeBit
   794                           
   795                           ;main.c: 128:             writeBit(0);
   796  07CF  3000               	movlw	0
   797  07D0  26CC               	fcall	_writeBit
   798                           
   799                           ;main.c: 129:             writeBit(0);
   800  07D1  3000               	movlw	0
   801  07D2  26CC               	fcall	_writeBit
   802                           
   803                           ;main.c: 130:             writeBit(0);
   804  07D3  3000               	movlw	0
   805  07D4  26CC               	fcall	_writeBit
   806                           
   807                           ;main.c: 131:             break;
   808  07D5  0008               	return
   809  07D6                     l779:	
   810                           
   811                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   812                           ; Switch size 1, requested type "simple"
   813                           ; Number of cases is 1, Range of values is 0 to 0
   814                           ; switch strategies available:
   815                           ; Name         Instructions Cycles
   816                           ; simple_byte            4     3 (average)
   817                           ; direct_byte            7     6 (fixed)
   818                           ; jumptable            260     6 (fixed)
   819                           ;	Chosen strategy is simple_byte
   820  07D6  0872               	movf	writeNumber@num+1,w
   821  07D7  3A00               	xorlw	0	; case 0
   822  07D8  1903               	skipnz
   823  07D9  2FDB               	goto	l863
   824  07DA  2FFB               	goto	l40
   825  07DB                     l863:	
   826                           
   827                           ; Switch size 1, requested type "simple"
   828                           ; Number of cases is 10, Range of values is 0 to 9
   829                           ; switch strategies available:
   830                           ; Name         Instructions Cycles
   831                           ; direct_byte           16     6 (fixed)
   832                           ; simple_byte           31    16 (average)
   833                           ; jumptable            260     6 (fixed)
   834                           ;	Chosen strategy is simple_byte
   835  07DB  0871               	movf	writeNumber@num,w
   836  07DC  3A00               	xorlw	0	; case 0
   837  07DD  1903               	skipnz
   838  07DE  2FC5               	goto	l775
   839  07DF  3A01               	xorlw	1	; case 1
   840  07E0  1903               	skipnz
   841  07E1  2F2C               	goto	l757
   842  07E2  3A03               	xorlw	3	; case 2
   843  07E3  1903               	skipnz
   844  07E4  2F3D               	goto	l759
   845  07E5  3A01               	xorlw	1	; case 3
   846  07E6  1903               	skipnz
   847  07E7  2F4E               	goto	l761
   848  07E8  3A07               	xorlw	7	; case 4
   849  07E9  1903               	skipnz
   850  07EA  2F5F               	goto	l763
   851  07EB  3A01               	xorlw	1	; case 5
   852  07EC  1903               	skipnz
   853  07ED  2F70               	goto	l765
   854  07EE  3A03               	xorlw	3	; case 6
   855  07EF  1903               	skipnz
   856  07F0  2F81               	goto	l767
   857  07F1  3A01               	xorlw	1	; case 7
   858  07F2  1903               	skipnz
   859  07F3  2F92               	goto	l769
   860  07F4  3A0F               	xorlw	15	; case 8
   861  07F5  1903               	skipnz
   862  07F6  2FA3               	goto	l771
   863  07F7  3A01               	xorlw	1	; case 9
   864  07F8  1903               	skipnz
   865  07F9  2FB4               	goto	l773
   866  07FA  2FFB               	goto	l40
   867  07FB                     l40:	
   868  07FB  0008               	return
   869  07FC                     __end_of_writeNumber:	
   870                           
   871                           	psect	text3
   872  06CC                     __ptext3:	
   873 ;; *************** function _writeBit *****************
   874 ;; Defined at:
   875 ;;		line 21 in file "main.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  _bit            1    wreg     unsigned char 
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  _bit            1    0[COMMON] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   889 ;;      Params:         0       0       0       0
   890 ;;      Locals:         1       0       0       0
   891 ;;      Temps:          0       0       0       0
   892 ;;      Totals:         1       0       0       0
   893 ;;Total ram usage:        1 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_writeNumber
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _writeBit
   904  06CC                     _writeBit:	
   905                           
   906                           ;incstack = 0
   907                           ; Regs used in _writeBit: [wreg]
   908                           ;writeBit@_bit stored from wreg
   909  06CC  00F0               	movwf	writeBit@_bit
   910                           
   911                           ;main.c: 21: void writeBit(char _bit);main.c: 22: {;main.c: 23:   RB7 = 0;
   912  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   913  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   914  06CF  1386               	bcf	6,7	;volatile
   915                           
   916                           ;main.c: 24:   RB5 = _bit;
   917  06D0  1C70               	btfss	writeBit@_bit,0
   918  06D1  2ED6               	goto	u10
   919  06D2  1283               	bcf	3,5	;RP0=0, select bank0
   920  06D3  1303               	bcf	3,6	;RP1=0, select bank0
   921  06D4  1686               	bsf	6,5	;volatile
   922  06D5  2ED9               	goto	u24
   923  06D6                     u10:	
   924  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   925  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   926  06D8  1286               	bcf	6,5	;volatile
   927  06D9                     u24:	
   928                           
   929                           ;main.c: 25:   RB7 = 1;
   930  06D9  1786               	bsf	6,7	;volatile
   931                           
   932                           ;main.c: 26:   RB7 = 0;
   933  06DA  1386               	bcf	6,7	;volatile
   934  06DB  0008               	return
   935  06DC                     __end_of_writeBit:	
   936  007E                     btemp	set	126	;btemp
   937  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_write
    _write->_writeNumber
    _writeNumber->_writeBit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     113
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                3     3      0     113
                                              3 COMMON     3     3      0
                        _writeNumber
 ---------------------------------------------------------------------------------
 (2) _writeNumber                                          2     0      2     113
                                              1 COMMON     2     0      2
                           _writeBit
 ---------------------------------------------------------------------------------
 (3) _writeBit                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _write
     _writeNumber
       _writeBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       8      10        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jun 01 20:34:23 2019

                      _x 0076              __CFG_CP$OFF 0000           writeNumber@num 0071  
                     l40 07FB                       l43 0701                       u10 06D6  
                     u24 06D9                       u45 0728                       u57 0712  
                    l803 06E2                      l761 074E                      l771 07A3  
                    l763 075F                      l773 07B4                      l765 0770  
                    l757 072C                      l863 07DB                      l775 07C5  
                    l767 0781                      l759 073D                      l769 0792  
                    l779 07D6                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RB6 0036                      _RB7 0037             __CFG_CPD$OFF 0000  
           __CFG_LVP$OFF 0000                     _main 06DC                     btemp 007E  
                   start 0000                    ?_main 0070            __CFG_WDTE$OFF 0000  
            _writeNumber 072B                    _PORTB 0006                    _TRISB 0086  
          __CFG_PWRTE$ON 0000                    _write 06FF           __CFG_BOREN$OFF 0000  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 07FC             __end_of_main 06FF                   ??_main 0076  
                 ?_write 0070         __end_of_writeBit 06DC  __end_of__initialization 07FE  
         __pcstackCOMMON 0070            __end_of_write 072B                  ??_write 0073  
             __pmaintext 06DC             ?_writeNumber 0071                ?_writeBit 0070  
                __ptext1 06FF                  __ptext2 072B                  __ptext3 06CC  
   end_of_initialization 07FE             writeBit@_bit 0070               ??_writeBit 0070  
    start_initialization 07FC     __size_of_writeNumber 00D1              __pbssCOMMON 0076  
              ___latbits 0000        __size_of_writeBit 0010           __size_of_write 002C  
          __size_of_main 0023                 _writeBit 06CC            ??_writeNumber 0073  
    __CFG_FOSC$INTOSCCLK 0000      __end_of_writeNumber 07FC  
